<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="8d6fd6e6-e170-449f-97d1-7f43eb2876e7" activeEnvironment="Default" name="RenoWalk_API_End-to-End" resourceRoot="" soapui-version="5.2.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:description>http://localhost:8085//RenoWalk/api/v1/Corporate
http://localhost:8085//RenoWalk/api/v1/Region
http://localhost:8085//RenoWalk/api/v1/ProductTiers
http://localhost:8085//RenoWalk/api/v1/AppOffice
http://localhost:8085//RenoWalk/api/v1/Property</con:description><con:settings/><con:interface xsi:type="con:RestService" id="01598a48-ef46-47ca-8bc1-34538c762573" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://webapps-qa.homedepot.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://webapps-qa.homedepot.com</con:endpoint></con:endpoints><con:resource name="Corporate" path="/RenoWalk/api/v1/Corporate" id="9cf5cb3f-eee7-4a47-bd41-921c041fe135"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ViewCorporations" id="60812fea-da65-4831-baeb-f5ef894c4072" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cor="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate">cor:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json11</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cor="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate">cor:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ViewRequest" id="84117eed-e671-481b-b13e-b8ad20fb3df8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Content-Type" value="application/json"/>
  <con:entry key="Accept" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method><con:method name="AddCorporation" id="028ede43-80be-4740-95c7-6592ea2043b2" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">true</con:setting></con:settings><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cor="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate">cor:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:cor="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate">cor:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddRequest" id="cf639bdd-55f7-435f-9406-342efaa36c60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
    "CorporateID": ${#TestCase#NewCorpId},
    "CorporateName": "${#TestCase#NewCorpName}"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Region" path="/RenoWalk/api/v1/Region" id="2c59aa9f-a86e-4fe8-abdd-f3abc8330d53"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ViewRegions" id="7b9ff434-79ec-4f1a-86ab-61f5dcc66ced" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Region">reg:Response</con:element></con:representation><con:request name="ViewRequest" id="c4d65ad6-ccd5-4113-b32f-fbb6d5a49136" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Region</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Content-Type" value="application/json"/>
  <con:entry key="Accept" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method><con:method name="AddRegion" id="7b9ff434-79ec-4f1a-86ab-61f5dcc66ced" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:reg="http://localhost/RenoWalk/api/v1/Region">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddRequest" id="c4d65ad6-ccd5-4113-b32f-fbb6d5a49136" mediaType="multipart/form-data" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
    "RegionName": ""
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/Region</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="ProductTiers" path="/RenoWalk/api/v1/ProductTiers" id="ee242ded-69c3-4b90-bd39-ebbbee6e86d3"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ViewProductTiers" id="110366a7-bc57-4611-999e-865265c8be93" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prod="https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers">prod:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ViewRequest" id="355346a2-a3c0-4473-9742-82287a4e59b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method><con:method name="AddProductTier" id="110366a7-bc57-4611-999e-865265c8be93" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prod="https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers">prod:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:prod="https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers">prod:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddRequest" id="355346a2-a3c0-4473-9742-82287a4e59b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID": 41, "TierName": "PT3"
}
</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="AppOffice" path="/RenoWalk/api/v1/AppOffice" id="4babc890-581a-43fd-af71-804da87584ce"><con:settings/><con:parameters/><con:method name="ViewOffices" id="86d4a881-d6dc-45fb-9669-d3769a0b0f8a" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="http://localhost/RenoWalk/api/v1/AppOffice">app:Response</con:element></con:representation><con:request name="ViewRequest" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="AddOffice" id="86d4a881-d6dc-45fb-9669-d3769a0b0f8a" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="http://localhost/RenoWalk/api/v1/AppOffice">app:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:app="http://localhost/RenoWalk/api/v1/AppOffice">app:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:app="http://localhost/RenoWalk/api/v1/AppOffice">app:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddRequest" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"OfficeName": "AutoTestOffice4",
	"DefaultStoreNumber": "1234",
	"Address": "AutoTestAddress",
	"City": "AutoTestCity",
	"State": "MI",
	"ZipCode": "48108",
	"PhoneNumber": "1112222",
	"QuoteEmailAddress": "AutoTestQuote@AutoTest.com",
	"PropertyWalkSubmitEmailAddress": "AutoTestSubmit@AutoTest.com",
	"CorporateID": 1
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Property" path="/RenoWalk/api/v1/Property" id="898481e3-068b-4a87-9623-873f07310b21"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ViewProperties" id="7259410c-2a06-4fad-bd6d-1c447ec927b9" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:prop="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property">prop:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prop="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property">prop:Response</con:element></con:representation><con:request name="ViewRequest" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method><con:method name="AddProperty" id="7259410c-2a06-4fad-bd6d-1c447ec927b9" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:prop="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property">prop:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prop="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property">prop:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:prop="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property">prop:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddRequest" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID":106,
	"ProjectName":"AutoTestProperty2",
	"Address":"AutoTestAddress",
	"City":"AutoTestCity",
	"State":"MI",
	"ZipCode":"12345",
	"County":"AutoTestCounty",
	"MainSqFt":"1234",
	"NumberBedroom":"2",
	"NumberBathroom":"2.5",
	"YearBuilt":"2015",
	"Comment":"AutoTestComment",
	"GateCode":"AutoGCode",
	"LockBox":"AutoLckBox",
	"walkUserAssigned":"Bryce"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="9e1b68d5-36bb-4ebb-ad9d-1b100fb5b8a5" name="RenoWalk_API_TestDriver_TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="28e9eafa-9268-4a3b-ba2b-195bcfb88237" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestDriver_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="TestDriver_Groovy" id="408b71fc-e88e-4be9-a37e-4e350f00d4f5"><con:settings/><con:config><script><![CDATA[import Fillo.*;
import Exception.FilloException;
import com.eviware.soapui.model.testsuite.TestRunner.Status;
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat;
import groovy.time.*

scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
String sProjectName=testRunner.testCase.testSuite.project.name

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	Fillo fillo=new Fillo();
	String sTSName = ""
	String sTCName = ""
	String sEnvironment=""
	String sApplication=""
	String sPhase=""
	String sRelease=""
	String sReportName=""
	String sAPI_Flag=""
	Date startDate = new Date();
	String footer =""

	
	String sLogFileName = context.expand( '${#Project#LogFileName}' )
	log.info "sLogFileName>>>>>"+sLogFileName
	def sTestDataPath = context.expand( '${#Project#TestDataPath}' )
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	Connection connection=fillo.getConnection(sTestDataPath);
	String sEnvQuery="Select * from Environment where API_Flag='Y'";
	try{
		Recordset rsetEnvSheet=connection.executeQuery(sEnvQuery);
	
		while(rsetEnvSheet.next())
		{
			sEnvironment=rsetEnvSheet.getField("Environment");
			sApplication=rsetEnvSheet.getField("Application");
			sPhase=rsetEnvSheet.getField("Phase");
			sRelease=rsetEnvSheet.getField("Release");
			sReportName=rsetEnvSheet.getField("ReportName");
			sReportName = sReportName.replaceAll("Test", "API Test")
			sAPI_Flag=rsetEnvSheet.getField("API_Flag");
			break;
		}
		rsetEnvSheet.close();
	}
	catch (Exception e){
		log.info "In Error" + e
	}
log.info sEnvironment+sApplication+ sPhase+ sRelease
	/////////////////////////////////////////
		//repGenerateIndexHeader(sEnvironment, sApplication, sPhase, sRelease)
		
		def sHeader =  context.Reporter.repGenerateIndexHeader(sReportName, sEnvironment, sApplication, sPhase, sRelease)
		log.info "sHeader>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"+sHeader
		
		miniPath = sPhase+"_"	+ new SimpleDateFormat("MM_dd_yyyy_hh_mm_ss_a").format(new Date());
			
		def filePath = working_Directory.toString()+"\\Results\\"+ miniPath;
		String sFolderPath = filePath; // save path of local report folder
		testRunner.testCase.testSuite.project.setPropertyValue("ResultPath",sFolderPath)
		
	
		//String shareFolderPath = "\\\\"+"sSharedServerIP"+"\\"+"testEnv"+"\\"+"MyRelease"+"\\"+"appName"+"\\"+"Results"+"\\";
		//shareFolderPath = shareFolderPath + miniPath;
		
		dir = new File(filePath);
		dir.mkdir();
		File indexFile = new File(filePath+"\\"+"index_"+InetAddress.getLocalHost().getHostName()+".html")
		
		
	
	/////////////////////////////////////////
	if(sAPI_Flag=="Y")
	{
		Date startDateTC ;
		Date endDateTC ;
		String sTestSetQuery="Select * from TestSet where API_Test='Y'";
		String sTCId =""
		String sTCDesc =""
		String sSoapUIDataQuery =""
		String sTCHTMLContent = ""
		
		Recordset rsetTestSetSheet=connection.executeQuery(sTestSetQuery);
		while(rsetTestSetSheet.next())
		{
			String sSlNo = ""
			String sTotalSteps = ""
			String sPassSteps = ""
			String sFailSteps = ""
			String sStatus = ""
			String sALMHistory = ""
			String sTCStepsHTMLContent = ""

			startDateTC = new Date();
			sSlNo = testRunner.testCase.testSuite.getPropertyValue("TCCounter")
			int sCurrentSlNo = sSlNo.toInteger()+1
			testRunner.testCase.testSuite.setPropertyValue("TCCounter",sCurrentSlNo.toString())
			
			sTCId=rsetTestSetSheet.getField("Test_Case_ID");
			log.info(sTCId);
			sTCDesc=rsetTestSetSheet.getField("Test_Case_Description");
			log.info(sTCDesc);
			
			sSoapUIDataQuery="Select * from SoapUI where Test_Case_ID='" + sTCId + "'";
			
			Recordset rsetSoapUISheet=connection.executeQuery(sSoapUIDataQuery);
			while(rsetSoapUISheet.next())
			{
				sTSName = rsetSoapUISheet.getField("Test_Set_Name");
				log.info("Test Set Name >>>> "+sTSName);
	
				sTCName = rsetSoapUISheet.getField("Test_Case_Name");
				log.info("Test Case Name >>>> "+sTCName);
				//tcname=rsetSoapUISheet.getField("Test_Case_Name");
				//Corp_Id = rsetSoapUISheet.getField("Id");
				//Corp_Name = rsetSoapUISheet.getField("Name");
			}
			File tcFile = new File(filePath+"\\"+sTCName+".html")	
			headerHtmlContent = context.Reporter.repGenerateHeader(sReportName, sTCId, sTCName, sApplication, sTCDesc, sEnvironment)
			log.info "headerHtmlContent>>>>>>>>>"+headerHtmlContent
		
			rsetSoapUISheet.close();
	
			//log.info "Corporate ID:" + Corp_Id
			//log.info "Corporate Name:" + Corp_Name
			//testRunner.testCase.testSuite.setPropertyValue("Corp_Id",Corp_Id)
			//testRunner.testCase.testSuite.setPropertyValue("Corp_Name",Corp_Name)
			//def tc = testRunner.testCase.testSuite.project.testSuites["RenoWalk_API_TS"].testCases[tcname];
			
			def tc = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName];
			def runner = tc.run(null,false);

			String sTCTableHeader = context.Reporter.generateTCTableHeader()
			sTCStepsHTMLContent = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName].getPropertyValue("TCStepsHTMLContent")
			sTotalSteps = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName].getPropertyValue("TotalSteps")
			sPassSteps = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName].getPropertyValue("PassSteps")
			sFailSteps = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName].getPropertyValue("FailSteps")
			sStatus = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName].getPropertyValue("Status")
			sALMHistory = "ALM Connection Disabled"
			if(sStatus == "FINISHED")
			{
				sStatus = "Pass"
				fnUpdateTCCount("Pass")
			}
			else if(sStatus == "FAILED")
			{
				sStatus = "Fail"
				fnUpdateTCCount("Fail")
			}

				
			endDateTC = new Date();
			TimeDuration tcDuration = TimeCategory.minus(endDateTC , startDateTC )
			log.info "duration>>>>>>>>>>>"+tcDuration
			
			footer = context.Reporter.repGenerateFooter(startDateTC, endDateTC, sTotalSteps , sPassSteps, sFailSteps)
			log.info "footer>>>>>>>>>"+footer
			tcFile.write(headerHtmlContent+sTCTableHeader+sTCStepsHTMLContent+"</table><BR><BR>"+footer)
			
			def sExistingTCHTMLContent = testRunner.testCase.testSuite.getPropertyValue("TCIndexHTMLContent")
			def (value1, value2) = sTSName.tokenize( '_' )
			sTSName = value1;
			String sReqJSONPath = sFolderPath+"\\InputOutput_JSONs\\"+sTSName+"\\Request_"+sTCName
			String sRespJSONPath = sFolderPath+"\\InputOutput_JSONs\\"+sTSName+"\\Response_"+sTCName
			sTCHTMLContent = context.Reporter.generateTCIndexHTMLContent(sCurrentSlNo.toString(), sTCId, sTCName, sTCDesc, sTotalSteps, sPassSteps, sFailSteps, sStatus, tcDuration, sReqJSONPath, sRespJSONPath)
			//sTCHTMLContent = context.Reporter.generateTCIndexHTMLContent(sCurrentSlNo.toString(), sTCId, sTCName, sTCDesc, "5", "3", "2", sStatus, tcDuration, sALMHistory)
			testRunner.testCase.testSuite.setPropertyValue("TCIndexHTMLContent",sExistingTCHTMLContent+sTCHTMLContent)

			sleep(1000)
			//log.info "Status>>>>>>>>>>>>>>>>>>>>>>>"+runner.status
			//testRunner.testCase.testSuite.project.testSuites[context.testCase.testSuite.name].testCases["Corporations_TC"].setPropertyValue("Status",runner.status.toString())
		}
		rsetTestSetSheet.close();
	
	}//End If
	else
	{
		log.info "API Test execution not enabled. Change API_Flag in Test data sheet"
	}

	
	String sIndexTableHeader = context.Reporter.generateIndexTableHeader()
	String sTCIndexHTMLContent = testRunner.testCase.testSuite.getPropertyValue("TCIndexHTMLContent")

	
	String sTotalTC = testRunner.testCase.testSuite.getPropertyValue("TotalTC")
	String sPassTC = testRunner.testCase.testSuite.getPropertyValue("PassTC")
	String sFailTC = testRunner.testCase.testSuite.getPropertyValue("FailTC")
	Date endDate =  new Date()
	indexFooter = context.Reporter.repGenerateIndexFooter(sLogFileName, startDate, endDate, sTotalTC, sPassTC, sFailTC) 
	//indexFile.write(sHeader+headerHtmlContent+footer+indexFooter)	
	indexFile.write(sHeader+sIndexTableHeader+sTCIndexHTMLContent+"</table><BR><BR>"+indexFooter)	

	def fnUpdateTCCount(String sStatus)
	{
		def sTotalTC = testRunner.testCase.testSuite.getPropertyValue("TotalTC")
		int sLatestTotalTC = sTotalTC.toInteger()+1
		testRunner.testCase.testSuite.setPropertyValue("TotalTC",sLatestTotalTC.toString())

		if(sStatus=="Pass")
		{
			def sPassTC = testRunner.testCase.testSuite.getPropertyValue("PassTC")
			int sLatestPassTC = sPassTC.toInteger()+1
			testRunner.testCase.testSuite.setPropertyValue("PassTC",sLatestPassTC.toString())
			
		}
		else
		{
			def sFailTC = testRunner.testCase.testSuite.getPropertyValue("FailTC")
			int sLatestFailTC = sFailTC.toInteger()+1
			testRunner.testCase.testSuite.setPropertyValue("FailTC",sLatestFailTC.toString())
		}
		
	}

connection.close();
context.Reporter.openHTMLreport(filePath.toString()+"\\"+"index_"+InetAddress.getLocalHost().getHostName()+".html")


/*
	//requestContent = tc.getTestStepByName("ViewCorporations_Req").getPropertyValue("request")
	responseContent = tc.getTestStepByName("ViewCorporations_Req").getPropertyValue("response")
	//requestContent = tc.getTestStepByName("AddCorporation_Req").getPropertyValue("request")
	//responseContent = tc.getTestStepByName("AddCorporation_Req").getPropertyValue("response")
	
	//jsonRequest = new JsonSlurper().parseText(requestContent)
	jsonResponse = new JsonSlurper().parseText(responseContent)
	//log.info (jsonRequest.CorporateID)
	//log.info (jsonRequest.CorporateName)
	def iMaxCorpId = 0
	jsonResponse["CorporateItems"].each
	{ 
		log.info it
		if(it.CorporateID >iMaxCorpId)
		{
			iMaxCorpId = it.CorporateID
		}
		log.info "CorporateID>>>>>>>>>>>>>>>>>>>>>"+ it.CorporateID 
		log.info "CorporateName>>>>>>>>>>>>>>>>>>>"+ it.CorporateName
		
	}
	log.info "Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId 
	
	
	log.info (jsonResponse)
	log.info (jsonResponse.Key)
	log.info (jsonResponse.Value)
		
	log.info "Status: $runner.status"*/


	
	/*if (runner.status!="FAILED")
	{
		String strQuery2="Update SoapUI Set Status='PASSED' where Test_Case_Name='" + tcname + "'";
		connection.executeUpdate(strQuery2);}
		else{
		String strQuery2="Update SoapUI Set Status='" + runner.status +"' where Test_Case_Name='" + tcname + "'";
		connection.executeUpdate(strQuery2);
	}*/]]></script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>Corp_Id</con:name><con:value>3333</con:value></con:property><con:property><con:name>Corp_Name</con:name><con:value>Test_09102015</con:value></con:property><con:property><con:name>TotalTC</con:name><con:value>2</con:value></con:property><con:property><con:name>PassTC</con:name><con:value>2</con:value></con:property><con:property><con:name>FailTC</con:name><con:value>0</con:value></con:property><con:property><con:name>TCCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>TCIndexHTMLContent</con:name><con:value><![CDATA[

<tr>
<td class = "tsind" width = 20px>1</td>
<td class = "tsind" width = 60px><a class = "tcindex" href = "AddCorporationSmoke_TC.html">10017</a></td>
<td class = "tsgen" width = 200px>AddCorporationSmoke_TC</td>
<td class = "tsgen" width = 200px>Verify add Corporation functionality for Smoke</td>
<td class = "tsind" width = 25px>3</td>
<td class = "tsind" width = 40px>3</td>
<td class = "tsind" width = 40px>0</td>
<td class = "tsind" width = 50px><img src  =  '../../ReportRef/Images/pass.gif' width = "20" height = "20"> Pass</td>
<td class = "tsind" width = 40px>0.201 seconds</td>
<td class = "tsind" width=60px><a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_22_2015_02_30_45_PM\InputOutput_JSONs\EndToEndSmokeTest\Request_AddCorporationSmoke_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.gif"></a>&nbsp&nbsp&nbsp&nbsp<a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_22_2015_02_30_45_PM\InputOutput_JSONs\EndToEndSmokeTest\Response_AddCorporationSmoke_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.jpg"></a></td>
</tr>



<tr>
<td class = "tsind" width = 20px>2</td>
<td class = "tsind" width = 60px><a class = "tcindex" href = "AddOfficesPropertiesSmoke_TC.html">10018</a></td>
<td class = "tsgen" width = 200px>AddOfficesPropertiesSmoke_TC</td>
<td class = "tsgen" width = 200px>Verify add Office and Property functionality for Smoke</td>
<td class = "tsind" width = 25px>60</td>
<td class = "tsind" width = 40px>60</td>
<td class = "tsind" width = 40px>0</td>
<td class = "tsind" width = 50px><img src  =  '../../ReportRef/Images/pass.gif' width = "20" height = "20"> Pass</td>
<td class = "tsind" width = 40px>17.631 seconds</td>
<td class = "tsind" width=60px><a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_22_2015_02_30_45_PM\InputOutput_JSONs\EndToEndSmokeTest\Request_AddOfficesPropertiesSmoke_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.gif"></a>&nbsp&nbsp&nbsp&nbsp<a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_22_2015_02_30_45_PM\InputOutput_JSONs\EndToEndSmokeTest\Response_AddOfficesPropertiesSmoke_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.jpg"></a></td>
</tr>

]]></con:value></con:property></con:properties><con:setupScript>def groovyUtils=new  com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
log.info projectPath
runner.testSuite.project.setPropertyValue("Working_Directory",projectPath);
////////////////////////////////////////////////////////////////////////////////////
def sPropFileDir = new File(projectPath+"\\Properties")
log.info sPropFileDir.toString()

sPropFileDir.eachFile{ propFile ->
fname = propFile.getName()
if (fname.contains("properties"))  //just to avoid .svn folder
{
	propFile.eachLine{ line ->
	
	//log.info(newCode)
		if ((line.length()>1) &amp;&amp; !line.contains("'"))
		{
			def arrPropData=line.trim().split("::")
			runner.testSuite.project.setPropertyValue(arrPropData[0].toString(),arrPropData[1].toString())
			log.info "Setting "+ line.toString().trim()+"...."
		}
		else
		{
			if(line.length()>1){log.info "Endpoint commented out...Aborted setting"+ line.toString().trim()+"...."}
		}
	
	}
}
}
////////////////////////////////////////////////////////////////////////////////////
log.info testSuite.project.name
runner.testSuite.setPropertyValue("TotalTC","0");
runner.testSuite.setPropertyValue("PassTC","0");
runner.testSuite.setPropertyValue("FailTC","0");
runner.testSuite.setPropertyValue("TCCounter","0");
runner.testSuite.setPropertyValue("TCIndexHTMLContent","");

import java.util.*;
import java.util.Arrays 
import java.util.Date;
import java.io.*;
import org.apache.commons.lang.StringUtils;
	
def working_Directory = context.expand( '${#Project#Working_Directory}' )	 
   String sProjectName=testSuite.project.name
   def rDate = new Date();
 //def timeStamp = rDate.format('yyyyMMddHHmmss') ///One can use with datetime stamp also
 //def timeStamp = rDate.format('yyyyMMddHHmmss')
 def dateStamp = rDate.format('yyyyMMdd')
 def logFileLocn = new File(working_Directory+"\\Logs")
 if (!logFileLocn.exists())
{
	logFileLocn.mkdirs()
}
runner.testSuite.project.setPropertyValue("ProjectLog","");
runner.testSuite.project.setPropertyValue("LogFileName","");
//def logFile = new File(logFileLocn.toString()+"\\"+sProjectName+"_Log_"+dateStamp+".txt")
String sLogFileName = sProjectName+"_"+dateStamp+".log"
def logFile = new File(logFileLocn.toString()+"\\"+sLogFileName)
//def logFile = new File(sProjectName+"_"+dateStamp+".log")

log.info logFile.toString()
runner.testSuite.project.setPropertyValue("ProjectLog",logFile.toString());
runner.testSuite.project.setPropertyValue("LogFileName",sLogFileName);
if(logFile.exists())
{
logFile.append("\n**************************************************************************************************************************************************************************\n")	
}
else
{
logFile.write("********************************************************************"+sProjectName+" Logs***************************************************************************\n")
}	</con:setupScript></con:testSuite><con:testSuite id="1b36114b-c0b0-41b2-bb1f-08e94c216082" name="Function_Library_TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b31b5f8f-2527-4ee1-a469-8cac24e729b8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reporter_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Reporter_Groovy" id="632f5437-649d-4f4c-936a-a1d918129c5c"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
Date startDate = new Date();
String sHeader =  repGenerateIndexHeader("AAA","BBB","CCC")
log.info "sHeader>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"+sHeader
headerHtmlContent = repGenerateHeader("testCaseHeader","testCase", "sApplication", "testCaseDescription")
log.info "headerHtmlContent>>>>>>>>>"+headerHtmlContent
String footer = repGenerateFooter(startDate)
log.info "footer>>>>>>>>>"+footer
miniPath = "testPhase"+"_"	+ new SimpleDateFormat("MM_dd_yyyy_hh_mm_ss_a").format(new Date());
		
		def filePath = "C:\\Selenium_Workspace\\HomeDepot_Renowalk\\Results\\"+ miniPath;
		String sFolderPath = filePath; // save path of local report folder

		String shareFolderPath = "\\\\"+"sSharedServerIP"+"\\"+"testEnv"+"\\"+"MyRelease"+"\\"+"appName"+"\\"+"Results"+"\\";
		shareFolderPath = shareFolderPath + miniPath;
		
		dir = new File(filePath);
		dir.mkdir();
File indexFile = new File(filePath+"\\index.html")
		indexFile.write(sHeader+headerHtmlContent+footer)	 
String testEnv = "AAA"
String appName = "BBB"
String testPhase = "CCC"

def repGenerateIndexHeader(String testEnv, String appName, String testPhase)
	{
		String indexHeaderHtmlContent = "";
		String miniPath = null;
		String sSharedServerIP = null;
		def ttlFailCnt = 0;
		def testCnt = 0;
		def testStartDate = null;
		File dir = null;
		testStartDate = new Date();
		//log.info testEnv
		sSharedServerIP =  "MyIp";
		/*
		miniPath = testEnv+"_"
				+ appName+"_"
				+ productionType+"_"
				+ testPhase+"_"
				+ new SimpleDateFormat("MM_dd_yyyy_hh_mm_ss_a")
						.format(new Date());*/
		
		//Folder name Compatible with QTP Scripts
		

		String s = "Shameem" + "Arshad"
		log.info s
		//masterList = new ArrayList<IndexGen>();
		indexHeaderHtmlContent = "<html><head><link rel = \"stylesheet\" href = \"" +
				"../../ReportRef/css/styles.css\" /></head><body><hr class = \"divline\"><table class = \"reportheader\" width = 99%><tr><td height = 3px><img src  = '" +
				"../../ReportRef/Images/logo_en_thd.png'></td><BR><td height = 5px>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				//+ appName
				"MyReport" +
				"<BR>" +
				"<td height = 3px><img src  = '../../ReportRef/Images/logo_en_nex.png'></td>" +
				//+"<td height = 3px align = right></td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><td width = 30% class = \"subheader\" align = left>Test Phase</td><td width = 30% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 25% class = \"subheader\" align = right>Environment</td></tr><tr><td width = 30% class = \"subcontents\" align = left>"
				"<td height = 3px align = right></td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><td width = 20% class = \"subheader\" align = left>Test Phase</td><td width = 20% class = \"subheader\" align = left>Release</td><td width = 25% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 25% class = \"subheader\" align = right>Environment</td></tr><tr><td width = 20% class = \"subcontents\" align = left>" +
				testPhase +
				"</td>" +
				"<td width = 20% class = \"subcontents\" align = left>"+"MyRelease"+"</td>" +
				"<td width = 25% class = \"subcontents\">" +
				new SimpleDateFormat("MM-dd-yyyy").format(testStartDate) +
				"</td>" +
				"<td width = 15% class = \"subcontents\" align = left>" +
				"MyApplication" + "</td>" +
				"<td width = 25% class = \"subcontents\" align = right>" +
				testEnv + "</td></tr></table><hr class = \"divline\"><BR>";
				log.info indexHeaderHtmlContent
		
		return indexHeaderHtmlContent;
	}

	def repGenerateHeader(String testCaseHeader,String testCase, String sApplication, String testCaseDescription)
	{

		String headerHtmlContent = "";
		def passCnt = 0;
		def totalCnt = 0;
		def failCnt = 0;
		//incompleteCnt = 0;
		startTime = "";
		
		def startDate = new Date();

		headerHtmlContent = "<html><head><link rel = \"stylesheet\" href = \"" +
				"../../ReportRef/css/styles.css\" /></head><body><hr class = \"divline\"><table class = \"reportheader\" width = 99%><tr><td height = 3px><img src  = '" +
				"../../ReportRef/Images/logo_en_thd.png'></td><BR><td height = 5px>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				//+ appName
				"vvReportName" +
				"<BR>" +
				"<td height = 3px><img src  = '../../ReportRef/Images/logo_en_nex.png'></td>" +
				"<BR><td height = 3px align = right></td></tr></table><hr class = \"divline\">" + 
				"<BR><table class = \"subheader\" width = 99%><tr><td width = 10% class = \"subheader\" align = left>Test Id</td><td width = 35% class = \"subheader\" align = left>Test Case</td><td width = 20% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 20% class = \"subheader\" align = right>Environment</td></tr>" +
				"<tr>" +"<td width = 10% class = \"subcontents\" align = left>"+"sTest_Case_ID"+"</td>" +
				"<td width = 35% class = \"subcontents\" align = left>"+"testCase"+"</td>" +
				"<td width = 20% class = \"subcontents\">" +
				new SimpleDateFormat("MM-dd-yyyy").format(startDate) +
				"</td>" +
				"<td width = 15% class = \"subcontents\" align = left>" +
				"TestDriver.sApplication" + "</td>"+
				"<td width = 20% class = \"subcontents\" align = right>" +
				"TestDriver.sEnvironment" + "</td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><tr><td width = 99% class = \"subheader\">Test Case Description</td></tr><tr><td width = 99% class = \"subcontents\">" +
				"testCaseDescription" +
				"</td></tr></tr></table><hr class = \"divline\"><BR>";
			/*	"<BR>" +
				"<table class = \"subheader\" width = 900px>" +
				"<tr><td width = 800px class = \"subheader\">Test Case</td><td width = 600px class = \"subheader\">Execution Date</td><td width = 400px align = right class = \"subheader\">Application</td></tr><tr><td width = 400px class = \"subcontents\">"
				+ testCase
				+ "</td><td width = 300px class = \"subcontents\">"
				+ new SimpleDateFormat("MM-dd-yyyy").format(startDate)
				+ "</td><td width = 200px align = right class = \"subcontents\">"
				+ sApplication
				+ "</td></tr></table><hr class = \"divline\"> <BR><table class = \"subheader\" width = 900px><tr><tr><td width = 900px class = \"subheader\">Test Case Description</td></tr><tr><td width = 900px class = \"subcontents\">"
				+ testCaseDescription
				+ "</td></tr></tr></table><hr class = \"divline\"><BR>";*/
		return headerHtmlContent;
	}


	def repGenerateFooter(Date startDate) {
		String footer = "";
		endDate = new Date();
		def strDiff 
		def diff = (int) ((endDate.getTime() / 1000) - (startDate.getTime() / 1000));
		if ((diff / 60) != 0) {
			strDiff = ((diff / 60) + "Min" + " " + (diff % 60) + "Secs");
		} else {
			strDiff = ((diff % 60) + " " + "Secs");
		}
		
		// System.out.println("@@ Time difference @@" + diff);
		//footer = "<table class = \"tblinks\" width = 250px align = left><tr><td class = \"tsheader\">Links</td></tr><tr><td class = \"pfind\"><a href = \"index.html\">Index Page</a></td></tr></table><table width = 250px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 130px>"
		footer = "<table class = \"tblinks\" width = 200px align = left><tr><td class = \"tsheader\">My Links</td></tr><tr><td class = \"pfind\">&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<a href = "+"TestDriver.sIndexHTMLFileName"+">Go to Home Page</a></td></tr></table><table width = 320px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 200px>" +
				new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(startDate) +
				"</td></tr><tr><td class = \"pfhead\" width = 120px>End Time</td><td class = \"pfind\" width = 200px>" +
				new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(endDate) +
				"</td></tr><tr><td class = \"pfhead\" width = 120px>Duration</td><td class = \"pfind\" width = 200px>" +
				strDiff +
				"  </td></tr></table><!-- Pass Fail count--><table width = 250px class = \"pfsummary\"><tr><td colspan = 2 class = \"tsheader\">Test Case Summary</td></tr><tr><td class = \"pfhead\" width = 150px>Total Steps</td><td class = \"pfind\" width = 100px>" +
				"totalCnt" +
				"</td>	</tr><tr><td class = \"pfhead\" width = 150px>Steps Passed</td><td class = \"pfind\" width = 100px>" +
				"passCnt" +
				"</td></tr>" +
				//"<tr><td class = \"pfhead\" width = 150px>Incomplete</td><td class = \"pfind\" width = 100px>"+incompleteCnt+"</td></tr>" +
				"<tr><td class = \"pfhead\" width = 150px>Steps Failed</td><td class = \"pfind\" width = 100px>" +
				"failCnt" + "</td></tr></table><BR><BR>";
		return footer;
	}]]></script></con:config></con:testStep><con:testStep type="groovy" name="MainReporter" id="d388387c-490a-492b-a7c4-97955bede82d"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
//import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import groovy.time.*

context.setProperty("Reporter", new Reporter());
/*
Date startDate = new Date();
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	log.info "Before >>"+ working_Directory
	public static String sReportsPath = ""
	log.info "sReportsPath >>"+sReportsPath
	sReportsPath = working_Directory.toString()
	log.info "After sReportsPath>>"+sReportsPath

	*/
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
		log.info "Proj Loc >>"+ working_Directory
		
class Reporter{

    def sayHello(name)
    {
        return "Hello " + name + "!";
    }
	def getProjectLoc()
    {
    		
       	 return "Hello " + name + "!";
    }
	
	public static String strFinal=null;
	public static int iSlNo;
	static int totalCnt; // total step count
	static int passCnt; // step pass
	static int failCnt; // step fail
	//static int incompleteCnt=0; // step incomplete
	
	
	//static int warnCnt = 0;
	static int diff = 0;
	
	static int testCaseCnt = 0;
	
	public static int iTotalExecuted = 0;
	public static int iTotalPass = 0;
	public static int iTotalFail = 0;
	//public static int totalIncomplete = 0;
	public static int totalPlanned = 0;
	
	static int testPassCnt= 0;
	static int testFailCnt = 0;
	//static int testWarnCnt = 0;
	//static int testIncompleteCnt = 0;
	static int ttlPassCnt = 0;
	static int ttlFailCnt = 0;
	//static int ttlIncompleteCnt = 0;
	static int testCnt = 0;
	
	
	@SuppressWarnings("rawtypes")
	static ArrayList tc;
	static String strDiff = "";
	static String startTime = "";
	static Date startDate;
	static Date endDate;
	static Date testStartDate;
	static Date testEndDate;
	public int i;
	public String rowid;
	public static File file;
	
	//static final String PATH = FileLoc.sProjPath+"Results\\";
    //static final String REFPATH = FileLoc.sProjPath+"ReportRef\\";	
	
	//static final String PATH = FileLocSetter.sReportsPath+"Results\\";
    //static final String REFPATH = FileLocSetter.sReportsPath+"ReportRef\\";	
	
	public static String filePath; // local report testcase folder
	public static String shareFolderPath; // track shared folder path

	//public static String repGenerateIndexHeader(String testEnv, String appName, String productionType, String testPhase) throws Exception
	
	def repGenerateIndexHeader(String reportName,String testEnv, String appName, String testPhase, String release)
	{
		String indexHeaderHtmlContent = "";
		String miniPath = null;
		String sSharedServerIP = null;
		def ttlFailCnt = 0;
		def testCnt = 0;
		def testStartDate = null;
		File dir = null;
		testStartDate = new Date();
		//log.info testEnv
		sSharedServerIP =  "MyIp";
		/*
		miniPath = testEnv+"_"
				+ appName+"_"
				+ productionType+"_"
				+ testPhase+"_"
				+ new SimpleDateFormat("MM_dd_yyyy_hh_mm_ss_a")
						.format(new Date());*/
		
		//Folder name Compatible with QTP Scripts
		//masterList = new ArrayList<IndexGen>();
		try
		{
			indexHeaderHtmlContent = "<html><head><link rel = \"stylesheet\" href = \"" +
				"../../ReportRef/css/styles.css\" /></head><body><hr class = \"divline\"><table class = \"reportheader\" width = 99%><tr><td height = 3px><img src  = '" +
				"../../ReportRef/Images/logo_en_thd.png'></td><BR><td height = 5px>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				//+ appName
				reportName +
				"<BR>" +
				"<td height = 3px><img src  = '../../ReportRef/Images/logo_en_nex.png'></td>" +
				//+"<td height = 3px align = right></td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><td width = 30% class = \"subheader\" align = left>Test Phase</td><td width = 30% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 25% class = \"subheader\" align = right>Environment</td></tr><tr><td width = 30% class = \"subcontents\" align = left>"
				"<td height = 3px align = right></td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><td width = 20% class = \"subheader\" align = left>Test Phase</td><td width = 20% class = \"subheader\" align = left>Release</td><td width = 25% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 25% class = \"subheader\" align = right>Environment</td></tr><tr><td width = 20% class = \"subcontents\" align = left>" +
				testPhase +
				"</td>" +
				"<td width = 20% class = \"subcontents\" align = left>"+release+"</td>" +
				"<td width = 25% class = \"subcontents\">" +
				new SimpleDateFormat("MM-dd-yyyy").format(testStartDate) +
				"</td>" +
				"<td width = 15% class = \"subcontents\" align = left>" +
				appName + "</td>" +
				"<td width = 25% class = \"subcontents\" align = right>" +
				testEnv + "</td></tr></table><hr class = \"divline\"><BR>";
				println indexHeaderHtmlContent
		}
		catch (Exception e)
		{
			 //fnUpdateLog("Function [repGenerateIndexHeader] failed with exception : "+e)
		}
		return indexHeaderHtmlContent;
	}

	/* @@@ Generate Header for the HTML @@@ */

	def repGenerateHeader(String reportName, String testCaseId, String testCaseName, String application, String testCaseDescription, String testEnv)
	{
	
		String headerHtmlContent = "";
		def passCnt = 0;
		def totalCnt = 0;
		def failCnt = 0;
		//incompleteCnt = 0;
		startTime = "";
		
		def startDate = new Date();
		try
		{
			headerHtmlContent = "<html><head><link rel = \"stylesheet\" href = \"" +
				"../../ReportRef/css/styles.css\" /></head><body><hr class = \"divline\"><table class = \"reportheader\" width = 99%><tr><td height = 3px><img src  = '" +
				"../../ReportRef/Images/logo_en_thd.png'></td><BR><td height = 5px>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				//+ appName
				reportName +
				"<BR>" +
				"<td height = 3px><img src  = '../../ReportRef/Images/logo_en_nex.png'></td>" +
				"<BR><td height = 3px align = right></td></tr></table><hr class = \"divline\">" + 
				"<BR><table class = \"subheader\" width = 99%><tr><td width = 10% class = \"subheader\" align = left>Test Id</td><td width = 35% class = \"subheader\" align = left>Test Case</td><td width = 20% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 20% class = \"subheader\" align = right>Environment</td></tr>" +
				"<tr>" +"<td width = 10% class = \"subcontents\" align = left>"+testCaseId+"</td>" +
				"<td width = 35% class = \"subcontents\" align = left>"+testCaseName+"</td>" +
				"<td width = 20% class = \"subcontents\">" +
				new SimpleDateFormat("MM-dd-yyyy").format(startDate) +
				"</td>" +
				"<td width = 15% class = \"subcontents\" align = left>" +
				application + "</td>"+
				"<td width = 20% class = \"subcontents\" align = right>" +
				testEnv + "</td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><tr><td width = 99% class = \"subheader\">Test Case Description</td></tr><tr><td width = 99% class = \"subcontents\">" +
				testCaseDescription +
				"</td></tr></tr></table><hr class = \"divline\"><BR>";
			/*	"<BR>" +
				"<table class = \"subheader\" width = 900px>" +
				"<tr><td width = 800px class = \"subheader\">Test Case</td><td width = 600px class = \"subheader\">Execution Date</td><td width = 400px align = right class = \"subheader\">Application</td></tr><tr><td width = 400px class = \"subcontents\">"
				+ testCase
				+ "</td><td width = 300px class = \"subcontents\">"
				+ new SimpleDateFormat("MM-dd-yyyy").format(startDate)
				+ "</td><td width = 200px align = right class = \"subcontents\">"
				+ sApplication
				+ "</td></tr></table><hr class = \"divline\"> <BR><table class = \"subheader\" width = 900px><tr><tr><td width = 900px class = \"subheader\">Test Case Description</td></tr><tr><td width = 900px class = \"subcontents\">"
				+ testCaseDescription
				+ "</td></tr></tr></table><hr class = \"divline\"><BR>";*/
		}
		catch (Exception e)
		{
			 //fnUpdateLog("Function [repGenerateHeader] failed with exception : "+e)
		}
		return headerHtmlContent;
	}

	/* @@@ Generate Footer for the HTML @@@ */

	def repGenerateFooter(Date startDate, Date endDate, String totalTSCount, String passTSCount, String failTSCount) {
		String footer = "";
		String strDiff  = ""
		/*Date endDate = new Date();
		def diff = (int) ((endDate.getTime() / 1000) - (startDate.getTime() / 1000));
		if ((diff / 60) != 0) {
			strDiff = ((diff / 60) + "Min" + " " + (diff % 60) + "Secs");
		} else {
			strDiff = ((diff % 60) + " " + "Secs");
		}*/
		try
		{	
			strDiff  = TimeCategory.minus(endDate, startDate)
			// System.out.println("@@ Time difference @@" + diff);
			//footer = "<table class = \"tblinks\" width = 250px align = left><tr><td class = \"tsheader\">Links</td></tr><tr><td class = \"pfind\"><a href = \"index.html\">Index Page</a></td></tr></table><table width = 250px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 130px>"
			footer = "<table class = \"tblinks\" width = 200px align = left><tr><td class = \"tsheader\">My Links</td></tr><tr><td class = \"pfind\">&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<a href = "+"index_"+InetAddress.getLocalHost().getHostName()+".html"+">Go to Home Page</a></td></tr></table><table width = 320px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 200px>" +
				new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(startDate) +
				"</td></tr><tr><td class = \"pfhead\" width = 120px>End Time</td><td class = \"pfind\" width = 200px>" +
				new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(endDate) +
				"</td></tr><tr><td class = \"pfhead\" width = 120px>Duration</td><td class = \"pfind\" width = 200px>" +
				strDiff +
				"  </td></tr></table><!-- Pass Fail count--><table width = 250px class = \"pfsummary\"><tr><td colspan = 2 class = \"tsheader\">Test Case Summary</td></tr><tr><td class = \"pfhead\" width = 150px>Total Steps</td><td class = \"pfind\" width = 100px>" +
				totalTSCount +
				"</td>	</tr><tr><td class = \"pfhead\" width = 150px>Steps Passed</td><td class = \"pfind\" width = 100px>" +
				passTSCount +
				"</td></tr>" +
				//"<tr><td class = \"pfhead\" width = 150px>Incomplete</td><td class = \"pfind\" width = 100px>"+incompleteCnt+"</td></tr>" +
				"<tr><td class = \"pfhead\" width = 150px>Steps Failed</td><td class = \"pfind\" width = 100px>" +
				failTSCount + "</td></tr></table><BR><BR>";
		}
		catch (Exception e)
		{
			 //fnUpdateLog("Function [repGenerateFooter] failed with exception : "+e)
		}
		return footer;
	}

	/* @@@ Generate Footer for the index HTML @@@ */

	public String repGenerateIndexFooter(String sLogFileName, Date startDate, Date endDate, String totalTCCount, String passTCCount, String failTCCount) 
	{
//		System.out.println(" Inside generate index footer");
		String footer = "";
		
		def strDiff = ""
		/*
		Date endDate = new Date(); 
		def diff = (int) ((endDate.getTime() / 1000) - (startDate.getTime() / 1000));
		if ((diff / 60) != 0) {
			strDiff = ((diff / 60) + "Min" + " " + (diff % 60) + " " + "Secs");
		} else {
			strDiff = ((diff % 60) + " Secs");
		}*/
		TimeDuration tcDuration = TimeCategory.minus(endDate , startDate )
		strDiff = tcDuration.toString()
		try
		{
			footer = "<table width = 320px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 200px>" +
				 new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(startDate) +
				 "</td></tr><tr><td class = \"pfhead\" width = 120px>End Time</td><td class = \"pfind\" width = 200px>" +
				 new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(endDate) +
				 "</td></tr><tr><td class = \"pfhead\" width = 120px>Duration</td><td class = \"pfind\" width = 200px>" +
				 strDiff +
				 " </td></tr></table><table width = 250 class = \"pfsummary\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Summary</td></tr><tr><td class = \"pfhead\" width = 150px>Total Test Cases</td> <td class = \"pfind\" width = 100px>" +
				 totalTCCount +
				 "</td></tr><tr><td class = \"pfhead\" width = 150px>Test Cases Passed</td><td class = \"pfind\" width = 100px> " +
				 passTCCount +
				 "</td></tr>" +
				//+"<tr><td class = \"pfhead\" width = 150px>Incomplete Test Cases</td><td class = \"pfind\" width = 100px>"+totalIncomplete+"</td></tr>"
				"<tr><td class = \"pfhead\" width = 150px>Test Cases Failed</td><td class = \"pfind\" width = 100px>" +
				 failTCCount + "</td></tr></table>" +
				"<div class=\"right\">" +
				//"<p><b>Want to See Pass/Failure Reason?<b></p><blink><a align = right target = \"_blank\" href =  '"+ "../../logs/app.log" +
				"<p><b>Want to See Pass/Failure Reason?<b></p><blink><a align = right target = \"_blank\" href =  '"+ "../../Logs/"+sLogFileName +
				 "'\">Navigate to Logs</a></blink></div>" +
				"</body></html>";
		}
		catch (Exception e)
		{
			 //fnUpdateLog("Function [repGenerateIndexFooter] failed with exception : "+e)
		}

		return footer;
	}

	public String generateIndexTableHeader()
	{
		String tblHdr = "\n\n<BR><table width = 99% class = \"teststeps\"><tr><td class = \"tsheader\" width = 2%>S.No</td><td class = \"tsheader\" width = 6%>Test Id</td><td class = \"tsheader\" width = 20%>Test Case</td><td class = \"tsheader\" width = 20%>Description</td><td class = \"tsheader\" width = 8%>Steps</td><td class = \"tsheader\" width = 8%>Passed</td>"+
					//"<td class = \"tsheader\" width = 40px>Incomplete</td>"
					"<td class = \"tsheader\" width = 8%>Failed</td><td class = \"tsheader\" width = 10px>Status</td><td class = \"tsheader\" width = 9%>Duration</td><td class = \"tsheader\" width = 9%>JSON Files</td></tr>";
	return tblHdr;
	}

	
	public String generateTCIndexHTMLContent(String sSlNo, String sTCId, String sTCName, String sTCDesc, String sTotalSteps, String sPassSteps, String sFailSteps, String sStatus, def tcDuration, String sReqJSONPath, String sRespJSONPath)
	{
		String content = "";
		String sImgLocn = ""
		try
		{
			if(sStatus=="Pass")
			{
				sImgLocn = "../../ReportRef/Images/pass.gif"
			}
			else if(sStatus=="Fail")
			{
				sImgLocn = "../../ReportRef/Images/failed.gif"
			}
	
			content = content +
					"\n\n<tr>\n<td class = \"tsind\" width = 20px>" +
					sSlNo + 
					"</td>\n<td class = \"tsind\" width = 60px><a class = \"tcindex\" href = \"" +
					sTCName+".html\">" +
					sTCId +
					"</a></td>\n<td class = \"tsgen\" width = 200px>" +
					sTCName +
					"</td>\n<td class = \"tsgen\" width = 200px>" +
					sTCDesc +
					"</td>\n<td class = \"tsind\" width = 25px>" +
					sTotalSteps +
					"</td>\n<td class = \"tsind\" width = 40px>" +
					sPassSteps +
					"</td>\n" +
					//"<td class = \"tsind\" width = 40px>"+ masterList.get(i).getIncomplete()+ "</td>"
					"<td class = \"tsind\" width = 40px>" +
					sFailSteps +
					"</td>\n<td class = \"tsind\" width = 50px><img src  =  '" +
					sImgLocn + "' width = \"20\" height = \"20\">" +
					" "+sStatus +
					"</td>\n<td class = \"tsind\" width = 40px>" +
					tcDuration + "</td>" +
					"\n<td class = \"tsind\" width=60px><a target = \"_blank\" class = \"anibutton\" href =  '" +
					sReqJSONPath +
					"'\"><img class = \"screen\" src  =  \"" +
					"../../ReportRef/Images/json.gif\"></a>&nbsp&nbsp&nbsp&nbsp" +
					"<a target = \"_blank\" class = \"anibutton\" href =  '" +
					sRespJSONPath +
					"'\"><img class = \"screen\" src  =  \"" +
					"../../ReportRef/Images/json.jpg\"></a></td>\n</tr>\n\n";
					//"\n<td  class=\"tsind\" width=40px>"+ sALMHistory +"</td>\n</tr>\n\n";  
		}
		catch (Exception e)
		{
			 //fnUpdateLog("Function [generateTCIndexHTMLContent] failed with exception : "+e)
		}
		return content;
	}

	public String generateTCTableHeader()
	{
		String tcTblHdr = "<BR><table width = 99% class = \"teststeps\"><tr><td class = \"tsheader\" width = 5%>Step #</td><td class = \"tsheader\" width = 25%>Step Description</td><td class = \"tsheader\" width = 25%>Expected Result</td><td class = \"tsheader\" width = 25%>Actual Result</td><td class = \"tsheader\" width = 10%>Status</td><td class = \"tsheader\" width = 10%>Screen Shot</td></tr>";
	return tcTblHdr;
	}
	
	public String generateTCHTMLContent(String sStepNo, String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{
		String tcContent = "";
		String sImgLocn = ""
		
		try
		{
			if(sStatus=="Pass")
			{
				sImgLocn = "../../ReportRef/Images/pass.gif"
			}
			else if(sStatus=="Fail")
			{
				sImgLocn = "../../ReportRef/Images/failed.gif"
			}

			if(sExpResult == "" && sActualResult == "" && sStatus == "")
			{
				tcContent = tcContent +
						"<tr><td class = \"tsindlevel1\" width = 5%>" +
						sStepNo +
						"</td><td class = \"tsgenlevel1\" width = 25%>" +
						sStepDesc +
						"</td><td class = \"tsgenlevel1\" width = 25%></td><td class = \"tsgenlevel1\" width = 25%></td><td class = \"tsindlevel1\" width = 10%>&nbsp</td>" +
						"<td class = \"tsgenlevel1\" width = 10%></td>" +  //Shameem we need screenshot column just to show on the screen (but of course without screenshot)
						"</tr>";
			}
			else
			{
			tcContent = tcContent +
							 "\n\n<tr><td class = \"tsindlevel2\" width = 5%>" +
							 sStepNo +
							 "</td><td class = \"tsgen\" width = 25%>" +
							 sStepDesc +
							 " </td><td class = \"tsgen\" width = 25%>" +
							 sExpResult +
							 "</td><td class = \"tsgen\" width = 25%>" +
							 sActualResult+
							 "</td><td class = \"tsind\" width = 10%><font size  =  2 color  =  red><img src  = '" +
							 sImgLocn +
							 "' "+sStatus+"&nbsp;" +
							 "</td>" +
							 "<td class = \"tsind\" width = 10%></td>"  //screenshot td, infact not required
							// "<td class = \"tsind\" width = 10%><a target = \"_blank\" class = \"anibutton\" href =  '" +
							// "screenshotname" +
							 //"'\"><img class = \"screen\" src  =  \"" +
							// "../../ReportRef/Images/screenshot.gif\"></a></td>"
							 "</tr>\n\n";
			}
		}
		catch (Exception e)
		{
			//fnUpdateLog("FunfnUpdateLogction [generateTCHTMLContent] failed with exception : "+e)
		}

		return tcContent;
	}

	def openHTMLreport(String sFilePath) throws Exception
	{
		try {
			//String url1 = "" + filePath + "\\"+TestDriver.sIndexHTMLFileName;
			File htmlFile = new File(sFilePath);
			Desktop.getDesktop().browse(htmlFile.toURI());
		}

		catch (Exception e) {
			System.out.println(e.getMessage());
		} 
	}

	/* @@@ Generate Body content for the HTML @@@ */
/*
	//public void repAddData(String step, String stepDescription,String expectedResult, String actualResult, String status) throws Exception 
	public void repAddData(String stepDescription,String expectedResult, String actualResult, String status) throws Exception
	{
		try {
			String step = "";
		if(expectedResult.equalsIgnoreCase("") && actualResult.equalsIgnoreCase("") && status.equalsIgnoreCase(""))
			{
				mainStep++;
				step=String.valueOf(mainStep);
				subStep=0;  //If we start a new tc header like 2 and 3
			}
			else
			{
				subStep++;
				step=String.valueOf(mainStep)+"."+String.valueOf(subStep);
			}
			
		//	if(status.equals("")) subStep=0;
			
			if(status.equalsIgnoreCase("Fail"))
			{
				String fileName = "";
				testCaseStatus = false;
				
				//ReportGen re = new ReportGen();
				if (step.indexOf(".") != -1) {
					re.setStep(step);
					re.setStepDescription(stepDescription);
					re.setExpectedResult(expectedResult);
					re.setActualResult(actualResult);
					//re.setStatus(status.toUpperCase());
					re.setStatus(status);
					fileName = ScreenShotGetter.screenShotCapture(filePath);
					re.setScreenShotFileName(fileName);
					re.setTimeStamp();
				} else 
				{
					re.setStep(step);
					re.setStepDescription(stepDescription);
				}
				reportList.add(re);
			} 
					
			else 
			{
				//String fileName = "";

				//ReportGen re = new ReportGen();
				if (step.indexOf(".") != -1) {
					re.setStep(step);
					re.setStepDescription(stepDescription);
					re.setExpectedResult(expectedResult);
					re.setActualResult(actualResult);
					//re.setStatus(status.toUpperCase());
					re.setStatus(status);
					//fileName = ScreenCapture.screenShotCapture(filePath); //Shameem - Comment screenshot for Pass status
					//re.setScreenShotFileName(fileName);
					re.setTimeStamp();
				} else 
				{
					re.setStep(step);
					re.setStepDescription(stepDescription);
				}
				reportList.add(re);
			}
			
			System.out.println("["+step+"]"+"["+stepDescription+"]"+"["+expectedResult+"]"+"["+actualResult+"]"+"["+status+"]");

		} catch (Exception e) {
			System.out.println(e);
		}
		
	}	
*/
		// System.out.println("@@@ Report List Size @@@" + reportList.size());
	

	/* @@@ Generate the child test report HTML @@@ */
/*
	public void repGenerateResult(String testName, String header)	throws Exception 
	{
		
		String str = "";
		String footer = "";
		//IndexGen me = new IndexGen();

		iSlNo++;
		for (int i = 0; i < reportList.size(); i++) 
		{
			if (reportList.get(i).getStep().indexOf(".") == -1) 
			{
				str = str
						+ "<tr><td class = \"tsindlevel1\" width = 5%>"
						+ reportList.get(i).getStep()
						+ "</td><td class = \"tsgenlevel1\" width = 25%>"
						+ reportList.get(i).getStepDescription()
						+ "</td><td class = \"tsgenlevel1\" width = 25%></td><td class = \"tsgenlevel1\" width = 25%></td><td class = \"tsindlevel1\" width = 10%>&nbsp</td>"
						+"<td class = \"tsgenlevel1\" width = 10%></td>"  //Shameem we need screenshot column just to show on the screen (but of course without screenshot)
						+"</tr>";
			} else 
			{
				totalCnt++; //total test step count
				if ("Pass".equalsIgnoreCase(reportList.get(i).getStatus())) 
				{
					passCnt++; //total testcase passed
					str = str
							+ "<tr><td class = \"tsindlevel2\" width = 5%>"
							+ reportList.get(i).getStep()
							+ "</td><td class = \"tsgen\" width = 25%>"
							+ reportList.get(i).getStepDescription()
							+ " </td><td class = \"tsgen\" width = 25%>"
							+ reportList.get(i).getExpectedResult()
							+ "</td><td class = \"tsgen\" width = 25%>"
							+ reportList.get(i).getActualResult()
							+ "</td><td class = \"tsind\" width = 10%>" +" "
							+"<font size  =  2 color  =  green><img src  =  '"
							+ "../../ReportRef/Images/pass.gif'/>"
							+ " "+reportList.get(i).getStatus()
							//+ "</b></td><td class = \"tsind\" width = 50px>&nbsp</td></tr>";
							+ "</td>"
							+"<td class = \"tsind\" width = 10%></td>"  //Shameem we don't want screenshot for Pass step
							+"</tr>";
					
					
				} 
			
				
				else {
					failCnt++; //total testcase failed
					str = str
							+ "<tr><td class = \"tsindlevel2\" width = 5%>"
							+ reportList.get(i).getStep()
							+ "</td><td class = \"tsgen\" width = 25%>"
							+ reportList.get(i).getStepDescription()
							+ " </td><td class = \"tsgen\" width = 25%>"
							+ reportList.get(i).getExpectedResult()
							+ "</td><td class = \"tsgen\" width = 25%>"
							+ reportList.get(i).getActualResult()
							+ "</td><td class = \"tsind\" width = 10%><font size  =  2 color  =  red><img src  = '"
							+ "../../ReportRef/Images/failed.gif'/>"
							+ " "+reportList.get(i).getStatus()+"&nbsp;"
							+ "</td><td class = \"tsind\" width = 10%><a target = \"_blank\" class = \"anibutton\" href =  '"
							+ reportList.get(i).getScreenShotFileName()
							+ "'\"><img class = \"screen\" src  =  \""
							+ "../../ReportRef/Images/screenshot.gif\"></a></td></tr>";
				}
			}
		}

		String bTblHdr = "<BR><table width = 99% class = \"teststeps\"><tr><td class = \"tsheader\" width = 5%>Step #</td><td class = \"tsheader\" width = 25%>Step Description</td><td class = \"tsheader\" width = 25%>Expected Result</td><td class = \"tsheader\" width = 25%>Actual Result</td><td class = \"tsheader\" width = 10%>Status</td><td class = \"tsheader\" width = 10%>Screen Shot</td></tr>";
		footer = repGenerateFooter();
		file = new File(filePath + "\\" + testName + ".html");
		System.out.println("HTML test case report: " + file);
		BufferedWriter bw = new BufferedWriter(new FileWriter(file));
		String output = header
				+ "<body><table BORDER = 1 CELLPADDING = 3 CELLSPACING = 1 WIDTH = 99%>"
				+ bTblHdr + str + "</table><BR><BR>" + footer
				+ "</body></html>";
		bw.write(output);
		bw.close();


		me.setSlNo(iSlNo);
		me.setTestId(sTest_Case_ID); //Added by Shameem - New changes
		me.setTestCase(sTest_Case_Name);
		me.setTestDesc(sTest_Case_Description);
		me.setSteps(totalCnt); // total count of steps in Index
		me.setPass(passCnt); // total count of pass steps in Index
		//me.setIncomplete(incompleteCnt);
		me.setFail(failCnt); // total count of fail steps in Index
		

		if (failCnt == 0) {
			me.setStatus("Pass");
			System.out.println("Passed");

		} 
		else {
			me.setStatus("Fail");
			System.out.println("Failed");
		}
		
		try {
			String sALMUpdate = TestDriver.mEnvSheetData.get(TestDriver.iMasterRowId).get("ALMUpdate").toString().trim();
			if(sALMUpdate.equalsIgnoreCase("Y"))
			{
				fnALMUpdate(me, testName);
			}
			else
			{
				strFinal =  "ALM Connection Disabled";
			}
				
		} catch (Exception e) {
			System.out.println("ALM Update Failed. Check credentials and ensure proper connectivity");
			TestDriver.log.error("ALM Update Failed. Check credentials and ensure proper connectivity",e);
		}
		
		me.setDuration(strDiff);
		me.setHistory(strFinal);
		masterList.add(me);
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		//me.setDuration(strDiff);
		///masterList.add(me);

	}
*/	
/*	
	//@SuppressWarnings("static-access")
	public void fnALMUpdate(IndexGen me, String testName) throws Exception
	{
		try {
			ALMUtil almUtil ;
			//almUtil = new almUtil("Root\\SA", "SA_TS");
			//almUtil = new ALMUtil(TestDriver.prop.getProperty("almTestSetPath"), TestDriver.prop.getProperty("almTestSet"));
			String sBrowser = TestDriver.mEnvSheetData.get(TestDriver.iMasterRowId).get("Browser").toString().trim();
			almUtil = new ALMUtil(TestDriver.prop.getProperty("almTestSetPath").replaceAll("Browser", sBrowser), TestDriver.prop.getProperty("almTestSet").replaceAll("Browser", sBrowser));
			String almTestCase=testName;
			strFinal="";
			
			try {
				almUtil.openConnection(TestDriver.prop.getProperty("almUrl"), TestDriver.prop.getProperty("almDomain"), TestDriver.prop.getProperty("almProject"), TestDriver.prop.getProperty("almUser"), TestDriver.prop.getProperty("almPassword"));
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			almTestCase="[1]" +almTestCase;

			if (failCnt == 0) {
				almUtil.updateTestCaseStatusToALM(almTestCase, "Passed");
				System.out.println("ALM Passed");

			} 
			else {
				almUtil.updateTestCaseStatusToALM(almTestCase, "Failed");
				System.out.println("ALM Failed");
			}
			
			//************
					try
					{
						//Collections.reverse(almUtil.PreviousResult);   //Now not needed, we are already getting Run Id in descending order
					} catch(Exception e) 
					{
						
					}
					
					int PreviousResultCount = ALMUtil.PreviousResult.size();
					
					if(PreviousResultCount>5){
						PreviousResultCount=5;
					}
						
					
				//**************
					
					System.out.println("Size "+PreviousResultCount);
					
					if(PreviousResultCount!=0)
					{
						for(int i=0;i<PreviousResultCount;i++)
						{
							String sALMStatus = ALMUtil.PreviousResult.get(i).toString().trim();
							if(sALMStatus.contains("P"))
							{
								strFinal = strFinal + ","+ "<font color=\"green\"><b>" + sALMStatus + "</b></font>";
							}
							else if(sALMStatus.contains("F"))
							{
								strFinal = strFinal + ","+ "<font color=\"red\"><b>" + sALMStatus + "</b></font>";
							}
								
						}
						strFinal = strFinal.substring(1);
						System.out.println(strFinal);
					}
					else
					{
						strFinal =  "No History Available";
					}
					
					//*****************************************************************************************
					almUtil.releaseALMConnection();
					
					ALMUtil.PreviousResult.clear();
		
			
		} catch (Exception e) {
			System.out.println("fnALMUpdate--------------Failed");
			TestDriver.log.error("fnALMUpdate--------------Failed",e);
		}	
	}
*/
	// @@@ Generate the index report HTML @@@ 
/*

	
	

	public static void openHTMLreport() throws Exception
	{
		try {
			String url1 = "" + filePath + "\\"+TestDriver.sIndexHTMLFileName;
			File htmlFile = new File(url1);
			Desktop.getDesktop().browse(htmlFile.toURI());
		}

		catch (Exception e) {
			System.out.println(e.getMessage());
		} 
	}

	public static String getCurrentTimeStamp(String format) {
	    SimpleDateFormat sdfDate = new SimpleDateFormat(format);  // "MM/dd/yyyy"
	    Date now = new Date();
	    String strDate = sdfDate.format(now);
	    return strDate;
	}
*/





	
/*	// copy report folder from Local to share machine
	public void createTestResultsWithTimestamp(String filePath) 
	{
		System.out.println("Creating another copy of test results with timestamp...");
		try {

			String xCopyCommand = "xcopy /i  \"" + filePath + "\"" + " " + "\""	+ shareFolderPath + "\"";
			System.out.println(xCopyCommand);
			@SuppressWarnings("unused")
			Process process = Runtime.getRuntime().exec(xCopyCommand); 
			
		} catch (IOException ioe) {
			System.out.println("Error occurred while making a copy of test results with timestamp::: "+ ioe.getMessage());
		} 
		System.out.println("END - Creating another copy of test results with timestamp...");
		sHtmlLink = shareFolderPath + "\\" + TestDriver.sIndexHTMLFileName + ";"; // link to index.html in share machine
	}

*/
	//////////////////////////////////////////////////////////////////////Initial Running Code///////////////////////////////////////////

/*
	def repGenerateHeader(String testCaseHeader,String testCase, String sApplication, String testCaseDescription)
	{

		String headerHtmlContent = "";
		def passCnt = 0;
		def totalCnt = 0;
		def failCnt = 0;
		//incompleteCnt = 0;
		def startTime = "";
		
		def startDate = new Date();

		headerHtmlContent = "<html><head><link rel = \"stylesheet\" href = \"" +
				"../../ReportRef/css/styles.css\" /></head><body><hr class = \"divline\"><table class = \"reportheader\" width = 99%><tr><td height = 3px><img src  = '" +
				"../../ReportRef/Images/logo_en_thd.png'></td><BR><td height = 5px>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				//+ appName
				"vvReportName" +
				"<BR>" +
				"<td height = 3px><img src  = '../../ReportRef/Images/logo_en_nex.png'></td>" +
				"<BR><td height = 3px align = right></td></tr></table><hr class = \"divline\">" + 
				"<BR><table class = \"subheader\" width = 99%><tr><td width = 10% class = \"subheader\" align = left>Test Id</td><td width = 35% class = \"subheader\" align = left>Test Case</td><td width = 20% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 20% class = \"subheader\" align = right>Environment</td></tr>" +
				"<tr>" +"<td width = 10% class = \"subcontents\" align = left>"+"sTest_Case_ID"+"</td>" +
				"<td width = 35% class = \"subcontents\" align = left>"+"testCase"+"</td>" +
				"<td width = 20% class = \"subcontents\">" +
				new SimpleDateFormat("MM-dd-yyyy").format(startDate) +
				"</td>" +
				"<td width = 15% class = \"subcontents\" align = left>" +
				"TestDriver.sApplication" + "</td>"+
				"<td width = 20% class = \"subcontents\" align = right>" +
				"TestDriver.sEnvironment" + "</td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><tr><td width = 99% class = \"subheader\">Test Case Description</td></tr><tr><td width = 99% class = \"subcontents\">" +
				"testCaseDescription" +
				"</td></tr></tr></table><hr class = \"divline\"><BR>";
*/			/*	"<BR>" +
				"<table class = \"subheader\" width = 900px>" +
				"<tr><td width = 800px class = \"subheader\">Test Case</td><td width = 600px class = \"subheader\">Execution Date</td><td width = 400px align = right class = \"subheader\">Application</td></tr><tr><td width = 400px class = \"subcontents\">"
				+ testCase
				+ "</td><td width = 300px class = \"subcontents\">"
				+ new SimpleDateFormat("MM-dd-yyyy").format(startDate)
				+ "</td><td width = 200px align = right class = \"subcontents\">"
				+ sApplication
				+ "</td></tr></table><hr class = \"divline\"> <BR><table class = \"subheader\" width = 900px><tr><tr><td width = 900px class = \"subheader\">Test Case Description</td></tr><tr><td width = 900px class = \"subcontents\">"
				+ testCaseDescription
				+ "</td></tr></tr></table><hr class = \"divline\"><BR>";*/
/*		return headerHtmlContent;
	}
*/
/*
	def repGenerateFooter(Date startDate) {
		String footer = "";
		Date endDate = new Date();
		def strDiff 
		def diff = (int) ((endDate.getTime() / 1000) - (startDate.getTime() / 1000));
		if ((diff / 60) != 0) {
			strDiff = ((diff / 60) + "Min" + " " + (diff % 60) + "Secs");
		} else {
			strDiff = ((diff % 60) + " " + "Secs");
		}
		
		// System.out.println("@@ Time difference @@" + diff);
		//footer = "<table class = \"tblinks\" width = 250px align = left><tr><td class = \"tsheader\">Links</td></tr><tr><td class = \"pfind\"><a href = \"index.html\">Index Page</a></td></tr></table><table width = 250px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 130px>"
		footer = "<table class = \"tblinks\" width = 200px align = left><tr><td class = \"tsheader\">My Links</td></tr><tr><td class = \"pfind\">&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<a href = "+"TestDriver.sIndexHTMLFileName"+">Go to Home Page</a></td></tr></table><table width = 320px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 200px>" +
				new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(startDate) +
				"</td></tr><tr><td class = \"pfhead\" width = 120px>End Time</td><td class = \"pfind\" width = 200px>" +
				new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(endDate) +
				"</td></tr><tr><td class = \"pfhead\" width = 120px>Duration</td><td class = \"pfind\" width = 200px>" +
				strDiff +
				"  </td></tr></table><!-- Pass Fail count--><table width = 250px class = \"pfsummary\"><tr><td colspan = 2 class = \"tsheader\">Test Case Summary</td></tr><tr><td class = \"pfhead\" width = 150px>Total Steps</td><td class = \"pfind\" width = 100px>" +
				"totalCnt" +
				"</td>	</tr><tr><td class = \"pfhead\" width = 150px>Steps Passed</td><td class = \"pfind\" width = 100px>" +
				"passCnt" +
				"</td></tr>" +
				//"<tr><td class = \"pfhead\" width = 150px>Incomplete</td><td class = \"pfind\" width = 100px>"+incompleteCnt+"</td></tr>" +
				"<tr><td class = \"pfhead\" width = 150px>Steps Failed</td><td class = \"pfind\" width = 100px>" +
				"failCnt" + "</td></tr></table><BR><BR>";
		return footer;
	}
*/
	def fnUpdateLog(String sLogContent)
	{
		def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
		def logFile = new File(logFileLocn)
		logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
	}
} //End of class]]></script></con:config></con:testStep><con:testStep type="groovy" name="DummyReporter" id="d507d502-4ce8-4dd7-8b61-0c16b1512916"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
//import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

context.setProperty("Reporter", new Reporter());
def working_Directory = context.expand( '${#Project#Working_Directory}' )
log.info working_Directory
String sReportsPath = working_Directory
	log.info "sReportsPath >>"+sReportsPath
/*
Date startDate = new Date();
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	log.info "Before >>"+ working_Directory
	public static String sReportsPath = ""
	log.info "sReportsPath >>"+sReportsPath
	sReportsPath = working_Directory.toString()
	log.info "After sReportsPath>>"+sReportsPath

	*/
class Reporter{

	
    def sayHello(name)
    {
        return "Hello " + name + "!";
    }
	def getProjectLoc()
    {
    		
		//log.info "Proj Loc >>"+ working_Directory
       	 return "Hello " + sReportsPath + "!";
    }
}</script></con:config></con:testStep><con:testStep type="groovy" name="Hostname_TimeDiff" id="e1afe062-56e2-44f8-b100-e203409ddfcf"><con:settings/><con:config><script>log.info InetAddress.getLocalHost().getHostName()

import groovy.time.*

def timeStart = new Date()
// Some code you want to time
sleep 2000
def timeStop = new Date()
def duration = TimeCategory.minus(timeStop, timeStart)
log.info duration</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="a6b48b0c-1228-45e2-9c29-7e41b478e185" name="EndToEndSmokeTest_TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="a3c8d7e5-ee56-4daa-b7e6-e64cb5eb70fa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AddCorporationSmoke_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="AddCorporation_Groovy" id="5c6275aa-098c-4818-a412-ca01f0f75103"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	log.info "[Add Corporation] Execution Started.........." 
	fnUpdateLog("[Add Corporation] Execution Started..........")
	fnGenerateTCStepsReport("Verify Add Corporation", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewCorpName = ""
	try
	{
		fnRunRequest("ViewCorporations");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewCorporations#Request}')
		def responseContent = context.expand('${ViewCorporations#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max CorpId and set at test case level property NewCorpId,NewCorpName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxCorpId = 0
			int iCorportionListSize = jsonResponse["CorporateItems"].size()
			
			jsonResponse["CorporateItems"].each
			{ 
				//log.info it
				if(it.CorporateID >iMaxCorpId)
				{
					iMaxCorpId = it.CorporateID
				}
				//log.info "CorporateID>>>>>>>>>>>>>>>>>>>>>"+ it.CorporateID 
				//log.info "CorporateName>>>>>>>>>>>>>>>>>>>"+ it.CorporateName	
			}
			log.info "Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId 
			fnUpdateLog("Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId)
			log.info "Total Corporations before Add : "+iCorportionListSize.toString()
			fnUpdateLog("Total Corporations before Add : "+iCorportionListSize.toString())
		
			int iRandomNum = fnRandomNum(10001,99999);
			sNewCorpName = "AutoTestCorporation_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewCorpName",sNewCorpName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Corporation Response", "View Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation..");
		}
		//Start - Adding a new Corporation
		fnRunRequest("AddCorporation");
		
		requestContent = context.expand('${AddCorporation#Request}')
		log.info requestContent
		responseContent = context.expand('${AddCorporation#Response}')
		log.info responseContent


	def sRespHeaderData = testRunner.testCase.testSteps["AddCorporation"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");

		/*
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value
			*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddCorporation", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			//if(sKey=="Status" && sValue=="Action: Corporate Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Corporation Header Response", "Corporation should be created with proper header response", "Corporation : "+sNewCorpName+" added successfully", "Pass")
				log.info "Corporation : "+sNewCorpName+" added successfully"	
				fnUpdateLog("Corporation : "+sNewCorpName+" added successfully")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Corporation Response", "Corporation should be created with proper header response", "Corporation : "+sNewCorpName+" NOT added", "Fail")
				log.info "Corporation : "+sNewCorpName+" NOT added"
				fnUpdateLog("Corporation : "+sNewCorpName+" NOT added")
				testRunner.fail("Corporation : "+sNewCorpName+" NOT added")
			}
			//End - Adding a new Corporation
		
			//sleep(1000)
			//Start - Verify newly added Corporation
			boolean bFlag = false
			fnRunRequest("ViewCorporations");
			requestContent = context.expand('${ViewCorporations#Request}')
			responseContent = context.expand('${ViewCorporations#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iCorportionListSize = jsonResponse["CorporateItems"].size()
				log.info "Total Corporations After Add : "+iCorportionListSize.toString()
				fnUpdateLog("Total Corporations After Add : "+iCorportionListSize.toString())
				
				jsonResponse["CorporateItems"].find
				{ 
					//log.info it
					//if(it.CorporateID == 367 && it.CorporateName == "TestCorporation_367" )  //Just for testing
					//if(it.CorporateID.toString() == iNewCorpId.toString() && it.CorporateName.toString() == sNewCorpName )
					if(it.CorporateName.toString() == sNewCorpName )
					{
						bFlag = true
						testRunner.testCase.testSuite.setPropertyValue("CorporateID",it.CorporateID.toString())
						testRunner.testCase.testSuite.setPropertyValue("CorporateName",it.CorporateName.toString())
						//log.info "Actual Corp Id : "+it.CorporateID.toString() +" matches with Expected Corp Id : "+iNewCorpId.toString()
						//fnUpdateLog("Actual Corp Id : "+it.CorporateID.toString() +" matches with Expected Corp Id : "+iNewCorpId.toString() )
						fnGenerateTCStepsReport("Verify Corporation Name in View Corporation Response", "Actual Corp name should match with Expected Corp name ", "Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName, "Pass")
						log.info "Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName
						fnUpdateLog("Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName)
						return true
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Corporation ", "Newly added Corporation should be validated", "Newly added Corporation validated successfully", "Pass")
					log.info "Newly added Corporation validated successfully"
					fnUpdateLog("Newly added Corporation validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Corporation ", "Newly added Corporation should be validated", "Newly added Corporation NOT validated. Corporation NOT found.", "Fail")
					log.info "Newly added Corporation NOT found"
					fnUpdateLog("Newly added Corporation NOT found")
					testRunner.fail("Newly added Corporation NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Corporation Response", "View Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Corporation Response", "Add Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Corporations] failed with exception : "+e)
		fnUpdateLog("[Add Corporations] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Corporation] Execution Completed Successfully......."
		fnUpdateLog("[Add Corporation] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

	def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
	{	
		try
		{
			def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
			log.info "Headers>>>>>>>"+respHeaders
			String sRespHeaderData = ""
			boolean bFlag = false
			for (header in respHeaders)
			{
				log.info header //<- prints all headers
				def (sHeader, sValue) = header.toString().tokenize( '=' )
				log.info sHeader 
				log.info sValue
				sValue=sValue.replaceAll("\\[","")
				sValue=sValue.replaceAll("\\]","")
				if(sExpHeader==sHeader && sExpValue==sValue)
				{
					bFlag = true
				}
				sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
			}
			sRespHeaderData = "["+sRespHeaderData.trim()+"]"
			log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
			return [sRespHeaderData,bFlag] ;
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
			testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
		}
	
		

}
		/*	{
		    "CorporateID": ${#TestCase#NewCorpId},
		    "CorporateName": "${#TestCase#NewCorpName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddCorporation" id="c00e11df-1f08-4ba9-a57c-a59db329c626" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Corporate" methodName="AddCorporation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddCorporation" id="cf639bdd-55f7-435f-9406-342efaa36c60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
    "CorporateName": "${#TestCase#NewCorpName}"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:assertion type="GroovyScriptAssertion" id="e4219a6b-f1ed-466c-ab4b-8250e7c3ee14" name="Script Assertion"><con:configuration><scriptText>log.info messageExchange.getRequestContent().toString()

for (header in messageExchange.getResponseHeaders())
{
	log.info header //&lt;- prints all headers
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewCorporations" id="bc9c2278-1c2e-4e13-adb8-ef41553d6748" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Corporate" methodName="ViewCorporations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewCorporations" id="84117eed-e671-481b-b13e-b8ad20fb3df8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="_AddCorporation_Groovy" id="68b363b6-60dd-4555-9336-8db9b0338acf" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	log.info "[Add Corporation] Execution Started.........." 

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewCorpName = ""
	try
	{
		
			boolean bFlag = false
			int iRandomNum = fnRandomNum(10001,99999);
			sNewCorpName = "TestCorporation_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewCorpName",sNewCorpName)
			fnRunRequest("AddCorporation");

			fnRunRequest("ViewCorporations");
			def responseContent = context.expand('${ViewCorporations#Response}')

			if (responseContent!="")
			{
				
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iCorportionListSize = jsonResponse["CorporateItems"].size()
				log.info "Total Corporations After Add : "+iCorportionListSize.toString()
								
				jsonResponse["CorporateItems"].find
				{ 
					if(it.CorporateName.toString() == sNewCorpName )
					{
						bFlag = true
						testRunner.testCase.testSuite.setPropertyValue("CorporateID",it.CorporateID.toString())
						log.info "Actual Corp Name : "+it.CorporateName.toString() +" created with CorporateID : "+it.CorporateID.toString()
						return true
					}	
				}
			
				if(bFlag == true)
				{
					log.info "Newly added Corporation validated successfully"
				}
				else
				{
					log.info "Newly added Corporation NOT found"
					testRunner.fail("Newly added Corporation NOT found")
				}
			}
			else
			{
				log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n"
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}

	}
	catch (Exception e)
	{
		testRunner.fail("[Add Corporations] failed with exception : "+e)
		log.info "[Add Corporations] failed with exception : "+e
	}
	finally
	{
		log.info "[Add Corporation] Execution Completed Successfully......."
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	


	
		/*	{
		    "CorporateID": ${#TestCase#NewCorpId},
		    "CorporateName": "${#TestCase#NewCorpName}"
		}*/</script></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("CorporateID","0")
testCase.setPropertyValue("CorporateName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")
</con:setupScript><con:tearDownScript>log.info "View Offices Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////////////////////////////////////////////

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Add Corporation</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Add Corporation Header Response </td><td class = "tsgen" width = 25%>Corporation should be created with proper header response</td><td class = "tsgen" width = 25%>Corporation : AutoTestCorporation_81650 added successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Corporation Name in View Corporation Response </td><td class = "tsgen" width = 25%>Actual Corp name should match with Expected Corp name </td><td class = "tsgen" width = 25%>Actual Corp Name : AutoTestCorporation_81650 matches with Expected Corp Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.3</td><td class = "tsgen" width = 25%>Validate Newly Added Corporation  </td><td class = "tsgen" width = 25%>Newly added Corporation should be validated</td><td class = "tsgen" width = 25%>Newly added Corporation validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalRegions</con:name><con:value>5</con:value></con:property><con:property><con:name>NewOfficeId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property><con:property><con:name>NewCorpName</con:name><con:value>AutoTestCorporation_81650</con:value></con:property><con:property><con:name>CorporateID</con:name><con:value>0</con:value></con:property><con:property><con:name>CorporateName</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="c25a8ea3-6053-4c21-9530-59590cd9ff21" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AddOfficesPropertiesSmoke_TC" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="AddOffice_Groovy" id="d80ca07c-d901-410b-b0ae-32f4c4bc13f4"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewOfficeName = ""
	def sCorporationID = context.expand( '${#TestSuite#CorporateID}' )
	def sCorporationName = context.expand( '${#TestSuite#CorporateName}' )
	//def (CorpInitial, CorpLast) = sCorporationName.tokenize( '_' )
	//String sCorpRandomNum = CorpLast;
	
	try
	{
		def iCount = context.expand( '${#Project#OfficePropertySmokeCount}' )
	   for(int i=1; i<=iCount.toInteger();i++)
	   {
	   	testRunner.testCase.testSuite.setPropertyValue("TestCount",i.toString())
	   	log.info "[Add Office] Execution Started.........." 
		fnUpdateLog("[Add Office] Execution Started..........")
		fnGenerateTCStepsReport("Verify Add Office "+i.toString(), "", "", "")
		
		fnRunRequest("ViewOffices");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewOffices#Request}')
		def responseContent = context.expand('${ViewOffices#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max OfficeId and set at test case level property NewOfficeId,NewOfficeName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxOfficeId = 0
			int iOfficeListSize = jsonResponse["AppOfficeItems"].size()
			
			jsonResponse["AppOfficeItems"].each
			{ 
				//log.info it
				if(it.AppOfficeID >iMaxOfficeId)
				{
					iMaxOfficeId = it.AppOfficeID
				}
				//log.info "OfficeID>>>>>>>>>>>>>>>>>>>>>"+ it.AppOfficeID 
				//log.info "OfficeName>>>>>>>>>>>>>>>>>>>"+ it.OfficeName	
			}
			log.info "Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId 
			fnUpdateLog("Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId)
			log.info "Total Offices before Add : "+iOfficeListSize.toString()
			fnUpdateLog("Total Offices before Add : "+iOfficeListSize.toString())
		
			int iRandomNum = fnRandomNum(10001,99999);
			//sNewOfficeName = "AutoTestOffice_"+iRandomNum.toString();
			sNewOfficeName = "AutoTestOffice_"+iRandomNum.toString();
			//testRunner.testCase.setPropertyValue("NewOfficeName",sNewOfficeName)  //Moving to TestSuite level property
			testRunner.testCase.testSuite.setPropertyValue("NewOfficeName",sNewOfficeName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..");
		}
		//Start - Adding a new Office
		fnRunRequest("AddOffice");
		
		requestContent = context.expand('${AddOffice#Request}')
		log.info requestContent
		responseContent = context.expand('${AddOffice#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddOffice"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+"_"+i.toString()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+"_"+i.toString()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddOffice", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			
			//if(sKey=="Status" && sValue=="Action: Corporate Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Office Header Response", "Office should be added with proper header response", "Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName, "Pass")
				log.info "Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName
				fnUpdateLog("Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName)
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Office Response", "Office should be created with proper header response", "Office NOT added for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName, "Fail")
				log.info "Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName+" with header response : "+arrResult[0].toString())
				testRunner.fail("Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Office
		
			//sleep(1000)
			//Start - Verify newly added Office
			boolean bFlag = false
			fnRunRequest("ViewOffices");
			requestContent = context.expand('${ViewOffices#Request}')
			responseContent = context.expand('${ViewOffices#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+"_"+i.toString()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+"_"+i.toString()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iOfficeListSize = jsonResponse["AppOfficeItems"].size()
				log.info "Total Offices After Add : "+iOfficeListSize.toString()
				fnUpdateLog("Total Offices After Add : "+iOfficeListSize.toString())
				
				jsonResponse["AppOfficeItems"].find
				{ 
					//log.info it
					//if(it.AppOfficeID == 367 && it.OfficeName == "TestOffice_367" )  //Just for testing
					//if(it.AppOfficeID.toString() == iNewOfficeId.toString() && it.OfficeName.toString() == sNewOfficeName )
					if(it.OfficeName.toString() == sNewOfficeName && it.CorporateID.toString() == sCorporationID)
					{
						bFlag = true
						testRunner.testCase.testSuite.setPropertyValue("AppOfficeID",it.AppOfficeID.toString())
						
						//log.info "Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString()
						//fnUpdateLog("Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString() )
						fnGenerateTCStepsReport("Verify Office Name in View Office Response", "Actual Office name should match with Expected Office name ", "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation ID : "+it.CorporateID.toString()+" and Corporation Name : "+sCorporationName, "Pass")
						log.info "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation ID : "+it.CorporateID.toString()+" and Corporation Name : "+sCorporationName
						fnUpdateLog("Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation ID : "+it.CorporateID.toString()+" and Corporation Name : "+sCorporationName)
						return true
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Office ", "Newly added Office should be validated", "Newly added Office validated successfully", "Pass")
					log.info "Newly added Office validated successfully"
					fnUpdateLog("Newly added Office validated successfully")
					sleep(1000)
					fnGenerateTCStepsReport("Verify Add Property "+i.toString(), "", "", "")
					fnRunRequest("AddProperty_Groovy");
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Office ", "Newly added Office should be validated", "Newly added Office NOT validated. Office NOT found.", "Fail")
					log.info "Newly added Office NOT found"
					fnUpdateLog("Newly added Office NOT found")
					testRunner.fail("Newly added Office NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Office Response", "Add Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	   }//End of For loop
	}//End of Try
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[AddOfficesPropertiesSmoke_TC] failed with exception : "+e)
		fnUpdateLog("[AddOfficesPropertiesSmoke_TC] failed with exception : "+e)
	}
	finally
	{
		log.info "[AddOfficesPropertiesSmoke_TC] Execution Completed Successfully......."
		fnUpdateLog("[AddOfficesPropertiesSmoke_TC] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "OfficeID": ${#TestCase#NewOfficeId},
		    "OfficeName": "${#TestCase#NewOfficeName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddOffice" id="4e8993c7-d480-4176-9b34-43c4922d334b" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="AddOffice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddOffice" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"OfficeName": "${#TestSuite#NewOfficeName}",
	"DefaultStoreNumber": "1234",
	"Address": "AutoTestAddress",
	"City": "AutoTestCity",
	"State": "MI",
	"ZipCode": "48108",
	"PhoneNumber": "1112222",
	"QuoteEmailAddress": "AutoTestQuote@AutoTest.com",
	"PropertyWalkSubmitEmailAddress": "AutoTestSubmit@AutoTest.com",
	"CorporateID": ${#TestSuite#CorporateID}
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewOffices" id="82870534-90ec-45a8-a8b1-37ee135852e7" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="ViewOffices" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewOffices" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="AddProperty_Groovy" id="4344b621-ecb1-4b43-bd06-49f865707757" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	log.info "[Add Property] Execution Started.........." 
	fnUpdateLog("[Add Property] Execution Started..........")
	//fnGenerateTCStepsReport("Verify Add Property", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewPropertyName = ""
	def sAppOfficeID = context.expand( '${#TestSuite#AppOfficeID}' )
	def sOfficeName = context.expand( '${#TestSuite#NewOfficeName}' )
	def (OfficeInitial, OfficeLast) = sOfficeName.tokenize( '_' )
	String sOfficeRandomNum = OfficeLast;
	
	try
	{
		fnRunRequest("ViewProperties");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		def sCount = testRunner.testCase.testSuite.getPropertyValue("TestCount")
		def requestContent = context.expand('${ViewProperties#Request}')
		def responseContent = context.expand('${ViewProperties#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max PropertyId and set at test case level property NewPropertyId,NewPropertyName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxPropertyId = 0
			int iPropertyListSize = jsonResponse["properties"].size()
			
			jsonResponse["properties"].each
			{ 
				//log.info it
				if(it.PropertyID >iMaxPropertyId)
				{
					iMaxPropertyId = it.PropertyID
				}
				//log.info "PropertyID>>>>>>>>>>>>>>>>>>>>>"+ it.PropertyID 
				//log.info "PropertyName>>>>>>>>>>>>>>>>>>>"+ it.ProjectName	
			}
			log.info "Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId 
			fnUpdateLog("Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId)
			log.info "Total Properties before Add : "+iPropertyListSize.toString()
			fnUpdateLog("Total Properties before Add : "+iPropertyListSize.toString())
		
			//int iRandomNum = fnRandomNum(10001,99999);
			//sNewPropertyName = "AutoTestProperty_"+iRandomNum.toString();
			sNewPropertyName = "AutoTestProperty_"+sOfficeRandomNum;
			testRunner.testCase.testSuite.setPropertyValue("NewPropertyName",sNewPropertyName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please continue adding Property..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please continue adding Property.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please continue adding Property..");
		}
		//Start - Adding a new Property
		fnRunRequest("AddProperty");
		
		requestContent = context.expand('${AddProperty#Request}')
		log.info requestContent
		responseContent = context.expand('${AddProperty#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddProperty"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(4).getName()+"_"+sCount.toString()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(4).getName()+"_"+sCount.toString()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddProperty", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			
			//if(sKey=="Status" && sValue=="Action: Office Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Property Header Response", "Property should be added with proper header response", "Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName, "Pass")
				log.info "Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName
				fnUpdateLog("Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName)
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Property Response", "Property should be created with proper header response", "Property NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName, "Fail")
				log.info "Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
				testRunner.fail("Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Property
		
			//sleep(1000)
			//Start - Verify newly added Property
			boolean bFlag = false
			fnRunRequest("ViewProperties");
			requestContent = context.expand('${ViewProperties#Request}')
			responseContent = context.expand('${ViewProperties#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(5).getName()+"_"+sCount.toString()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(5).getName()+"_"+sCount.toString()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iPropertyListSize = jsonResponse["properties"].size()
				log.info "Total Properties After Add : "+iPropertyListSize.toString()
				fnUpdateLog("Total Properties After Add : "+iPropertyListSize.toString())
				
				jsonResponse["properties"].find
				{ 
					//log.info it
					//if(it.PropertyID == 367 && it.ProjectName == "TestProperty_367" )  //Just for testing
					//if(it.PropertyID.toString() == iNewPropertyId.toString() && it.ProjectName.toString() == sNewPropertyName )
					if(it.ProjectName.toString() == sNewPropertyName && it.AppOfficeID.toString() == sAppOfficeID)
					{
						bFlag = true
						//log.info "Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString()
						//fnUpdateLog("Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString() )
						fnGenerateTCStepsReport("Verify Property Name in View Property Response", "Actual Property name should match with Expected Property name ", "Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName, "Pass")
						log.info "Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName
						fnUpdateLog("Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName)
						return true
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Property ", "Newly added Property should be validated", "Newly added Property validated successfully", "Pass")
					log.info "Newly added Property validated successfully"
					fnUpdateLog("Newly added Property validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Property ", "Newly added Property should be validated", "Newly added Property NOT validated. Property NOT found.", "Fail")
					log.info "Newly added Property NOT found"
					fnUpdateLog("Newly added Property NOT found")
					testRunner.fail("Newly added Property NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Property Response", "Add Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(4).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Properties] failed with exception : "+e)
		fnUpdateLog("[Add Properties] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Property] Execution Completed Successfully......."
		fnUpdateLog("[Add Property] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "PropertyID": ${#TestCase#NewPropertyId},
		    "PropertyName": "${#TestCase#NewPropertyName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddProperty" id="f4b87107-4159-4265-97f6-56b4d88b92d8" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="AddProperty" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddProperty" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID":${#TestSuite#AppOfficeID},
	"ProjectName":"${#TestSuite#NewPropertyName}",
	"Address":"AutoTestAddress",
	"City":"AutoTestCity",
	"State":"MI",
	"ZipCode":"12345",
	"County":"AutoTestCounty",
	"MainSqFt":"1234",
	"NumberBedroom":"2",
	"NumberBathroom":"2.5",
	"YearBuilt":"2015",
	"Comment":"AutoTestComment",
	"GateCode":"AutoGCode",
	"LockBox":"AutoLckBox",
	"walkUserAssigned":"Bryce"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewProperties" id="cd083348-6e3b-45ff-8c55-40713457046c" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="ViewProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewProperties" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>testCase.testSuite.setPropertyValue("AppOfficeID","0")
testCase.testSuite.setPropertyValue("NewOfficeName","")
testCase.testSuite.setPropertyValue("NewPropertyName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalOffices","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Add Office Property Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>60</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>60</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>20</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 1</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_84857 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_84857 matches with Expected Office Name : AutoTestOffice_84857 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>2</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 1</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>2.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_84857 added successfully for Office Id : 99 and Office Name : AutoTestOffice_84857</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_84857 matches with Expected Property Name : AutoTestProperty_84857 for Office ID : 99 and Office Name : AutoTestOffice_84857</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>3</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 2</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>3.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_73186 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>3.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_73186 matches with Expected Office Name : AutoTestOffice_73186 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>3.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>4</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 2</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>4.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_73186 added successfully for Office Id : 100 and Office Name : AutoTestOffice_73186</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>4.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_73186 matches with Expected Property Name : AutoTestProperty_73186 for Office ID : 100 and Office Name : AutoTestOffice_73186</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>4.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>5</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 3</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>5.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_23310 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>5.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_23310 matches with Expected Office Name : AutoTestOffice_23310 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>5.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>6</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 3</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>6.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_23310 added successfully for Office Id : 101 and Office Name : AutoTestOffice_23310</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>6.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_23310 matches with Expected Property Name : AutoTestProperty_23310 for Office ID : 101 and Office Name : AutoTestOffice_23310</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>6.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>7</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 4</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>7.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_61336 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>7.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_61336 matches with Expected Office Name : AutoTestOffice_61336 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>7.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>8</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 4</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>8.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_61336 added successfully for Office Id : 102 and Office Name : AutoTestOffice_61336</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>8.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_61336 matches with Expected Property Name : AutoTestProperty_61336 for Office ID : 102 and Office Name : AutoTestOffice_61336</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>8.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>9</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 5</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>9.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_97396 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>9.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_97396 matches with Expected Office Name : AutoTestOffice_97396 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>9.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>10</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 5</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>10.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_97396 added successfully for Office Id : 103 and Office Name : AutoTestOffice_97396</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>10.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_97396 matches with Expected Property Name : AutoTestProperty_97396 for Office ID : 103 and Office Name : AutoTestOffice_97396</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>10.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>11</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 6</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>11.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_89734 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>11.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_89734 matches with Expected Office Name : AutoTestOffice_89734 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>11.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>12</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 6</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>12.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_89734 added successfully for Office Id : 104 and Office Name : AutoTestOffice_89734</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>12.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_89734 matches with Expected Property Name : AutoTestProperty_89734 for Office ID : 104 and Office Name : AutoTestOffice_89734</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>12.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>13</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 7</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>13.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_22973 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>13.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_22973 matches with Expected Office Name : AutoTestOffice_22973 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>13.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>14</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 7</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>14.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_22973 added successfully for Office Id : 105 and Office Name : AutoTestOffice_22973</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>14.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_22973 matches with Expected Property Name : AutoTestProperty_22973 for Office ID : 105 and Office Name : AutoTestOffice_22973</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>14.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>15</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 8</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>15.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_42573 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>15.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_42573 matches with Expected Office Name : AutoTestOffice_42573 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>15.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>16</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 8</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>16.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_42573 added successfully for Office Id : 106 and Office Name : AutoTestOffice_42573</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>16.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_42573 matches with Expected Property Name : AutoTestProperty_42573 for Office ID : 106 and Office Name : AutoTestOffice_42573</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>16.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>17</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 9</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>17.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_95708 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>17.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_95708 matches with Expected Office Name : AutoTestOffice_95708 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>17.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>18</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 9</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>18.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_95708 added successfully for Office Id : 107 and Office Name : AutoTestOffice_95708</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>18.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_95708 matches with Expected Property Name : AutoTestProperty_95708 for Office ID : 107 and Office Name : AutoTestOffice_95708</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>18.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>19</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 10</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>19.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_10626 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>19.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_10626 matches with Expected Office Name : AutoTestOffice_10626 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>19.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>20</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 10</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>20.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_10626 added successfully for Office Id : 108 and Office Name : AutoTestOffice_10626</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>20.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_10626 matches with Expected Property Name : AutoTestProperty_10626 for Office ID : 108 and Office Name : AutoTestOffice_10626</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>20.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property><con:property><con:name>NewPropertyName</con:name><con:value>AutoTestProperty_51034</con:value></con:property></con:properties></con:testCase><con:testCase id="78edf885-7966-4e02-bdd7-ab768aee0076" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MasterAddSmoke_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="MasterAdd_Groovy" id="33dfdf79-7d3a-4289-9772-d13145a878fe"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewOfficeName = ""
	def sCorporationID = context.expand( '${#TestSuite#CorporateID}' )
	def sCorporationName = context.expand( '${#TestSuite#CorporateName}' )
	//def (CorpInitial, CorpLast) = sCorporationName.tokenize( '_' )
	//String sCorpRandomNum = CorpLast;
	
	try
	{
		def iCount = context.expand( '${#Project#OfficePropertySmokeCount}' )
	   for(int i=1; i<=iCount.toInteger();i++)
	   {
	   	testRunner.testCase.testSuite.setPropertyValue("TestCount",i.toString())
	   	int iRandomNum = fnRandomNum(10001,99999);
			//sNewOfficeName = "AutoTestOffice_"+iRandomNum.toString();
		String sRandomNum = iRandomNum.toString();
			//testRunner.testCase.setPropertyValue("NewOfficeName",sNewOfficeName)  //Moving to TestSuite level property
			testRunner.testCase.testSuite.setPropertyValue("RandomNumber",sRandomNum)
			//def tc = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName];
			def runner = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases["AddOffice_TC"].run(null,false);
			
	   	
	   }//End of For loop
	}//End of Try
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[MasterAdd_TC] failed with exception : "+e)
		fnUpdateLog("[MasterAdd_TC] failed with exception : "+e)
	}
	finally
	{
		log.info "[AddOfficesPropertiesSmoke_TC] Execution Completed Successfully......."
		fnUpdateLog("[AddOfficesPropertiesSmoke_TC] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "OfficeID": ${#TestCase#NewOfficeId},
		    "OfficeName": "${#TestCase#NewOfficeName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddOffice" id="1e0f9d01-1040-4e85-a71b-7efc5d5a2f5e" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="AddOffice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddOffice" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"OfficeName": "${#TestSuite#NewOfficeName}",
	"DefaultStoreNumber": "1234",
	"Address": "AutoTestAddress",
	"City": "AutoTestCity",
	"State": "MI",
	"ZipCode": "48108",
	"PhoneNumber": "1112222",
	"QuoteEmailAddress": "AutoTestQuote@AutoTest.com",
	"PropertyWalkSubmitEmailAddress": "AutoTestSubmit@AutoTest.com",
	"CorporateID": ${#TestSuite#CorporateID}
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewOffices" id="f8111b72-75a5-4483-9cfd-e89ccb3b2508" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="ViewOffices" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewOffices" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="OriginalAddOffice_Groovy" id="7f355f4f-60fa-4120-8b53-cf828303f958" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewOfficeName = ""
	def sCorporationID = context.expand( '${#TestSuite#CorporateID}' )
	def sCorporationName = context.expand( '${#TestSuite#CorporateName}' )
	//def (CorpInitial, CorpLast) = sCorporationName.tokenize( '_' )
	//String sCorpRandomNum = CorpLast;
	
	try
	{
		def iCount = context.expand( '${#Project#OfficePropertySmokeCount}' )
	   for(int i=1; i<=iCount.toInteger();i++)
	   {
	   	testRunner.testCase.testSuite.setPropertyValue("TestCount",i.toString())
	   	log.info "[Add Office] Execution Started.........." 
		fnUpdateLog("[Add Office] Execution Started..........")
		fnGenerateTCStepsReport("Verify Add Office "+i.toString(), "", "", "")
		
		fnRunRequest("ViewOffices");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewOffices#Request}')
		def responseContent = context.expand('${ViewOffices#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max OfficeId and set at test case level property NewOfficeId,NewOfficeName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxOfficeId = 0
			int iOfficeListSize = jsonResponse["AppOfficeItems"].size()
			
			jsonResponse["AppOfficeItems"].each
			{ 
				//log.info it
				if(it.AppOfficeID >iMaxOfficeId)
				{
					iMaxOfficeId = it.AppOfficeID
				}
				//log.info "OfficeID>>>>>>>>>>>>>>>>>>>>>"+ it.AppOfficeID 
				//log.info "OfficeName>>>>>>>>>>>>>>>>>>>"+ it.OfficeName	
			}
			log.info "Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId 
			fnUpdateLog("Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId)
			log.info "Total Offices before Add : "+iOfficeListSize.toString()
			fnUpdateLog("Total Offices before Add : "+iOfficeListSize.toString())
		
			int iRandomNum = fnRandomNum(10001,99999);
			//sNewOfficeName = "AutoTestOffice_"+iRandomNum.toString();
			sNewOfficeName = "AutoTestOffice_"+iRandomNum.toString();
			//testRunner.testCase.setPropertyValue("NewOfficeName",sNewOfficeName)  //Moving to TestSuite level property
			testRunner.testCase.testSuite.setPropertyValue("NewOfficeName",sNewOfficeName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..");
		}
		//Start - Adding a new Office
		fnRunRequest("AddOffice");
		
		requestContent = context.expand('${AddOffice#Request}')
		log.info requestContent
		responseContent = context.expand('${AddOffice#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddOffice"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+"_"+i.toString()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+"_"+i.toString()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddOffice", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			
			//if(sKey=="Status" && sValue=="Action: Corporate Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Office Header Response", "Office should be added with proper header response", "Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName, "Pass")
				log.info "Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName
				fnUpdateLog("Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName)
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Office Response", "Office should be created with proper header response", "Office NOT added for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName, "Fail")
				log.info "Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName+" with header response : "+arrResult[0].toString())
				testRunner.fail("Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Office
		
			//sleep(1000)
			//Start - Verify newly added Office
			boolean bFlag = false
			fnRunRequest("ViewOffices");
			requestContent = context.expand('${ViewOffices#Request}')
			responseContent = context.expand('${ViewOffices#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+"_"+i.toString()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+"_"+i.toString()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iOfficeListSize = jsonResponse["AppOfficeItems"].size()
				log.info "Total Offices After Add : "+iOfficeListSize.toString()
				fnUpdateLog("Total Offices After Add : "+iOfficeListSize.toString())
				
				jsonResponse["AppOfficeItems"].find
				{ 
					//log.info it
					//if(it.AppOfficeID == 367 && it.OfficeName == "TestOffice_367" )  //Just for testing
					//if(it.AppOfficeID.toString() == iNewOfficeId.toString() && it.OfficeName.toString() == sNewOfficeName )
					if(it.OfficeName.toString() == sNewOfficeName && it.CorporateID.toString() == sCorporationID)
					{
						bFlag = true
						testRunner.testCase.testSuite.setPropertyValue("AppOfficeID",it.AppOfficeID.toString())
						
						//log.info "Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString()
						//fnUpdateLog("Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString() )
						fnGenerateTCStepsReport("Verify Office Name in View Office Response", "Actual Office name should match with Expected Office name ", "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation ID : "+it.CorporateID.toString()+" and Corporation Name : "+sCorporationName, "Pass")
						log.info "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation ID : "+it.CorporateID.toString()+" and Corporation Name : "+sCorporationName
						fnUpdateLog("Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation ID : "+it.CorporateID.toString()+" and Corporation Name : "+sCorporationName)
						return true
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Office ", "Newly added Office should be validated", "Newly added Office validated successfully", "Pass")
					log.info "Newly added Office validated successfully"
					fnUpdateLog("Newly added Office validated successfully")
					sleep(1000)
					fnGenerateTCStepsReport("Verify Add Property "+i.toString(), "", "", "")
					fnRunRequest("AddProperty_Groovy");
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Office ", "Newly added Office should be validated", "Newly added Office NOT validated. Office NOT found.", "Fail")
					log.info "Newly added Office NOT found"
					fnUpdateLog("Newly added Office NOT found")
					testRunner.fail("Newly added Office NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Office Response", "Add Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	   }//End of For loop
	}//End of Try
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[AddOfficesPropertiesSmoke_TC] failed with exception : "+e)
		fnUpdateLog("[AddOfficesPropertiesSmoke_TC] failed with exception : "+e)
	}
	finally
	{
		log.info "[AddOfficesPropertiesSmoke_TC] Execution Completed Successfully......."
		fnUpdateLog("[AddOfficesPropertiesSmoke_TC] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "OfficeID": ${#TestCase#NewOfficeId},
		    "OfficeName": "${#TestCase#NewOfficeName}"
		}*/]]></script></con:config></con:testStep><con:setupScript>testCase.testSuite.setPropertyValue("AppOfficeID","0")
testCase.testSuite.setPropertyValue("NewOfficeName","")
testCase.testSuite.setPropertyValue("NewPropertyName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalOffices","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Add Office Property Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>60</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>60</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>20</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 1</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_84857 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_84857 matches with Expected Office Name : AutoTestOffice_84857 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>2</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 1</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>2.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_84857 added successfully for Office Id : 99 and Office Name : AutoTestOffice_84857</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_84857 matches with Expected Property Name : AutoTestProperty_84857 for Office ID : 99 and Office Name : AutoTestOffice_84857</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>3</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 2</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>3.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_73186 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>3.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_73186 matches with Expected Office Name : AutoTestOffice_73186 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>3.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>4</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 2</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>4.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_73186 added successfully for Office Id : 100 and Office Name : AutoTestOffice_73186</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>4.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_73186 matches with Expected Property Name : AutoTestProperty_73186 for Office ID : 100 and Office Name : AutoTestOffice_73186</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>4.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>5</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 3</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>5.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_23310 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>5.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_23310 matches with Expected Office Name : AutoTestOffice_23310 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>5.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>6</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 3</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>6.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_23310 added successfully for Office Id : 101 and Office Name : AutoTestOffice_23310</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>6.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_23310 matches with Expected Property Name : AutoTestProperty_23310 for Office ID : 101 and Office Name : AutoTestOffice_23310</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>6.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>7</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 4</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>7.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_61336 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>7.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_61336 matches with Expected Office Name : AutoTestOffice_61336 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>7.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>8</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 4</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>8.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_61336 added successfully for Office Id : 102 and Office Name : AutoTestOffice_61336</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>8.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_61336 matches with Expected Property Name : AutoTestProperty_61336 for Office ID : 102 and Office Name : AutoTestOffice_61336</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>8.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>9</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 5</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>9.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_97396 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>9.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_97396 matches with Expected Office Name : AutoTestOffice_97396 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>9.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>10</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 5</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>10.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_97396 added successfully for Office Id : 103 and Office Name : AutoTestOffice_97396</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>10.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_97396 matches with Expected Property Name : AutoTestProperty_97396 for Office ID : 103 and Office Name : AutoTestOffice_97396</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>10.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>11</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 6</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>11.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_89734 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>11.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_89734 matches with Expected Office Name : AutoTestOffice_89734 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>11.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>12</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 6</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>12.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_89734 added successfully for Office Id : 104 and Office Name : AutoTestOffice_89734</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>12.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_89734 matches with Expected Property Name : AutoTestProperty_89734 for Office ID : 104 and Office Name : AutoTestOffice_89734</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>12.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>13</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 7</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>13.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_22973 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>13.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_22973 matches with Expected Office Name : AutoTestOffice_22973 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>13.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>14</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 7</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>14.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_22973 added successfully for Office Id : 105 and Office Name : AutoTestOffice_22973</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>14.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_22973 matches with Expected Property Name : AutoTestProperty_22973 for Office ID : 105 and Office Name : AutoTestOffice_22973</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>14.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>15</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 8</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>15.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_42573 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>15.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_42573 matches with Expected Office Name : AutoTestOffice_42573 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>15.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>16</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 8</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>16.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_42573 added successfully for Office Id : 106 and Office Name : AutoTestOffice_42573</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>16.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_42573 matches with Expected Property Name : AutoTestProperty_42573 for Office ID : 106 and Office Name : AutoTestOffice_42573</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>16.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>17</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 9</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>17.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_95708 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>17.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_95708 matches with Expected Office Name : AutoTestOffice_95708 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>17.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>18</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 9</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>18.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_95708 added successfully for Office Id : 107 and Office Name : AutoTestOffice_95708</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>18.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_95708 matches with Expected Property Name : AutoTestProperty_95708 for Office ID : 107 and Office Name : AutoTestOffice_95708</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>18.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>19</td><td class = "tsgenlevel1" width = 25%>Verify Add Office 10</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>19.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_10626 added successfully for Corporate Id : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>19.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_10626 matches with Expected Office Name : AutoTestOffice_10626 for Corporation ID : 53 and Corporation Name : AutoTestCorporation_81650</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>19.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>20</td><td class = "tsgenlevel1" width = 25%>Verify Add Property 10</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>20.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_10626 added successfully for Office Id : 108 and Office Name : AutoTestOffice_10626</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>20.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_10626 matches with Expected Property Name : AutoTestProperty_10626 for Office ID : 108 and Office Name : AutoTestOffice_10626</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>20.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property><con:property><con:name>NewPropertyName</con:name><con:value>AutoTestProperty_51034</con:value></con:property></con:properties></con:testCase><con:testCase id="8215adad-fe8e-4d34-a88a-c7f7d75b38fa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AddOffice_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="AddOffice_Groovy" id="351cd52b-edde-427d-8c55-6c5f4810f945"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	log.info "[Add Office] Execution Started.........." 
	fnUpdateLog("[Add Office] Execution Started..........")
	fnGenerateTCStepsReport("Verify Add Office", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewOfficeName = ""
	try
	{
		fnRunRequest("ViewOffices");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewOffices#Request}')
		def responseContent = context.expand('${ViewOffices#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max OfficeId and set at test case level property NewOfficeId,NewOfficeName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxOfficeId = 0
			int iOfficeListSize = jsonResponse["AppOfficeItems"].size()
			
			jsonResponse["AppOfficeItems"].each
			{ 
				//log.info it
				if(it.AppOfficeID >iMaxOfficeId)
				{
					iMaxOfficeId = it.AppOfficeID
				}
				//log.info "OfficeID>>>>>>>>>>>>>>>>>>>>>"+ it.AppOfficeID 
				//log.info "OfficeName>>>>>>>>>>>>>>>>>>>"+ it.OfficeName	
			}
			log.info "Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId 
			fnUpdateLog("Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId)
			log.info "Total Offices before Add : "+iOfficeListSize.toString()
			fnUpdateLog("Total Offices before Add : "+iOfficeListSize.toString())
		
			int iRandomNum = fnRandomNum(10001,99999);
			sNewOfficeName = "AutoTestOffice_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewOfficeName",sNewOfficeName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..");
		}
		//Start - Adding a new Office
		fnRunRequest("AddOffice");
		
		requestContent = context.expand('${AddOffice#Request}')
		log.info requestContent
		responseContent = context.expand('${AddOffice#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddOffice"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddOffice", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			def sCorporation = context.expand( '${#Project#CorporateID}' )
			//if(sKey=="Status" && sValue=="Action: Corporate Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Office Header Response", "Office should be added with proper header response", "Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporation, "Pass")
				log.info "Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporation
				fnUpdateLog("Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporation)
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Office Response", "Office should be created with proper header response", "Office NOT added for Corporate Id : "+sCorporation, "Fail")
				log.info "Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporation+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporation+" with header response : "+arrResult[0].toString())
				testRunner.fail("Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporation+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Office
		
			//sleep(1000)
			//Start - Verify newly added Office
			boolean bFlag = false
			fnRunRequest("ViewOffices");
			requestContent = context.expand('${ViewOffices#Request}')
			responseContent = context.expand('${ViewOffices#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iOfficeListSize = jsonResponse["AppOfficeItems"].size()
				log.info "Total Offices After Add : "+iOfficeListSize.toString()
				fnUpdateLog("Total Offices After Add : "+iOfficeListSize.toString())
				
				jsonResponse["AppOfficeItems"].find
				{ 
					//log.info it
					//if(it.AppOfficeID == 367 && it.OfficeName == "TestOffice_367" )  //Just for testing
					//if(it.AppOfficeID.toString() == iNewOfficeId.toString() && it.OfficeName.toString() == sNewOfficeName )
					if(it.OfficeName.toString() == sNewOfficeName && it.CorporateID.toString() == sCorporation)
					{
						bFlag = true
						//log.info "Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString()
						//fnUpdateLog("Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString() )
						fnGenerateTCStepsReport("Verify Office Name in View Office Response", "Actual Office name should match with Expected Office name ", "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" Corporation : "+it.CorporateID.toString(), "Pass")
						log.info "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation : "+it.CorporateID.toString()
						fnUpdateLog("Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation : "+it.CorporateID.toString())
						return true
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Office ", "Newly added Office should be validated", "Newly added Office validated successfully", "Pass")
					log.info "Newly added Office validated successfully"
					fnUpdateLog("Newly added Office validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Office ", "Newly added Office should be validated", "Newly added Office NOT validated. Office NOT found.", "Fail")
					log.info "Newly added Office NOT found"
					fnUpdateLog("Newly added Office NOT found")
					testRunner.fail("Newly added Office NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Office Response", "Add Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Offices] failed with exception : "+e)
		fnUpdateLog("[Add Offices] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Office] Execution Completed Successfully......."
		fnUpdateLog("[Add Office] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "OfficeID": ${#TestCase#NewOfficeId},
		    "OfficeName": "${#TestCase#NewOfficeName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddOffice" id="74611d49-723e-4173-9013-40756da960d8" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="AddOffice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddOffice" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"OfficeName": "${#TestCase#NewOfficeName}",
	"DefaultStoreNumber": "1234",
	"Address": "AutoTestAddress",
	"City": "AutoTestCity",
	"State": "MI",
	"ZipCode": "48108",
	"PhoneNumber": "1112222",
	"QuoteEmailAddress": "AutoTestQuote@AutoTest.com",
	"PropertyWalkSubmitEmailAddress": "AutoTestSubmit@AutoTest.com",
	"CorporateID": ${#Project#CorporateID}
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewOffices" id="d1553c88-0bf2-498c-8d9b-d35b6bcc07c3" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="ViewOffices" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewOffices" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewOfficeId","0")
testCase.setPropertyValue("NewOfficeName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalOffices","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Add Office Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_56012 added successfully for Corporate Id : 1</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_56012 matches with Expected Office Name : AutoTestOffice_56012 Corporation : 1</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewOfficeId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewOfficeName</con:name><con:value>AutoTestOffice_56012</con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="657bcdee-195a-4c30-8aa7-c8edb7e9a1da" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AddProperty_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="AddProperty_Groovy" id="a4231aa8-0e3e-4560-946d-59663b1cc19e" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	log.info "[Add Property] Execution Started.........." 
	fnUpdateLog("[Add Property] Execution Started..........")
	//fnGenerateTCStepsReport("Verify Add Property", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewPropertyName = ""
	def sAppOfficeID = context.expand( '${#TestSuite#AppOfficeID}' )
	def sOfficeName = context.expand( '${#TestSuite#NewOfficeName}' )
	def (OfficeInitial, OfficeLast) = sOfficeName.tokenize( '_' )
	String sOfficeRandomNum = OfficeLast;
	
	try
	{
		fnRunRequest("ViewProperties");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		def sCount = testRunner.testCase.testSuite.getPropertyValue("TestCount")
		def requestContent = context.expand('${ViewProperties#Request}')
		def responseContent = context.expand('${ViewProperties#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max PropertyId and set at test case level property NewPropertyId,NewPropertyName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxPropertyId = 0
			int iPropertyListSize = jsonResponse["properties"].size()
			
			jsonResponse["properties"].each
			{ 
				//log.info it
				if(it.PropertyID >iMaxPropertyId)
				{
					iMaxPropertyId = it.PropertyID
				}
				//log.info "PropertyID>>>>>>>>>>>>>>>>>>>>>"+ it.PropertyID 
				//log.info "PropertyName>>>>>>>>>>>>>>>>>>>"+ it.ProjectName	
			}
			log.info "Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId 
			fnUpdateLog("Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId)
			log.info "Total Properties before Add : "+iPropertyListSize.toString()
			fnUpdateLog("Total Properties before Add : "+iPropertyListSize.toString())
		
			//int iRandomNum = fnRandomNum(10001,99999);
			//sNewPropertyName = "AutoTestProperty_"+iRandomNum.toString();
			sNewPropertyName = "AutoTestProperty_"+sOfficeRandomNum;
			testRunner.testCase.testSuite.setPropertyValue("NewPropertyName",sNewPropertyName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please continue adding Property..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please continue adding Property.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please continue adding Property..");
		}
		//Start - Adding a new Property
		fnRunRequest("AddProperty");
		
		requestContent = context.expand('${AddProperty#Request}')
		log.info requestContent
		responseContent = context.expand('${AddProperty#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddProperty"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(4).getName()+"_"+sCount.toString()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(4).getName()+"_"+sCount.toString()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddProperty", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			
			//if(sKey=="Status" && sValue=="Action: Office Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Property Header Response", "Property should be added with proper header response", "Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName, "Pass")
				log.info "Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName
				fnUpdateLog("Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName)
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Property Response", "Property should be created with proper header response", "Property NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName, "Fail")
				log.info "Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
				testRunner.fail("Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Property
		
			//sleep(1000)
			//Start - Verify newly added Property
			boolean bFlag = false
			fnRunRequest("ViewProperties");
			requestContent = context.expand('${ViewProperties#Request}')
			responseContent = context.expand('${ViewProperties#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(5).getName()+"_"+sCount.toString()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(5).getName()+"_"+sCount.toString()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iPropertyListSize = jsonResponse["properties"].size()
				log.info "Total Properties After Add : "+iPropertyListSize.toString()
				fnUpdateLog("Total Properties After Add : "+iPropertyListSize.toString())
				
				jsonResponse["properties"].find
				{ 
					//log.info it
					//if(it.PropertyID == 367 && it.ProjectName == "TestProperty_367" )  //Just for testing
					//if(it.PropertyID.toString() == iNewPropertyId.toString() && it.ProjectName.toString() == sNewPropertyName )
					if(it.ProjectName.toString() == sNewPropertyName && it.AppOfficeID.toString() == sAppOfficeID)
					{
						bFlag = true
						//log.info "Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString()
						//fnUpdateLog("Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString() )
						fnGenerateTCStepsReport("Verify Property Name in View Property Response", "Actual Property name should match with Expected Property name ", "Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName, "Pass")
						log.info "Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName
						fnUpdateLog("Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName)
						return true
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Property ", "Newly added Property should be validated", "Newly added Property validated successfully", "Pass")
					log.info "Newly added Property validated successfully"
					fnUpdateLog("Newly added Property validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Property ", "Newly added Property should be validated", "Newly added Property NOT validated. Property NOT found.", "Fail")
					log.info "Newly added Property NOT found"
					fnUpdateLog("Newly added Property NOT found")
					testRunner.fail("Newly added Property NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Property Response", "Add Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(4).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Properties] failed with exception : "+e)
		fnUpdateLog("[Add Properties] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Property] Execution Completed Successfully......."
		fnUpdateLog("[Add Property] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "PropertyID": ${#TestCase#NewPropertyId},
		    "PropertyName": "${#TestCase#NewPropertyName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddProperty" id="fec16dc6-65e3-4efd-8eb0-d677a852d0db" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="AddProperty" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddProperty" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID":${#TestSuite#AppOfficeID},
	"ProjectName":"${#TestSuite#NewPropertyName}",
	"Address":"AutoTestAddress",
	"City":"AutoTestCity",
	"State":"MI",
	"ZipCode":"12345",
	"County":"AutoTestCounty",
	"MainSqFt":"1234",
	"NumberBedroom":"2",
	"NumberBathroom":"2.5",
	"YearBuilt":"2015",
	"Comment":"AutoTestComment",
	"GateCode":"AutoGCode",
	"LockBox":"AutoLckBox",
	"walkUserAssigned":"Bryce"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewProperties" id="8ac9e987-0546-4943-acfe-637bdddd118a" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="ViewProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewProperties" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewOfficeId","0")
testCase.setPropertyValue("NewOfficeName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalOffices","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Add Office Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_56012 added successfully for Corporate Id : 1</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_56012 matches with Expected Office Name : AutoTestOffice_56012 Corporation : 1</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewOfficeId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewOfficeName</con:name><con:value>AutoTestOffice_56012</con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>CorporateID</con:name><con:value>53</con:value></con:property><con:property><con:name>CorporateName</con:name><con:value>AutoTestCorporation_81650</con:value></con:property><con:property><con:name>NewOfficeName</con:name><con:value>AutoTestOffice_10626</con:value></con:property><con:property><con:name>AppOfficeID</con:name><con:value>108</con:value></con:property><con:property><con:name>NewPropertyName</con:name><con:value>AutoTestProperty_10626</con:value></con:property><con:property><con:name>TestCount</con:name><con:value>10</con:value></con:property></con:properties><con:setupScript/></con:testSuite><con:properties><con:property><con:name>Working_Directory</con:name><con:value>C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project</con:value></con:property><con:property><con:name>ServiceEndPoint</con:name><con:value>http://localhost:8085</con:value></con:property><con:property><con:name>TestDataPath</con:name><con:value>C:\\Selenium_Workspace\\HomeDepot_Renowalk\\TestData\\Renowalk_Automation_Data.xls</con:value></con:property><con:property><con:name>ProjectLog</con:name><con:value>C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Logs\RenoWalk_API_End-to-End_20150922.log</con:value></con:property><con:property><con:name>LogFileName</con:name><con:value>RenoWalk_API_End-to-End_20150922.log</con:value></con:property><con:property><con:name>ResultPath</con:name><con:value>C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_22_2015_02_30_45_PM</con:value></con:property><con:property><con:name>User</con:name><con:value>SXA8062</con:value></con:property><con:property><con:name>Pwd</con:name><con:value>sdfsdf</con:value></con:property><con:property><con:name>Schema</con:name><con:value>SERVICES_TST01</con:value></con:property><con:property><con:name>DBConnectionString</con:name><con:value>jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=atst-dtdb01)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=adctst1)))</con:value></con:property><con:property><con:name>CorporateID</con:name><con:value>1</con:value></con:property><con:property><con:name>OfficePropertySmokeCount</con:name><con:value>10</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>