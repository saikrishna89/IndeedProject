<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="8d6fd6e6-e170-449f-97d1-7f43eb2876e7" activeEnvironment="Default" name="RenoWalk_API_Automation" resourceRoot="" soapui-version="5.2.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:description>http://localhost:8085//RenoWalk/api/v1/Corporate
http://localhost:8085//RenoWalk/api/v1/Region
http://localhost:8085//RenoWalk/api/v1/ProductTiers
http://localhost:8085//RenoWalk/api/v1/AppOffice
http://localhost:8085//RenoWalk/api/v1/Property</con:description><con:settings/><con:interface xsi:type="con:RestService" id="01598a48-ef46-47ca-8bc1-34538c762573" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://webapps-qa.homedepot.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://webapps-qa.homedepot.com</con:endpoint></con:endpoints><con:resource name="Corporate" path="/RenoWalk/api/v1/Corporate" id="9cf5cb3f-eee7-4a47-bd41-921c041fe135"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ViewCorporations" id="60812fea-da65-4831-baeb-f5ef894c4072" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cor="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate">cor:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json11</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cor="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate">cor:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ViewRequest" id="84117eed-e671-481b-b13e-b8ad20fb3df8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Content-Type" value="application/json"/>
  <con:entry key="Accept" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method><con:method name="AddCorporation" id="028ede43-80be-4740-95c7-6592ea2043b2" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">true</con:setting></con:settings><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cor="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate">cor:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:cor="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate">cor:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:cor="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate">cor:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddRequest" id="cf639bdd-55f7-435f-9406-342efaa36c60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
    "CorporateID": ${#TestCase#NewCorpId},
    "CorporateName": "${#TestCase#NewCorpName}"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Region" path="/RenoWalk/api/v1/Region" id="2c59aa9f-a86e-4fe8-abdd-f3abc8330d53"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ViewRegions" id="7b9ff434-79ec-4f1a-86ab-61f5dcc66ced" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Region">reg:Response</con:element></con:representation><con:request name="ViewRequest" id="c4d65ad6-ccd5-4113-b32f-fbb6d5a49136" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Region</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Content-Type" value="application/json"/>
  <con:entry key="Accept" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method><con:method name="AddRegion" id="7b9ff434-79ec-4f1a-86ab-61f5dcc66ced" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:reg="http://localhost/RenoWalk/api/v1/Region">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddRequest" id="c4d65ad6-ccd5-4113-b32f-fbb6d5a49136" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
    "RegionName": ""
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/Region</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="ProductTiers" path="/RenoWalk/api/v1/ProductTiers" id="ee242ded-69c3-4b90-bd39-ebbbee6e86d3"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ViewProductTiers" id="110366a7-bc57-4611-999e-865265c8be93" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prod="https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers">prod:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ViewRequest" id="355346a2-a3c0-4473-9742-82287a4e59b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method><con:method name="AddProductTier" id="110366a7-bc57-4611-999e-865265c8be93" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prod="https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers">prod:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:prod="https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers">prod:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddRequest" id="355346a2-a3c0-4473-9742-82287a4e59b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID": 41, "TierName": "PT3"
}
</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="AppOffice" path="/RenoWalk/api/v1/AppOffice" id="4babc890-581a-43fd-af71-804da87584ce"><con:settings/><con:parameters/><con:method name="ViewOffices" id="86d4a881-d6dc-45fb-9669-d3769a0b0f8a" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="http://localhost/RenoWalk/api/v1/AppOffice">app:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="http://localhost/RenoWalk/api/v1/AppOffice">app:Response</con:element></con:representation><con:request name="ViewRequest" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="AddOffice" id="86d4a881-d6dc-45fb-9669-d3769a0b0f8a" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="http://localhost/RenoWalk/api/v1/AppOffice">app:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:app="http://localhost/RenoWalk/api/v1/AppOffice">app:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:app="http://localhost/RenoWalk/api/v1/AppOffice">app:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddRequest" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"OfficeName": "AutoTestOffice4",
	"DefaultStoreNumber": "1234",
	"Address": "AutoTestAddress",
	"City": "AutoTestCity",
	"State": "MI",
	"ZipCode": "48108",
	"PhoneNumber": "1112222",
	"QuoteEmailAddress": "AutoTestQuote@AutoTest.com",
	"PropertyWalkSubmitEmailAddress": "AutoTestSubmit@AutoTest.com",
	"CorporateID": 1
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Property" path="/RenoWalk/api/v1/Property" id="898481e3-068b-4a87-9623-873f07310b21"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ViewProperties" id="7259410c-2a06-4fad-bd6d-1c447ec927b9" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:prop="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property">prop:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prop="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property">prop:Response</con:element></con:representation><con:request name="ViewRequest" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method><con:method name="AddProperty" id="7259410c-2a06-4fad-bd6d-1c447ec927b9" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:prop="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property">prop:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:prop="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property">prop:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:prop="https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property">prop:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddRequest" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID":106,
	"ProjectName":"AutoTestProperty2",
	"Address":"AutoTestAddress",
	"City":"AutoTestCity",
	"State":"MI",
	"ZipCode":"12345",
	"County":"AutoTestCounty",
	"MainSqFt":"1234",
	"NumberBedroom":"2",
	"NumberBathroom":"2.5",
	"YearBuilt":"2015",
	"Comment":"AutoTestComment",
	"GateCode":"AutoGCode",
	"LockBox":"AutoLckBox",
	"walkUserAssigned":"Bryce"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="PWGroup" path="/RenoWalk/api/v1/PWGroup" id="e0149bcb-f463-4d57-98cc-787ad150d94c"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ViewGroups" id="3b36a63f-704b-4ae0-a002-6806c2bb6e90" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:pwg="http://localhost/RenoWalk/api/v1/PWGroup">pwg:Response</con:element></con:representation><con:request name="ViewRequest" id="9bfc5647-0e68-415f-b318-ff0abaad34cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/PWGroup</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method><con:method name="AddGroup" id="3b36a63f-704b-4ae0-a002-6806c2bb6e90" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:pwg="http://localhost/RenoWalk/api/v1/PWGroup">pwg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddRequest" id="9bfc5647-0e68-415f-b318-ff0abaad34cb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID": 161,
	"DefaultPhotoGroup": 1,
	"Description": "AutoTestDescription",
	"GLCode": "AutoTstGLCode",
	"IncludeComment": 1,
	"IncludeMeasurements": 1,
	"IncludePaint": 1,
	"MaxNumberPerHouse": "12",
	"Name": "AutoTestName",
	"PWGroupItem": [],
	"PhotoFolderName": "AutoTestFolderName"
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/PWGroup</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="9e1b68d5-36bb-4ebb-ad9d-1b100fb5b8a5" name="RenoWalk_API_TestDriver_TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="28e9eafa-9268-4a3b-ba2b-195bcfb88237" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestDriver_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="TestDriver_Groovy" id="408b71fc-e88e-4be9-a37e-4e350f00d4f5"><con:settings/><con:config><script><![CDATA[import Fillo.*;
import Exception.FilloException;
import com.eviware.soapui.model.testsuite.TestRunner.Status;
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat;
import groovy.time.*

scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
String sProjectName=testRunner.testCase.testSuite.project.name

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	Fillo fillo=new Fillo();
	String sTSName = ""
	String sTCName = ""
	String sEnvironment=""
	String sApplication=""
	String sPhase=""
	String sRelease=""
	String sReportName=""
	String sAPI_Flag=""
	Date startDate = new Date();
	String footer =""

	
	String sLogFileName = context.expand( '${#Project#LogFileName}' )
	log.info "sLogFileName>>>>>"+sLogFileName
	def sTestDataPath = context.expand( '${#Project#TestDataPath}' )
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	Connection connection=fillo.getConnection(sTestDataPath);
	String sEnvQuery="Select * from Environment where API_Flag='Y'";
	try{
		Recordset rsetEnvSheet=connection.executeQuery(sEnvQuery);
	
		while(rsetEnvSheet.next())
		{
			sEnvironment=rsetEnvSheet.getField("Environment");
			sApplication=rsetEnvSheet.getField("Application");
			sPhase=rsetEnvSheet.getField("Phase");
			sRelease=rsetEnvSheet.getField("Release");
			sReportName=rsetEnvSheet.getField("ReportName");
			sReportName = sReportName.replaceAll("Test", "API Test")
			sAPI_Flag=rsetEnvSheet.getField("API_Flag");
			break;
		}
		rsetEnvSheet.close();
	}
	catch (Exception e){
		log.info "In Error" + e
	}
log.info sEnvironment+sApplication+ sPhase+ sRelease
	/////////////////////////////////////////
		//repGenerateIndexHeader(sEnvironment, sApplication, sPhase, sRelease)
		
		def sHeader =  context.Reporter.repGenerateIndexHeader(sReportName, sEnvironment, sApplication, sPhase, sRelease)
		log.info "sHeader>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"+sHeader
		
		miniPath = sPhase+"_"	+ new SimpleDateFormat("MM_dd_yyyy_hh_mm_ss_a").format(new Date());
			
		def filePath = working_Directory.toString()+"\\Results\\"+ miniPath;
		String sFolderPath = filePath; // save path of local report folder
		testRunner.testCase.testSuite.project.setPropertyValue("ResultPath",sFolderPath)
		
	
		//String shareFolderPath = "\\\\"+"sSharedServerIP"+"\\"+"testEnv"+"\\"+"MyRelease"+"\\"+"appName"+"\\"+"Results"+"\\";
		//shareFolderPath = shareFolderPath + miniPath;
		
		dir = new File(filePath);
		dir.mkdir();
		File indexFile = new File(filePath+"\\"+"index_"+InetAddress.getLocalHost().getHostName()+".html")
		
		
	
	/////////////////////////////////////////
	if(sAPI_Flag=="Y")
	{
		Date startDateTC ;
		Date endDateTC ;
		String sTestSetQuery="Select * from TestSet where API_Test='Y'";
		String sTCId =""
		String sTCDesc =""
		String sSoapUIDataQuery =""
		String sTCHTMLContent = ""
		
		Recordset rsetTestSetSheet=connection.executeQuery(sTestSetQuery);
		while(rsetTestSetSheet.next())
		{
			String sSlNo = ""
			String sTotalSteps = ""
			String sPassSteps = ""
			String sFailSteps = ""
			String sStatus = ""
			String sALMHistory = ""
			String sTCStepsHTMLContent = ""

			startDateTC = new Date();
			sSlNo = testRunner.testCase.testSuite.getPropertyValue("TCCounter")
			int sCurrentSlNo = sSlNo.toInteger()+1
			testRunner.testCase.testSuite.setPropertyValue("TCCounter",sCurrentSlNo.toString())
			
			sTCId=rsetTestSetSheet.getField("Test_Case_ID");
			log.info(sTCId);
			sTCDesc=rsetTestSetSheet.getField("Test_Case_Description");
			log.info(sTCDesc);
			
			sSoapUIDataQuery="Select * from SoapUI where Test_Case_ID='" + sTCId + "'";
			
			Recordset rsetSoapUISheet=connection.executeQuery(sSoapUIDataQuery);
			while(rsetSoapUISheet.next())
			{
				sTSName = rsetSoapUISheet.getField("Test_Set_Name");
				log.info("Test Set Name >>>> "+sTSName);
	
				sTCName = rsetSoapUISheet.getField("Test_Case_Name");
				log.info("Test Case Name >>>> "+sTCName);
				//tcname=rsetSoapUISheet.getField("Test_Case_Name");
				//Corp_Id = rsetSoapUISheet.getField("Id");
				//Corp_Name = rsetSoapUISheet.getField("Name");
			}
			File tcFile = new File(filePath+"\\"+sTCName+".html")	
			headerHtmlContent = context.Reporter.repGenerateHeader(sReportName, sTCId, sTCName, sApplication, sTCDesc, sEnvironment)
			log.info "headerHtmlContent>>>>>>>>>"+headerHtmlContent
		
			rsetSoapUISheet.close();
	
			//log.info "Corporate ID:" + Corp_Id
			//log.info "Corporate Name:" + Corp_Name
			//testRunner.testCase.testSuite.setPropertyValue("Corp_Id",Corp_Id)
			//testRunner.testCase.testSuite.setPropertyValue("Corp_Name",Corp_Name)
			//def tc = testRunner.testCase.testSuite.project.testSuites["RenoWalk_API_TS"].testCases[tcname];
			
			def tc = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName];
			def runner = tc.run(null,false);

			String sTCTableHeader = context.Reporter.generateTCTableHeader()
			sTCStepsHTMLContent = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName].getPropertyValue("TCStepsHTMLContent")
			sTotalSteps = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName].getPropertyValue("TotalSteps")
			sPassSteps = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName].getPropertyValue("PassSteps")
			sFailSteps = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName].getPropertyValue("FailSteps")
			sStatus = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName].getPropertyValue("Status")
			sALMHistory = "ALM Connection Disabled"
			if(sStatus == "FINISHED")
			{
				sStatus = "Pass"
				fnUpdateTCCount("Pass")
			}
			else if(sStatus == "FAILED")
			{
				sStatus = "Fail"
				fnUpdateTCCount("Fail")
			}

				
			endDateTC = new Date();
			TimeDuration tcDuration = TimeCategory.minus(endDateTC , startDateTC )
			log.info "duration>>>>>>>>>>>"+tcDuration
			
			footer = context.Reporter.repGenerateFooter(startDateTC, endDateTC, sTotalSteps , sPassSteps, sFailSteps)
			log.info "footer>>>>>>>>>"+footer
			tcFile.write(headerHtmlContent+sTCTableHeader+sTCStepsHTMLContent+"</table><BR><BR>"+footer)
			
			def sExistingTCHTMLContent = testRunner.testCase.testSuite.getPropertyValue("TCIndexHTMLContent")
			def (value1, value2) = sTSName.tokenize( '_' )
			sTSName = value1;
			String sReqJSONPath = sFolderPath+"\\InputOutput_JSONs\\"+sTSName+"\\Request_"+sTCName
			String sRespJSONPath = sFolderPath+"\\InputOutput_JSONs\\"+sTSName+"\\Response_"+sTCName
			sTCHTMLContent = context.Reporter.generateTCIndexHTMLContent(sCurrentSlNo.toString(), sTCId, sTCName, sTCDesc, sTotalSteps, sPassSteps, sFailSteps, sStatus, tcDuration, sReqJSONPath, sRespJSONPath)
			//sTCHTMLContent = context.Reporter.generateTCIndexHTMLContent(sCurrentSlNo.toString(), sTCId, sTCName, sTCDesc, "5", "3", "2", sStatus, tcDuration, sALMHistory)
			testRunner.testCase.testSuite.setPropertyValue("TCIndexHTMLContent",sExistingTCHTMLContent+sTCHTMLContent)

			sleep(1000)
			//log.info "Status>>>>>>>>>>>>>>>>>>>>>>>"+runner.status
			//testRunner.testCase.testSuite.project.testSuites[context.testCase.testSuite.name].testCases["Corporations_TC"].setPropertyValue("Status",runner.status.toString())
		}
		rsetTestSetSheet.close();
	
	}//End If
	else
	{
		log.info "API Test execution not enabled. Change API_Flag in Test data sheet"
	}

	
	String sIndexTableHeader = context.Reporter.generateIndexTableHeader()
	String sTCIndexHTMLContent = testRunner.testCase.testSuite.getPropertyValue("TCIndexHTMLContent")

	
	String sTotalTC = testRunner.testCase.testSuite.getPropertyValue("TotalTC")
	String sPassTC = testRunner.testCase.testSuite.getPropertyValue("PassTC")
	String sFailTC = testRunner.testCase.testSuite.getPropertyValue("FailTC")
	Date endDate =  new Date()
	indexFooter = context.Reporter.repGenerateIndexFooter(sLogFileName, startDate, endDate, sTotalTC, sPassTC, sFailTC) 
	//indexFile.write(sHeader+headerHtmlContent+footer+indexFooter)	
	indexFile.write(sHeader+sIndexTableHeader+sTCIndexHTMLContent+"</table><BR><BR>"+indexFooter)	

	def fnUpdateTCCount(String sStatus)
	{
		def sTotalTC = testRunner.testCase.testSuite.getPropertyValue("TotalTC")
		int sLatestTotalTC = sTotalTC.toInteger()+1
		testRunner.testCase.testSuite.setPropertyValue("TotalTC",sLatestTotalTC.toString())

		if(sStatus=="Pass")
		{
			def sPassTC = testRunner.testCase.testSuite.getPropertyValue("PassTC")
			int sLatestPassTC = sPassTC.toInteger()+1
			testRunner.testCase.testSuite.setPropertyValue("PassTC",sLatestPassTC.toString())
			
		}
		else
		{
			def sFailTC = testRunner.testCase.testSuite.getPropertyValue("FailTC")
			int sLatestFailTC = sFailTC.toInteger()+1
			testRunner.testCase.testSuite.setPropertyValue("FailTC",sLatestFailTC.toString())
		}
		
	}

connection.close();
context.Reporter.openHTMLreport(filePath.toString()+"\\"+"index_"+InetAddress.getLocalHost().getHostName()+".html")


/*
	//requestContent = tc.getTestStepByName("ViewCorporations_Req").getPropertyValue("request")
	responseContent = tc.getTestStepByName("ViewCorporations_Req").getPropertyValue("response")
	//requestContent = tc.getTestStepByName("AddCorporation_Req").getPropertyValue("request")
	//responseContent = tc.getTestStepByName("AddCorporation_Req").getPropertyValue("response")
	
	//jsonRequest = new JsonSlurper().parseText(requestContent)
	jsonResponse = new JsonSlurper().parseText(responseContent)
	//log.info (jsonRequest.CorporateID)
	//log.info (jsonRequest.CorporateName)
	def iMaxCorpId = 0
	jsonResponse["CorporateItems"].each
	{ 
		log.info it
		if(it.CorporateID >iMaxCorpId)
		{
			iMaxCorpId = it.CorporateID
		}
		log.info "CorporateID>>>>>>>>>>>>>>>>>>>>>"+ it.CorporateID 
		log.info "CorporateName>>>>>>>>>>>>>>>>>>>"+ it.CorporateName
		
	}
	log.info "Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId 
	
	
	log.info (jsonResponse)
	log.info (jsonResponse.Key)
	log.info (jsonResponse.Value)
		
	log.info "Status: $runner.status"*/


	
	/*if (runner.status!="FAILED")
	{
		String strQuery2="Update SoapUI Set Status='PASSED' where Test_Case_Name='" + tcname + "'";
		connection.executeUpdate(strQuery2);}
		else{
		String strQuery2="Update SoapUI Set Status='" + runner.status +"' where Test_Case_Name='" + tcname + "'";
		connection.executeUpdate(strQuery2);
	}*/]]></script></con:config></con:testStep><con:setupScript>fnGenerateTCStepsReport("Pre-requisite - Add Corporation and Office", "", "", "")
def runner = testRunner.testCase.testSuite.project.testSuites["Offices_TS"].testCases["AddOffice_TC"].run(null,false);

def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" &amp;&amp; sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}</con:setupScript><con:properties/></con:testCase><con:testCase id="3c69c2fb-0a9c-40c6-aed8-f6686cf00834" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PreCondition_AddCorporationOfficeRegion_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="PreCondition_Groovy" id="37960288-0c2b-42c4-8a8c-cda4b8569401"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	fnGenerateTCStepsReport("Pre-requisite - Add Corporation and Office", "", "", "")
	def runner = testRunner.testCase.testSuite.project.testSuites["Offices_TS"].testCases["AddOffice_TC"].run(null,false);
	
	log.info "[Add Group] Execution Started.........." 
	fnUpdateLog("[Add Group] Execution Started..........")
	fnGenerateTCStepsReport("Verify Add Group", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewGroupName = ""
	def sAppOfficeID = context.expand( '${#TestSuite#AppOfficeID}' )
	def sOfficeName = context.expand( '${#TestSuite#OfficeName}' )
	def (OfficeInitial, OfficeLast) = sOfficeName.tokenize( '_' )
	String sOfficeRandomNum = OfficeLast;
	String sCorporationName = testRunner.testCase.testSuite.project.testSuites["Corporations_TS"].testCases["AddCorporation_TC"].getPropertyValue("NewCorpName")
	
	try
	{
		fnRunRequest("ViewGroups");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//def sCount = testRunner.testCase.testSuite.getPropertyValue("TestCount")
		def requestContent = context.expand('${ViewGroups#Request}')
		def responseContent = context.expand('${ViewGroups#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max GroupId and set at test case level Group NewGroupId,NewGroupName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxGroupId = 0
			int iGroupListSize = jsonResponse["PWGroupItems"].size()
			
			jsonResponse["PWGroupItems"].each
			{ 
				//log.info it
				if(it.PWGroupID >iMaxGroupId)
				{
					iMaxGroupId = it.PWGroupID
				}
				//log.info "GroupID>>>>>>>>>>>>>>>>>>>>>"+ it.PWGroupID 
				//log.info "GroupName>>>>>>>>>>>>>>>>>>>"+ it.Name	
			}
			log.info "Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId 
			fnUpdateLog("Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId)
			log.info "Total Groups before Add : "+iGroupListSize.toString()
			fnUpdateLog("Total Groups before Add : "+iGroupListSize.toString())
		
			//int iRandomNum = fnRandomNum(10001,99999);
			//sNewGroupName = "AutoTestGroup_"+iRandomNum.toString();
			sNewGroupName = "AutoTestGroup_"+sOfficeRandomNum;
			testRunner.testCase.setPropertyValue("NewGroupName",sNewGroupName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Group Response", "View Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group..");
		}
		//Start - Adding a new Group
		fnRunRequest("AddGroup");
		
		requestContent = context.expand('${AddGroup#Request}')
		log.info requestContent
		responseContent = context.expand('${AddGroup#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddGroup"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddGroup", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			
			//if(sKey=="Status" && sValue=="Action: Office Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Group Header Response", "Group should be added with proper header response", "Group : "+sNewGroupName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Pass")
				log.info "Group : "+sNewGroupName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")"
				fnUpdateLog("Group : "+sNewGroupName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Group Response", "Group should be created with proper header response", "Group NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Fail")
				log.info "Group : "+sNewGroupName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Group : "+sNewGroupName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
				testRunner.fail("Group : "+sNewGroupName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Group
		
			//sleep(1000)
			//Start - Verify newly added Group
			boolean bFlag = false
			fnRunRequest("ViewGroups");
			requestContent = context.expand('${ViewGroups#Request}')
			responseContent = context.expand('${ViewGroups#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iGroupListSize = jsonResponse["PWGroupItems"].size()
				log.info "Total Groups After Add : "+iGroupListSize.toString()
				fnUpdateLog("Total Groups After Add : "+iGroupListSize.toString())

				
				String sDefaultPhotoGroup = fnGetPropertyValue("DefaultPhotoGroup")
				String sDescription = fnGetPropertyValue("Description")
				String sGLCode = fnGetPropertyValue("GLCode")
				String sIncludeComment = fnGetPropertyValue("IncludeComment")
				String sIncludeMeasurements = fnGetPropertyValue("IncludeMeasurements")
				String sIncludePaint = fnGetPropertyValue("IncludePaint")
				String sMaxNumberPerHouse = fnGetPropertyValue("MaxNumberPerHouse")
				String sPhotoFolderName = fnGetPropertyValue("PhotoFolderName")
				
				
				
				jsonResponse["PWGroupItems"].find
				{ 
					//log.info it
					//if(it.PWGroupID == 367 && it.Name == "TestGroup_367" )  //Just for testing
					//if(it.PWGroupID.toString() == iNewGroupId.toString() && it.Name.toString() == sNewGroupName )
					if(it.Name.toString() == sNewGroupName && it.AppOfficeID.toString() == sAppOfficeID)
					{log.info "In first true"
						if (it.DefaultPhotoGroup.toString() == sDefaultPhotoGroup && it.Description.toString() == sDescription  && it.GLCode.toString() == sGLCode && it.IncludeComment.toString() == sIncludeComment  && it.IncludeMeasurements.toString() == sIncludeMeasurements && it.IncludePaint.toString() == sIncludePaint  && it.MaxNumberPerHouse.toString() == sMaxNumberPerHouse && it.PhotoFolderName.toString() == sPhotoFolderName)
						{log.info "In second true"
							bFlag = true
							//log.info "Actual Group Id : "+it.PWGroupID.toString() +" matches with Expected Group Id : "+iNewGroupId.toString()
							//fnUpdateLog("Actual Group Id : "+it.PWGroupID.toString() +" matches with Expected Group Id : "+iNewGroupId.toString() )
							fnGenerateTCStepsReport("Verify Group Name in View Group Response", "Actual Group name should match with Expected Group name ", "Actual Group Name : "+it.Name.toString() +" matches with Expected Group Name : "+sNewGroupName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Pass")
							log.info "Actual Group Name : "+it.Name.toString() +" matches with Expected Group Name : "+sNewGroupName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName
							fnUpdateLog("Actual Group Name : "+it.Name.toString() +" matches with Expected Group Name : "+sNewGroupName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName)
							return true
						}
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Group ", "Newly added Group should be validated", "Newly added Group validated successfully", "Pass")
					log.info "Newly added Group validated successfully"
					fnUpdateLog("Newly added Group validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Group ", "Newly added Group should be validated", "Newly added Group NOT validated. Group NOT found.", "Fail")
					log.info "Newly added Group NOT found"
					fnUpdateLog("Newly added Group NOT found")
					testRunner.fail("Newly added Group NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Group Response", "View Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Group Response", "Add Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Group] failed with exception : "+e)
		fnUpdateLog("[Add Group] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Group] Execution Completed Successfully......."
		fnUpdateLog("[Add Group] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def String fnGetPropertyValue(String sGroupName)
	{
		String  sPropValue = ""
		try
		{
			sPropValue = testRunner.testCase.testSuite.getPropertyValue(sGroupName)
			return sPropValue;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnGetPropertyValue] failed with exception : "+e)
		}
	}
	
	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "GroupID": ${#TestCase#NewGroupId},
		    "GroupName": "${#TestCase#NewGroupName}"
		}*/]]></script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>Corp_Id</con:name><con:value>3333</con:value></con:property><con:property><con:name>Corp_Name</con:name><con:value>Test_09102015</con:value></con:property><con:property><con:name>TotalTC</con:name><con:value>8</con:value></con:property><con:property><con:name>PassTC</con:name><con:value>8</con:value></con:property><con:property><con:name>FailTC</con:name><con:value>0</con:value></con:property><con:property><con:name>TCCounter</con:name><con:value>8</con:value></con:property><con:property><con:name>TCIndexHTMLContent</con:name><con:value><![CDATA[

<tr>
<td class = "tsind" width = 20px>1</td>
<td class = "tsind" width = 60px><a class = "tcindex" href = "ViewOffices_TC.html">10013</a></td>
<td class = "tsgen" width = 200px>ViewOffices_TC</td>
<td class = "tsgen" width = 200px>Verify view Offices functionality</td>
<td class = "tsind" width = 25px>1</td>
<td class = "tsind" width = 40px>1</td>
<td class = "tsind" width = 40px>0</td>
<td class = "tsind" width = 50px><img src  =  '../../ReportRef/Images/pass.gif' width = "20" height = "20"> Pass</td>
<td class = "tsind" width = 40px>0.227 seconds</td>
<td class = "tsind" width=60px><a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Offices\Request_ViewOffices_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.gif"></a>&nbsp&nbsp&nbsp&nbsp<a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Offices\Response_ViewOffices_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.jpg"></a></td>
</tr>



<tr>
<td class = "tsind" width = 20px>2</td>
<td class = "tsind" width = 60px><a class = "tcindex" href = "AddOffice_TC.html">10014</a></td>
<td class = "tsgen" width = 200px>AddOffice_TC</td>
<td class = "tsgen" width = 200px>Verify add Office functionality</td>
<td class = "tsind" width = 25px>3</td>
<td class = "tsind" width = 40px>3</td>
<td class = "tsind" width = 40px>0</td>
<td class = "tsind" width = 50px><img src  =  '../../ReportRef/Images/pass.gif' width = "20" height = "20"> Pass</td>
<td class = "tsind" width = 40px>0.369 seconds</td>
<td class = "tsind" width=60px><a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Offices\Request_AddOffice_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.gif"></a>&nbsp&nbsp&nbsp&nbsp<a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Offices\Response_AddOffice_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.jpg"></a></td>
</tr>



<tr>
<td class = "tsind" width = 20px>3</td>
<td class = "tsind" width = 60px><a class = "tcindex" href = "DuplicateOffice_TC.html">10015</a></td>
<td class = "tsgen" width = 200px>DuplicateOffice_TC</td>
<td class = "tsgen" width = 200px>Verify duplicate Office functionality</td>
<td class = "tsind" width = 25px>2</td>
<td class = "tsind" width = 40px>2</td>
<td class = "tsind" width = 40px>0</td>
<td class = "tsind" width = 50px><img src  =  '../../ReportRef/Images/pass.gif' width = "20" height = "20"> Pass</td>
<td class = "tsind" width = 40px>0.266 seconds</td>
<td class = "tsind" width=60px><a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Offices\Request_DuplicateOffice_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.gif"></a>&nbsp&nbsp&nbsp&nbsp<a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Offices\Response_DuplicateOffice_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.jpg"></a></td>
</tr>



<tr>
<td class = "tsind" width = 20px>4</td>
<td class = "tsind" width = 60px><a class = "tcindex" href = "MaxLengthOffice_TC.html">10016</a></td>
<td class = "tsgen" width = 200px>MaxLengthOffice_TC</td>
<td class = "tsgen" width = 200px>Verify max length Office functionality</td>
<td class = "tsind" width = 25px>2</td>
<td class = "tsind" width = 40px>2</td>
<td class = "tsind" width = 40px>0</td>
<td class = "tsind" width = 50px><img src  =  '../../ReportRef/Images/pass.gif' width = "20" height = "20"> Pass</td>
<td class = "tsind" width = 40px>0.336 seconds</td>
<td class = "tsind" width=60px><a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Offices\Request_MaxLengthOffice_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.gif"></a>&nbsp&nbsp&nbsp&nbsp<a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Offices\Response_MaxLengthOffice_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.jpg"></a></td>
</tr>



<tr>
<td class = "tsind" width = 20px>5</td>
<td class = "tsind" width = 60px><a class = "tcindex" href = "ViewProperties_TC.html">10019</a></td>
<td class = "tsgen" width = 200px>ViewProperties_TC</td>
<td class = "tsgen" width = 200px>Verify view Properties functionality</td>
<td class = "tsind" width = 25px>1</td>
<td class = "tsind" width = 40px>1</td>
<td class = "tsind" width = 40px>0</td>
<td class = "tsind" width = 50px><img src  =  '../../ReportRef/Images/pass.gif' width = "20" height = "20"> Pass</td>
<td class = "tsind" width = 40px>0.173 seconds</td>
<td class = "tsind" width=60px><a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Property\Request_ViewProperties_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.gif"></a>&nbsp&nbsp&nbsp&nbsp<a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Property\Response_ViewProperties_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.jpg"></a></td>
</tr>



<tr>
<td class = "tsind" width = 20px>6</td>
<td class = "tsind" width = 60px><a class = "tcindex" href = "AddProperty_TC.html">10020</a></td>
<td class = "tsgen" width = 200px>AddProperty_TC</td>
<td class = "tsgen" width = 200px>Verify add Property functionality</td>
<td class = "tsind" width = 25px>3</td>
<td class = "tsind" width = 40px>3</td>
<td class = "tsind" width = 40px>0</td>
<td class = "tsind" width = 50px><img src  =  '../../ReportRef/Images/pass.gif' width = "20" height = "20"> Pass</td>
<td class = "tsind" width = 40px>0.612 seconds</td>
<td class = "tsind" width=60px><a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Property\Request_AddProperty_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.gif"></a>&nbsp&nbsp&nbsp&nbsp<a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Property\Response_AddProperty_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.jpg"></a></td>
</tr>



<tr>
<td class = "tsind" width = 20px>7</td>
<td class = "tsind" width = 60px><a class = "tcindex" href = "DuplicateProperty_TC.html">10021</a></td>
<td class = "tsgen" width = 200px>DuplicateProperty_TC</td>
<td class = "tsgen" width = 200px>Verify duplicate Property functionality</td>
<td class = "tsind" width = 25px>3</td>
<td class = "tsind" width = 40px>3</td>
<td class = "tsind" width = 40px>0</td>
<td class = "tsind" width = 50px><img src  =  '../../ReportRef/Images/pass.gif' width = "20" height = "20"> Pass</td>
<td class = "tsind" width = 40px>0.916 seconds</td>
<td class = "tsind" width=60px><a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Property\Request_DuplicateProperty_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.gif"></a>&nbsp&nbsp&nbsp&nbsp<a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Property\Response_DuplicateProperty_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.jpg"></a></td>
</tr>



<tr>
<td class = "tsind" width = 20px>8</td>
<td class = "tsind" width = 60px><a class = "tcindex" href = "MaxLengthProperty_TC.html">10022</a></td>
<td class = "tsgen" width = 200px>MaxLengthProperty_TC</td>
<td class = "tsgen" width = 200px>Verify max length Property functionality</td>
<td class = "tsind" width = 25px>2</td>
<td class = "tsind" width = 40px>2</td>
<td class = "tsind" width = 40px>0</td>
<td class = "tsind" width = 50px><img src  =  '../../ReportRef/Images/pass.gif' width = "20" height = "20"> Pass</td>
<td class = "tsind" width = 40px>0.264 seconds</td>
<td class = "tsind" width=60px><a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Property\Request_MaxLengthProperty_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.gif"></a>&nbsp&nbsp&nbsp&nbsp<a target = "_blank" class = "anibutton" href =  'C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM\InputOutput_JSONs\Property\Response_MaxLengthProperty_TC'"><img class = "screen" src  =  "../../ReportRef/Images/json.jpg"></a></td>
</tr>

]]></con:value></con:property></con:properties><con:setupScript>def groovyUtils=new  com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
log.info projectPath
runner.testSuite.project.setPropertyValue("Working_Directory",projectPath);
////////////////////////////////////////////////////////////////////////////////////
def sPropFileDir = new File(projectPath+"\\Properties")
log.info sPropFileDir.toString()

sPropFileDir.eachFile{ propFile ->
fname = propFile.getName()
if (fname.contains("properties"))  //just to avoid .svn folder
{
	propFile.eachLine{ line ->
	
	//log.info(newCode)
		if ((line.length()>1) &amp;&amp; !line.contains("'"))
		{
			def arrPropData=line.trim().split("::")
			runner.testSuite.project.setPropertyValue(arrPropData[0].toString(),arrPropData[1].toString())
			log.info "Setting "+ line.toString().trim()+"...."
		}
		else
		{
			if(line.length()>1){log.info "Endpoint commented out...Aborted setting"+ line.toString().trim()+"...."}
		}
	
	}
}
}
////////////////////////////////////////////////////////////////////////////////////
log.info testSuite.project.name
runner.testSuite.setPropertyValue("TotalTC","0");
runner.testSuite.setPropertyValue("PassTC","0");
runner.testSuite.setPropertyValue("FailTC","0");
runner.testSuite.setPropertyValue("TCCounter","0");
runner.testSuite.setPropertyValue("TCIndexHTMLContent","");

import java.util.*;
import java.util.Arrays 
import java.util.Date;
import java.io.*;
import org.apache.commons.lang.StringUtils;
	
def working_Directory = context.expand( '${#Project#Working_Directory}' )	 
   String sProjectName=testSuite.project.name
   def rDate = new Date();
 //def timeStamp = rDate.format('yyyyMMddHHmmss') ///One can use with datetime stamp also
 //def timeStamp = rDate.format('yyyyMMddHHmmss')
 def dateStamp = rDate.format('yyyyMMdd')
 def logFileLocn = new File(working_Directory+"\\Logs")
 if (!logFileLocn.exists())
{
	logFileLocn.mkdirs()
}
runner.testSuite.project.setPropertyValue("ProjectLog","");
runner.testSuite.project.setPropertyValue("LogFileName","");
//def logFile = new File(logFileLocn.toString()+"\\"+sProjectName+"_Log_"+dateStamp+".txt")
String sLogFileName = sProjectName+"_"+dateStamp+".log"
def logFile = new File(logFileLocn.toString()+"\\"+sLogFileName)
//def logFile = new File(sProjectName+"_"+dateStamp+".log")

log.info logFile.toString()
runner.testSuite.project.setPropertyValue("ProjectLog",logFile.toString());
runner.testSuite.project.setPropertyValue("LogFileName",sLogFileName);
if(logFile.exists())
{
logFile.append("\n**************************************************************************************************************************************************************************\n")	
}
else
{
logFile.write("********************************************************************"+sProjectName+" Logs***************************************************************************\n")
}	</con:setupScript></con:testSuite><con:testSuite id="1b36114b-c0b0-41b2-bb1f-08e94c216082" name="Function_Library_TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b31b5f8f-2527-4ee1-a469-8cac24e729b8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reporter_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Reporter_Groovy" id="632f5437-649d-4f4c-936a-a1d918129c5c"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
Date startDate = new Date();
String sHeader =  repGenerateIndexHeader("AAA","BBB","CCC")
log.info "sHeader>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"+sHeader
headerHtmlContent = repGenerateHeader("testCaseHeader","testCase", "sApplication", "testCaseDescription")
log.info "headerHtmlContent>>>>>>>>>"+headerHtmlContent
String footer = repGenerateFooter(startDate)
log.info "footer>>>>>>>>>"+footer
miniPath = "testPhase"+"_"	+ new SimpleDateFormat("MM_dd_yyyy_hh_mm_ss_a").format(new Date());
		
		def filePath = "C:\\Selenium_Workspace\\HomeDepot_Renowalk\\Results\\"+ miniPath;
		String sFolderPath = filePath; // save path of local report folder

		String shareFolderPath = "\\\\"+"sSharedServerIP"+"\\"+"testEnv"+"\\"+"MyRelease"+"\\"+"appName"+"\\"+"Results"+"\\";
		shareFolderPath = shareFolderPath + miniPath;
		
		dir = new File(filePath);
		dir.mkdir();
File indexFile = new File(filePath+"\\index.html")
		indexFile.write(sHeader+headerHtmlContent+footer)	 
String testEnv = "AAA"
String appName = "BBB"
String testPhase = "CCC"

def repGenerateIndexHeader(String testEnv, String appName, String testPhase)
	{
		String indexHeaderHtmlContent = "";
		String miniPath = null;
		String sSharedServerIP = null;
		def ttlFailCnt = 0;
		def testCnt = 0;
		def testStartDate = null;
		File dir = null;
		testStartDate = new Date();
		//log.info testEnv
		sSharedServerIP =  "MyIp";
		/*
		miniPath = testEnv+"_"
				+ appName+"_"
				+ productionType+"_"
				+ testPhase+"_"
				+ new SimpleDateFormat("MM_dd_yyyy_hh_mm_ss_a")
						.format(new Date());*/
		
		//Folder name Compatible with QTP Scripts
		

		String s = "Shameem" + "Arshad"
		log.info s
		//masterList = new ArrayList<IndexGen>();
		indexHeaderHtmlContent = "<html><head><link rel = \"stylesheet\" href = \"" +
				"../../ReportRef/css/styles.css\" /></head><body><hr class = \"divline\"><table class = \"reportheader\" width = 99%><tr><td height = 3px><img src  = '" +
				"../../ReportRef/Images/logo_en_thd.png'></td><BR><td height = 5px>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				//+ appName
				"MyReport" +
				"<BR>" +
				"<td height = 3px><img src  = '../../ReportRef/Images/logo_en_nex.png'></td>" +
				//+"<td height = 3px align = right></td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><td width = 30% class = \"subheader\" align = left>Test Phase</td><td width = 30% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 25% class = \"subheader\" align = right>Environment</td></tr><tr><td width = 30% class = \"subcontents\" align = left>"
				"<td height = 3px align = right></td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><td width = 20% class = \"subheader\" align = left>Test Phase</td><td width = 20% class = \"subheader\" align = left>Release</td><td width = 25% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 25% class = \"subheader\" align = right>Environment</td></tr><tr><td width = 20% class = \"subcontents\" align = left>" +
				testPhase +
				"</td>" +
				"<td width = 20% class = \"subcontents\" align = left>"+"MyRelease"+"</td>" +
				"<td width = 25% class = \"subcontents\">" +
				new SimpleDateFormat("MM-dd-yyyy").format(testStartDate) +
				"</td>" +
				"<td width = 15% class = \"subcontents\" align = left>" +
				"MyApplication" + "</td>" +
				"<td width = 25% class = \"subcontents\" align = right>" +
				testEnv + "</td></tr></table><hr class = \"divline\"><BR>";
				log.info indexHeaderHtmlContent
		
		return indexHeaderHtmlContent;
	}

	def repGenerateHeader(String testCaseHeader,String testCase, String sApplication, String testCaseDescription)
	{

		String headerHtmlContent = "";
		def passCnt = 0;
		def totalCnt = 0;
		def failCnt = 0;
		//incompleteCnt = 0;
		startTime = "";
		
		def startDate = new Date();

		headerHtmlContent = "<html><head><link rel = \"stylesheet\" href = \"" +
				"../../ReportRef/css/styles.css\" /></head><body><hr class = \"divline\"><table class = \"reportheader\" width = 99%><tr><td height = 3px><img src  = '" +
				"../../ReportRef/Images/logo_en_thd.png'></td><BR><td height = 5px>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				//+ appName
				"vvReportName" +
				"<BR>" +
				"<td height = 3px><img src  = '../../ReportRef/Images/logo_en_nex.png'></td>" +
				"<BR><td height = 3px align = right></td></tr></table><hr class = \"divline\">" + 
				"<BR><table class = \"subheader\" width = 99%><tr><td width = 10% class = \"subheader\" align = left>Test Id</td><td width = 35% class = \"subheader\" align = left>Test Case</td><td width = 20% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 20% class = \"subheader\" align = right>Environment</td></tr>" +
				"<tr>" +"<td width = 10% class = \"subcontents\" align = left>"+"sTest_Case_ID"+"</td>" +
				"<td width = 35% class = \"subcontents\" align = left>"+"testCase"+"</td>" +
				"<td width = 20% class = \"subcontents\">" +
				new SimpleDateFormat("MM-dd-yyyy").format(startDate) +
				"</td>" +
				"<td width = 15% class = \"subcontents\" align = left>" +
				"TestDriver.sApplication" + "</td>"+
				"<td width = 20% class = \"subcontents\" align = right>" +
				"TestDriver.sEnvironment" + "</td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><tr><td width = 99% class = \"subheader\">Test Case Description</td></tr><tr><td width = 99% class = \"subcontents\">" +
				"testCaseDescription" +
				"</td></tr></tr></table><hr class = \"divline\"><BR>";
			/*	"<BR>" +
				"<table class = \"subheader\" width = 900px>" +
				"<tr><td width = 800px class = \"subheader\">Test Case</td><td width = 600px class = \"subheader\">Execution Date</td><td width = 400px align = right class = \"subheader\">Application</td></tr><tr><td width = 400px class = \"subcontents\">"
				+ testCase
				+ "</td><td width = 300px class = \"subcontents\">"
				+ new SimpleDateFormat("MM-dd-yyyy").format(startDate)
				+ "</td><td width = 200px align = right class = \"subcontents\">"
				+ sApplication
				+ "</td></tr></table><hr class = \"divline\"> <BR><table class = \"subheader\" width = 900px><tr><tr><td width = 900px class = \"subheader\">Test Case Description</td></tr><tr><td width = 900px class = \"subcontents\">"
				+ testCaseDescription
				+ "</td></tr></tr></table><hr class = \"divline\"><BR>";*/
		return headerHtmlContent;
	}


	def repGenerateFooter(Date startDate) {
		String footer = "";
		endDate = new Date();
		def strDiff 
		def diff = (int) ((endDate.getTime() / 1000) - (startDate.getTime() / 1000));
		if ((diff / 60) != 0) {
			strDiff = ((diff / 60) + "Min" + " " + (diff % 60) + "Secs");
		} else {
			strDiff = ((diff % 60) + " " + "Secs");
		}
		
		// System.out.println("@@ Time difference @@" + diff);
		//footer = "<table class = \"tblinks\" width = 250px align = left><tr><td class = \"tsheader\">Links</td></tr><tr><td class = \"pfind\"><a href = \"index.html\">Index Page</a></td></tr></table><table width = 250px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 130px>"
		footer = "<table class = \"tblinks\" width = 200px align = left><tr><td class = \"tsheader\">My Links</td></tr><tr><td class = \"pfind\">&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<a href = "+"TestDriver.sIndexHTMLFileName"+">Go to Home Page</a></td></tr></table><table width = 320px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 200px>" +
				new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(startDate) +
				"</td></tr><tr><td class = \"pfhead\" width = 120px>End Time</td><td class = \"pfind\" width = 200px>" +
				new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(endDate) +
				"</td></tr><tr><td class = \"pfhead\" width = 120px>Duration</td><td class = \"pfind\" width = 200px>" +
				strDiff +
				"  </td></tr></table><!-- Pass Fail count--><table width = 250px class = \"pfsummary\"><tr><td colspan = 2 class = \"tsheader\">Test Case Summary</td></tr><tr><td class = \"pfhead\" width = 150px>Total Steps</td><td class = \"pfind\" width = 100px>" +
				"totalCnt" +
				"</td>	</tr><tr><td class = \"pfhead\" width = 150px>Steps Passed</td><td class = \"pfind\" width = 100px>" +
				"passCnt" +
				"</td></tr>" +
				//"<tr><td class = \"pfhead\" width = 150px>Incomplete</td><td class = \"pfind\" width = 100px>"+incompleteCnt+"</td></tr>" +
				"<tr><td class = \"pfhead\" width = 150px>Steps Failed</td><td class = \"pfind\" width = 100px>" +
				"failCnt" + "</td></tr></table><BR><BR>";
		return footer;
	}]]></script></con:config></con:testStep><con:testStep type="groovy" name="MainReporter" id="d388387c-490a-492b-a7c4-97955bede82d"><con:settings/><con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
//import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import groovy.time.*

context.setProperty("Reporter", new Reporter());
/*
Date startDate = new Date();
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	log.info "Before >>"+ working_Directory
	public static String sReportsPath = ""
	log.info "sReportsPath >>"+sReportsPath
	sReportsPath = working_Directory.toString()
	log.info "After sReportsPath>>"+sReportsPath

	*/
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
		log.info "Proj Loc >>"+ working_Directory
		
class Reporter{

    def sayHello(name)
    {
        return "Hello " + name + "!";
    }
	def getProjectLoc()
    {
    		
       	 return "Hello " + name + "!";
    }
	
	public static String strFinal=null;
	public static int iSlNo;
	static int totalCnt; // total step count
	static int passCnt; // step pass
	static int failCnt; // step fail
	//static int incompleteCnt=0; // step incomplete
	
	
	//static int warnCnt = 0;
	static int diff = 0;
	
	static int testCaseCnt = 0;
	
	public static int iTotalExecuted = 0;
	public static int iTotalPass = 0;
	public static int iTotalFail = 0;
	//public static int totalIncomplete = 0;
	public static int totalPlanned = 0;
	
	static int testPassCnt= 0;
	static int testFailCnt = 0;
	//static int testWarnCnt = 0;
	//static int testIncompleteCnt = 0;
	static int ttlPassCnt = 0;
	static int ttlFailCnt = 0;
	//static int ttlIncompleteCnt = 0;
	static int testCnt = 0;
	
	
	@SuppressWarnings("rawtypes")
	static ArrayList tc;
	static String strDiff = "";
	static String startTime = "";
	static Date startDate;
	static Date endDate;
	static Date testStartDate;
	static Date testEndDate;
	public int i;
	public String rowid;
	public static File file;
	
	//static final String PATH = FileLoc.sProjPath+"Results\\";
    //static final String REFPATH = FileLoc.sProjPath+"ReportRef\\";	
	
	//static final String PATH = FileLocSetter.sReportsPath+"Results\\";
    //static final String REFPATH = FileLocSetter.sReportsPath+"ReportRef\\";	
	
	public static String filePath; // local report testcase folder
	public static String shareFolderPath; // track shared folder path

	//public static String repGenerateIndexHeader(String testEnv, String appName, String productionType, String testPhase) throws Exception
	
	def repGenerateIndexHeader(String reportName,String testEnv, String appName, String testPhase, String release)
	{
		String indexHeaderHtmlContent = "";
		String miniPath = null;
		String sSharedServerIP = null;
		def ttlFailCnt = 0;
		def testCnt = 0;
		def testStartDate = null;
		File dir = null;
		testStartDate = new Date();
		//log.info testEnv
		sSharedServerIP =  "MyIp";
		/*
		miniPath = testEnv+"_"
				+ appName+"_"
				+ productionType+"_"
				+ testPhase+"_"
				+ new SimpleDateFormat("MM_dd_yyyy_hh_mm_ss_a")
						.format(new Date());*/
		
		//Folder name Compatible with QTP Scripts
		//masterList = new ArrayList<IndexGen>();
		try
		{
			indexHeaderHtmlContent = "<html><head><link rel = \"stylesheet\" href = \"" +
				"../../ReportRef/css/styles.css\" /></head><body><hr class = \"divline\"><table class = \"reportheader\" width = 99%><tr><td height = 3px><img src  = '" +
				"../../ReportRef/Images/logo_en_thd.png'></td><BR><td height = 5px>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				//+ appName
				reportName +
				"<BR>" +
				"<td height = 3px><img src  = '../../ReportRef/Images/logo_en_nex.png'></td>" +
				//+"<td height = 3px align = right></td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><td width = 30% class = \"subheader\" align = left>Test Phase</td><td width = 30% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 25% class = \"subheader\" align = right>Environment</td></tr><tr><td width = 30% class = \"subcontents\" align = left>"
				"<td height = 3px align = right></td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><td width = 20% class = \"subheader\" align = left>Test Phase</td><td width = 20% class = \"subheader\" align = left>Release</td><td width = 25% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 25% class = \"subheader\" align = right>Environment</td></tr><tr><td width = 20% class = \"subcontents\" align = left>" +
				testPhase +
				"</td>" +
				"<td width = 20% class = \"subcontents\" align = left>"+release+"</td>" +
				"<td width = 25% class = \"subcontents\">" +
				new SimpleDateFormat("MM-dd-yyyy").format(testStartDate) +
				"</td>" +
				"<td width = 15% class = \"subcontents\" align = left>" +
				appName + "</td>" +
				"<td width = 25% class = \"subcontents\" align = right>" +
				testEnv + "</td></tr></table><hr class = \"divline\"><BR>";
				println indexHeaderHtmlContent
		}
		catch (Exception e)
		{
			 //fnUpdateLog("Function [repGenerateIndexHeader] failed with exception : "+e)
		}
		return indexHeaderHtmlContent;
	}

	/* @@@ Generate Header for the HTML @@@ */

	def repGenerateHeader(String reportName, String testCaseId, String testCaseName, String application, String testCaseDescription, String testEnv)
	{
	
		String headerHtmlContent = "";
		def passCnt = 0;
		def totalCnt = 0;
		def failCnt = 0;
		//incompleteCnt = 0;
		startTime = "";
		
		def startDate = new Date();
		try
		{
			headerHtmlContent = "<html><head><link rel = \"stylesheet\" href = \"" +
				"../../ReportRef/css/styles.css\" /></head><body><hr class = \"divline\"><table class = \"reportheader\" width = 99%><tr><td height = 3px><img src  = '" +
				"../../ReportRef/Images/logo_en_thd.png'></td><BR><td height = 5px>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				//+ appName
				reportName +
				"<BR>" +
				"<td height = 3px><img src  = '../../ReportRef/Images/logo_en_nex.png'></td>" +
				"<BR><td height = 3px align = right></td></tr></table><hr class = \"divline\">" + 
				"<BR><table class = \"subheader\" width = 99%><tr><td width = 10% class = \"subheader\" align = left>Test Id</td><td width = 35% class = \"subheader\" align = left>Test Case</td><td width = 20% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 20% class = \"subheader\" align = right>Environment</td></tr>" +
				"<tr>" +"<td width = 10% class = \"subcontents\" align = left>"+testCaseId+"</td>" +
				"<td width = 35% class = \"subcontents\" align = left>"+testCaseName+"</td>" +
				"<td width = 20% class = \"subcontents\">" +
				new SimpleDateFormat("MM-dd-yyyy").format(startDate) +
				"</td>" +
				"<td width = 15% class = \"subcontents\" align = left>" +
				application + "</td>"+
				"<td width = 20% class = \"subcontents\" align = right>" +
				testEnv + "</td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><tr><td width = 99% class = \"subheader\">Test Case Description</td></tr><tr><td width = 99% class = \"subcontents\">" +
				testCaseDescription +
				"</td></tr></tr></table><hr class = \"divline\"><BR>";
			/*	"<BR>" +
				"<table class = \"subheader\" width = 900px>" +
				"<tr><td width = 800px class = \"subheader\">Test Case</td><td width = 600px class = \"subheader\">Execution Date</td><td width = 400px align = right class = \"subheader\">Application</td></tr><tr><td width = 400px class = \"subcontents\">"
				+ testCase
				+ "</td><td width = 300px class = \"subcontents\">"
				+ new SimpleDateFormat("MM-dd-yyyy").format(startDate)
				+ "</td><td width = 200px align = right class = \"subcontents\">"
				+ sApplication
				+ "</td></tr></table><hr class = \"divline\"> <BR><table class = \"subheader\" width = 900px><tr><tr><td width = 900px class = \"subheader\">Test Case Description</td></tr><tr><td width = 900px class = \"subcontents\">"
				+ testCaseDescription
				+ "</td></tr></tr></table><hr class = \"divline\"><BR>";*/
		}
		catch (Exception e)
		{
			 //fnUpdateLog("Function [repGenerateHeader] failed with exception : "+e)
		}
		return headerHtmlContent;
	}

	/* @@@ Generate Footer for the HTML @@@ */

	def repGenerateFooter(Date startDate, Date endDate, String totalTSCount, String passTSCount, String failTSCount) {
		String footer = "";
		String strDiff  = ""
		/*Date endDate = new Date();
		def diff = (int) ((endDate.getTime() / 1000) - (startDate.getTime() / 1000));
		if ((diff / 60) != 0) {
			strDiff = ((diff / 60) + "Min" + " " + (diff % 60) + "Secs");
		} else {
			strDiff = ((diff % 60) + " " + "Secs");
		}*/
		try
		{	
			strDiff  = TimeCategory.minus(endDate, startDate)
			// System.out.println("@@ Time difference @@" + diff);
			//footer = "<table class = \"tblinks\" width = 250px align = left><tr><td class = \"tsheader\">Links</td></tr><tr><td class = \"pfind\"><a href = \"index.html\">Index Page</a></td></tr></table><table width = 250px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 130px>"
			footer = "<table class = \"tblinks\" width = 200px align = left><tr><td class = \"tsheader\">My Links</td></tr><tr><td class = \"pfind\">&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<a href = "+"index_"+InetAddress.getLocalHost().getHostName()+".html"+">Go to Home Page</a></td></tr></table><table width = 320px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 200px>" +
				new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(startDate) +
				"</td></tr><tr><td class = \"pfhead\" width = 120px>End Time</td><td class = \"pfind\" width = 200px>" +
				new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(endDate) +
				"</td></tr><tr><td class = \"pfhead\" width = 120px>Duration</td><td class = \"pfind\" width = 200px>" +
				strDiff +
				"  </td></tr></table><!-- Pass Fail count--><table width = 250px class = \"pfsummary\"><tr><td colspan = 2 class = \"tsheader\">Test Case Summary</td></tr><tr><td class = \"pfhead\" width = 150px>Total Steps</td><td class = \"pfind\" width = 100px>" +
				totalTSCount +
				"</td>	</tr><tr><td class = \"pfhead\" width = 150px>Steps Passed</td><td class = \"pfind\" width = 100px>" +
				passTSCount +
				"</td></tr>" +
				//"<tr><td class = \"pfhead\" width = 150px>Incomplete</td><td class = \"pfind\" width = 100px>"+incompleteCnt+"</td></tr>" +
				"<tr><td class = \"pfhead\" width = 150px>Steps Failed</td><td class = \"pfind\" width = 100px>" +
				failTSCount + "</td></tr></table><BR><BR>";
		}
		catch (Exception e)
		{
			 //fnUpdateLog("Function [repGenerateFooter] failed with exception : "+e)
		}
		return footer;
	}

	/* @@@ Generate Footer for the index HTML @@@ */

	public String repGenerateIndexFooter(String sLogFileName, Date startDate, Date endDate, String totalTCCount, String passTCCount, String failTCCount) 
	{
//		System.out.println(" Inside generate index footer");
		String footer = "";
		
		def strDiff = ""
		/*
		Date endDate = new Date(); 
		def diff = (int) ((endDate.getTime() / 1000) - (startDate.getTime() / 1000));
		if ((diff / 60) != 0) {
			strDiff = ((diff / 60) + "Min" + " " + (diff % 60) + " " + "Secs");
		} else {
			strDiff = ((diff % 60) + " Secs");
		}*/
		TimeDuration tcDuration = TimeCategory.minus(endDate , startDate )
		strDiff = tcDuration.toString()
		try
		{
			footer = "<table width = 320px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 200px>" +
				 new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(startDate) +
				 "</td></tr><tr><td class = \"pfhead\" width = 120px>End Time</td><td class = \"pfind\" width = 200px>" +
				 new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(endDate) +
				 "</td></tr><tr><td class = \"pfhead\" width = 120px>Duration</td><td class = \"pfind\" width = 200px>" +
				 strDiff +
				 " </td></tr></table><table width = 250 class = \"pfsummary\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Summary</td></tr><tr><td class = \"pfhead\" width = 150px>Total Test Cases</td> <td class = \"pfind\" width = 100px>" +
				 totalTCCount +
				 "</td></tr><tr><td class = \"pfhead\" width = 150px>Test Cases Passed</td><td class = \"pfind\" width = 100px> " +
				 passTCCount +
				 "</td></tr>" +
				//+"<tr><td class = \"pfhead\" width = 150px>Incomplete Test Cases</td><td class = \"pfind\" width = 100px>"+totalIncomplete+"</td></tr>"
				"<tr><td class = \"pfhead\" width = 150px>Test Cases Failed</td><td class = \"pfind\" width = 100px>" +
				 failTCCount + "</td></tr></table>" +
				"<div class=\"right\">" +
				//"<p><b>Want to See Pass/Failure Reason?<b></p><blink><a align = right target = \"_blank\" href =  '"+ "../../logs/app.log" +
				"<p><b>Want to See Pass/Failure Reason?<b></p><blink><a align = right target = \"_blank\" href =  '"+ "../../Logs/"+sLogFileName +
				 "'\">Navigate to Logs</a></blink></div>" +
				"</body></html>";
		}
		catch (Exception e)
		{
			 //fnUpdateLog("Function [repGenerateIndexFooter] failed with exception : "+e)
		}

		return footer;
	}

	public String generateIndexTableHeader()
	{
		String tblHdr = "\n\n<BR><table width = 99% class = \"teststeps\"><tr><td class = \"tsheader\" width = 2%>S.No</td><td class = \"tsheader\" width = 6%>Test Id</td><td class = \"tsheader\" width = 20%>Test Case</td><td class = \"tsheader\" width = 20%>Description</td><td class = \"tsheader\" width = 8%>Steps</td><td class = \"tsheader\" width = 8%>Passed</td>"+
					//"<td class = \"tsheader\" width = 40px>Incomplete</td>"
					"<td class = \"tsheader\" width = 8%>Failed</td><td class = \"tsheader\" width = 10px>Status</td><td class = \"tsheader\" width = 9%>Duration</td><td class = \"tsheader\" width = 9%>JSON Files</td></tr>";
	return tblHdr;
	}

	
	public String generateTCIndexHTMLContent(String sSlNo, String sTCId, String sTCName, String sTCDesc, String sTotalSteps, String sPassSteps, String sFailSteps, String sStatus, def tcDuration, String sReqJSONPath, String sRespJSONPath)
	{
		String content = "";
		String sImgLocn = ""
		try
		{
			if(sStatus=="Pass")
			{
				sImgLocn = "../../ReportRef/Images/pass.gif"
			}
			else if(sStatus=="Fail")
			{
				sImgLocn = "../../ReportRef/Images/failed.gif"
			}
	
			content = content +
					"\n\n<tr>\n<td class = \"tsind\" width = 20px>" +
					sSlNo + 
					"</td>\n<td class = \"tsind\" width = 60px><a class = \"tcindex\" href = \"" +
					sTCName+".html\">" +
					sTCId +
					"</a></td>\n<td class = \"tsgen\" width = 200px>" +
					sTCName +
					"</td>\n<td class = \"tsgen\" width = 200px>" +
					sTCDesc +
					"</td>\n<td class = \"tsind\" width = 25px>" +
					sTotalSteps +
					"</td>\n<td class = \"tsind\" width = 40px>" +
					sPassSteps +
					"</td>\n" +
					//"<td class = \"tsind\" width = 40px>"+ masterList.get(i).getIncomplete()+ "</td>"
					"<td class = \"tsind\" width = 40px>" +
					sFailSteps +
					"</td>\n<td class = \"tsind\" width = 50px><img src  =  '" +
					sImgLocn + "' width = \"20\" height = \"20\">" +
					" "+sStatus +
					"</td>\n<td class = \"tsind\" width = 40px>" +
					tcDuration + "</td>" +
					"\n<td class = \"tsind\" width=60px><a target = \"_blank\" class = \"anibutton\" href =  '" +
					sReqJSONPath +
					"'\"><img class = \"screen\" src  =  \"" +
					"../../ReportRef/Images/json.gif\"></a>&nbsp&nbsp&nbsp&nbsp" +
					"<a target = \"_blank\" class = \"anibutton\" href =  '" +
					sRespJSONPath +
					"'\"><img class = \"screen\" src  =  \"" +
					"../../ReportRef/Images/json.jpg\"></a></td>\n</tr>\n\n";
					//"\n<td  class=\"tsind\" width=40px>"+ sALMHistory +"</td>\n</tr>\n\n";  
		}
		catch (Exception e)
		{
			 //fnUpdateLog("Function [generateTCIndexHTMLContent] failed with exception : "+e)
		}
		return content;
	}

	public String generateTCTableHeader()
	{
		String tcTblHdr = "<BR><table width = 99% class = \"teststeps\"><tr><td class = \"tsheader\" width = 5%>Step #</td><td class = \"tsheader\" width = 25%>Step Description</td><td class = \"tsheader\" width = 25%>Expected Result</td><td class = \"tsheader\" width = 25%>Actual Result</td><td class = \"tsheader\" width = 10%>Status</td><td class = \"tsheader\" width = 10%>Screen Shot</td></tr>";
	return tcTblHdr;
	}
	
	public String generateTCHTMLContent(String sStepNo, String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{
		String tcContent = "";
		String sImgLocn = ""
		
		try
		{
			if(sStatus=="Pass")
			{
				sImgLocn = "../../ReportRef/Images/pass.gif"
			}
			else if(sStatus=="Fail")
			{
				sImgLocn = "../../ReportRef/Images/failed.gif"
			}

			if(sExpResult == "" && sActualResult == "" && sStatus == "")
			{
				tcContent = tcContent +
						"<tr><td class = \"tsindlevel1\" width = 5%>" +
						sStepNo +
						"</td><td class = \"tsgenlevel1\" width = 25%>" +
						sStepDesc +
						"</td><td class = \"tsgenlevel1\" width = 25%></td><td class = \"tsgenlevel1\" width = 25%></td><td class = \"tsindlevel1\" width = 10%>&nbsp</td>" +
						"<td class = \"tsgenlevel1\" width = 10%></td>" +  //Shameem we need screenshot column just to show on the screen (but of course without screenshot)
						"</tr>";
			}
			else
			{
			tcContent = tcContent +
							 "\n\n<tr><td class = \"tsindlevel2\" width = 5%>" +
							 sStepNo +
							 "</td><td class = \"tsgen\" width = 25%>" +
							 sStepDesc +
							 " </td><td class = \"tsgen\" width = 25%>" +
							 sExpResult +
							 "</td><td class = \"tsgen\" width = 25%>" +
							 sActualResult+
							 "</td><td class = \"tsind\" width = 10%><font size  =  2 color  =  red><img src  = '" +
							 sImgLocn +
							 "' "+sStatus+"&nbsp;" +
							 "</td>" +
							 "<td class = \"tsind\" width = 10%></td>"  //screenshot td, infact not required
							// "<td class = \"tsind\" width = 10%><a target = \"_blank\" class = \"anibutton\" href =  '" +
							// "screenshotname" +
							 //"'\"><img class = \"screen\" src  =  \"" +
							// "../../ReportRef/Images/screenshot.gif\"></a></td>"
							 "</tr>\n\n";
			}
		}
		catch (Exception e)
		{
			//fnUpdateLog("FunfnUpdateLogction [generateTCHTMLContent] failed with exception : "+e)
		}

		return tcContent;
	}

	def openHTMLreport(String sFilePath) throws Exception
	{
		try {
			//String url1 = "" + filePath + "\\"+TestDriver.sIndexHTMLFileName;
			File htmlFile = new File(sFilePath);
			Desktop.getDesktop().browse(htmlFile.toURI());
		}

		catch (Exception e) {
			System.out.println(e.getMessage());
		} 
	}

	/* @@@ Generate Body content for the HTML @@@ */
/*
	//public void repAddData(String step, String stepDescription,String expectedResult, String actualResult, String status) throws Exception 
	public void repAddData(String stepDescription,String expectedResult, String actualResult, String status) throws Exception
	{
		try {
			String step = "";
		if(expectedResult.equalsIgnoreCase("") && actualResult.equalsIgnoreCase("") && status.equalsIgnoreCase(""))
			{
				mainStep++;
				step=String.valueOf(mainStep);
				subStep=0;  //If we start a new tc header like 2 and 3
			}
			else
			{
				subStep++;
				step=String.valueOf(mainStep)+"."+String.valueOf(subStep);
			}
			
		//	if(status.equals("")) subStep=0;
			
			if(status.equalsIgnoreCase("Fail"))
			{
				String fileName = "";
				testCaseStatus = false;
				
				//ReportGen re = new ReportGen();
				if (step.indexOf(".") != -1) {
					re.setStep(step);
					re.setStepDescription(stepDescription);
					re.setExpectedResult(expectedResult);
					re.setActualResult(actualResult);
					//re.setStatus(status.toUpperCase());
					re.setStatus(status);
					fileName = ScreenShotGetter.screenShotCapture(filePath);
					re.setScreenShotFileName(fileName);
					re.setTimeStamp();
				} else 
				{
					re.setStep(step);
					re.setStepDescription(stepDescription);
				}
				reportList.add(re);
			} 
					
			else 
			{
				//String fileName = "";

				//ReportGen re = new ReportGen();
				if (step.indexOf(".") != -1) {
					re.setStep(step);
					re.setStepDescription(stepDescription);
					re.setExpectedResult(expectedResult);
					re.setActualResult(actualResult);
					//re.setStatus(status.toUpperCase());
					re.setStatus(status);
					//fileName = ScreenCapture.screenShotCapture(filePath); //Shameem - Comment screenshot for Pass status
					//re.setScreenShotFileName(fileName);
					re.setTimeStamp();
				} else 
				{
					re.setStep(step);
					re.setStepDescription(stepDescription);
				}
				reportList.add(re);
			}
			
			System.out.println("["+step+"]"+"["+stepDescription+"]"+"["+expectedResult+"]"+"["+actualResult+"]"+"["+status+"]");

		} catch (Exception e) {
			System.out.println(e);
		}
		
	}	
*/
		// System.out.println("@@@ Report List Size @@@" + reportList.size());
	

	/* @@@ Generate the child test report HTML @@@ */
/*
	public void repGenerateResult(String testName, String header)	throws Exception 
	{
		
		String str = "";
		String footer = "";
		//IndexGen me = new IndexGen();

		iSlNo++;
		for (int i = 0; i < reportList.size(); i++) 
		{
			if (reportList.get(i).getStep().indexOf(".") == -1) 
			{
				str = str
						+ "<tr><td class = \"tsindlevel1\" width = 5%>"
						+ reportList.get(i).getStep()
						+ "</td><td class = \"tsgenlevel1\" width = 25%>"
						+ reportList.get(i).getStepDescription()
						+ "</td><td class = \"tsgenlevel1\" width = 25%></td><td class = \"tsgenlevel1\" width = 25%></td><td class = \"tsindlevel1\" width = 10%>&nbsp</td>"
						+"<td class = \"tsgenlevel1\" width = 10%></td>"  //Shameem we need screenshot column just to show on the screen (but of course without screenshot)
						+"</tr>";
			} else 
			{
				totalCnt++; //total test step count
				if ("Pass".equalsIgnoreCase(reportList.get(i).getStatus())) 
				{
					passCnt++; //total testcase passed
					str = str
							+ "<tr><td class = \"tsindlevel2\" width = 5%>"
							+ reportList.get(i).getStep()
							+ "</td><td class = \"tsgen\" width = 25%>"
							+ reportList.get(i).getStepDescription()
							+ " </td><td class = \"tsgen\" width = 25%>"
							+ reportList.get(i).getExpectedResult()
							+ "</td><td class = \"tsgen\" width = 25%>"
							+ reportList.get(i).getActualResult()
							+ "</td><td class = \"tsind\" width = 10%>" +" "
							+"<font size  =  2 color  =  green><img src  =  '"
							+ "../../ReportRef/Images/pass.gif'/>"
							+ " "+reportList.get(i).getStatus()
							//+ "</b></td><td class = \"tsind\" width = 50px>&nbsp</td></tr>";
							+ "</td>"
							+"<td class = \"tsind\" width = 10%></td>"  //Shameem we don't want screenshot for Pass step
							+"</tr>";
					
					
				} 
			
				
				else {
					failCnt++; //total testcase failed
					str = str
							+ "<tr><td class = \"tsindlevel2\" width = 5%>"
							+ reportList.get(i).getStep()
							+ "</td><td class = \"tsgen\" width = 25%>"
							+ reportList.get(i).getStepDescription()
							+ " </td><td class = \"tsgen\" width = 25%>"
							+ reportList.get(i).getExpectedResult()
							+ "</td><td class = \"tsgen\" width = 25%>"
							+ reportList.get(i).getActualResult()
							+ "</td><td class = \"tsind\" width = 10%><font size  =  2 color  =  red><img src  = '"
							+ "../../ReportRef/Images/failed.gif'/>"
							+ " "+reportList.get(i).getStatus()+"&nbsp;"
							+ "</td><td class = \"tsind\" width = 10%><a target = \"_blank\" class = \"anibutton\" href =  '"
							+ reportList.get(i).getScreenShotFileName()
							+ "'\"><img class = \"screen\" src  =  \""
							+ "../../ReportRef/Images/screenshot.gif\"></a></td></tr>";
				}
			}
		}

		String bTblHdr = "<BR><table width = 99% class = \"teststeps\"><tr><td class = \"tsheader\" width = 5%>Step #</td><td class = \"tsheader\" width = 25%>Step Description</td><td class = \"tsheader\" width = 25%>Expected Result</td><td class = \"tsheader\" width = 25%>Actual Result</td><td class = \"tsheader\" width = 10%>Status</td><td class = \"tsheader\" width = 10%>Screen Shot</td></tr>";
		footer = repGenerateFooter();
		file = new File(filePath + "\\" + testName + ".html");
		System.out.println("HTML test case report: " + file);
		BufferedWriter bw = new BufferedWriter(new FileWriter(file));
		String output = header
				+ "<body><table BORDER = 1 CELLPADDING = 3 CELLSPACING = 1 WIDTH = 99%>"
				+ bTblHdr + str + "</table><BR><BR>" + footer
				+ "</body></html>";
		bw.write(output);
		bw.close();


		me.setSlNo(iSlNo);
		me.setTestId(sTest_Case_ID); //Added by Shameem - New changes
		me.setTestCase(sTest_Case_Name);
		me.setTestDesc(sTest_Case_Description);
		me.setSteps(totalCnt); // total count of steps in Index
		me.setPass(passCnt); // total count of pass steps in Index
		//me.setIncomplete(incompleteCnt);
		me.setFail(failCnt); // total count of fail steps in Index
		

		if (failCnt == 0) {
			me.setStatus("Pass");
			System.out.println("Passed");

		} 
		else {
			me.setStatus("Fail");
			System.out.println("Failed");
		}
		
		try {
			String sALMUpdate = TestDriver.mEnvSheetData.get(TestDriver.iMasterRowId).get("ALMUpdate").toString().trim();
			if(sALMUpdate.equalsIgnoreCase("Y"))
			{
				fnALMUpdate(me, testName);
			}
			else
			{
				strFinal =  "ALM Connection Disabled";
			}
				
		} catch (Exception e) {
			System.out.println("ALM Update Failed. Check credentials and ensure proper connectivity");
			TestDriver.log.error("ALM Update Failed. Check credentials and ensure proper connectivity",e);
		}
		
		me.setDuration(strDiff);
		me.setHistory(strFinal);
		masterList.add(me);
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		//me.setDuration(strDiff);
		///masterList.add(me);

	}
*/	
/*	
	//@SuppressWarnings("static-access")
	public void fnALMUpdate(IndexGen me, String testName) throws Exception
	{
		try {
			ALMUtil almUtil ;
			//almUtil = new almUtil("Root\\SA", "SA_TS");
			//almUtil = new ALMUtil(TestDriver.prop.getProperty("almTestSetPath"), TestDriver.prop.getProperty("almTestSet"));
			String sBrowser = TestDriver.mEnvSheetData.get(TestDriver.iMasterRowId).get("Browser").toString().trim();
			almUtil = new ALMUtil(TestDriver.prop.getProperty("almTestSetPath").replaceAll("Browser", sBrowser), TestDriver.prop.getProperty("almTestSet").replaceAll("Browser", sBrowser));
			String almTestCase=testName;
			strFinal="";
			
			try {
				almUtil.openConnection(TestDriver.prop.getProperty("almUrl"), TestDriver.prop.getProperty("almDomain"), TestDriver.prop.getProperty("almProject"), TestDriver.prop.getProperty("almUser"), TestDriver.prop.getProperty("almPassword"));
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			almTestCase="[1]" +almTestCase;

			if (failCnt == 0) {
				almUtil.updateTestCaseStatusToALM(almTestCase, "Passed");
				System.out.println("ALM Passed");

			} 
			else {
				almUtil.updateTestCaseStatusToALM(almTestCase, "Failed");
				System.out.println("ALM Failed");
			}
			
			//************
					try
					{
						//Collections.reverse(almUtil.PreviousResult);   //Now not needed, we are already getting Run Id in descending order
					} catch(Exception e) 
					{
						
					}
					
					int PreviousResultCount = ALMUtil.PreviousResult.size();
					
					if(PreviousResultCount>5){
						PreviousResultCount=5;
					}
						
					
				//**************
					
					System.out.println("Size "+PreviousResultCount);
					
					if(PreviousResultCount!=0)
					{
						for(int i=0;i<PreviousResultCount;i++)
						{
							String sALMStatus = ALMUtil.PreviousResult.get(i).toString().trim();
							if(sALMStatus.contains("P"))
							{
								strFinal = strFinal + ","+ "<font color=\"green\"><b>" + sALMStatus + "</b></font>";
							}
							else if(sALMStatus.contains("F"))
							{
								strFinal = strFinal + ","+ "<font color=\"red\"><b>" + sALMStatus + "</b></font>";
							}
								
						}
						strFinal = strFinal.substring(1);
						System.out.println(strFinal);
					}
					else
					{
						strFinal =  "No History Available";
					}
					
					//*****************************************************************************************
					almUtil.releaseALMConnection();
					
					ALMUtil.PreviousResult.clear();
		
			
		} catch (Exception e) {
			System.out.println("fnALMUpdate--------------Failed");
			TestDriver.log.error("fnALMUpdate--------------Failed",e);
		}	
	}
*/
	// @@@ Generate the index report HTML @@@ 
/*

	
	

	public static void openHTMLreport() throws Exception
	{
		try {
			String url1 = "" + filePath + "\\"+TestDriver.sIndexHTMLFileName;
			File htmlFile = new File(url1);
			Desktop.getDesktop().browse(htmlFile.toURI());
		}

		catch (Exception e) {
			System.out.println(e.getMessage());
		} 
	}

	public static String getCurrentTimeStamp(String format) {
	    SimpleDateFormat sdfDate = new SimpleDateFormat(format);  // "MM/dd/yyyy"
	    Date now = new Date();
	    String strDate = sdfDate.format(now);
	    return strDate;
	}
*/





	
/*	// copy report folder from Local to share machine
	public void createTestResultsWithTimestamp(String filePath) 
	{
		System.out.println("Creating another copy of test results with timestamp...");
		try {

			String xCopyCommand = "xcopy /i  \"" + filePath + "\"" + " " + "\""	+ shareFolderPath + "\"";
			System.out.println(xCopyCommand);
			@SuppressWarnings("unused")
			Process process = Runtime.getRuntime().exec(xCopyCommand); 
			
		} catch (IOException ioe) {
			System.out.println("Error occurred while making a copy of test results with timestamp::: "+ ioe.getMessage());
		} 
		System.out.println("END - Creating another copy of test results with timestamp...");
		sHtmlLink = shareFolderPath + "\\" + TestDriver.sIndexHTMLFileName + ";"; // link to index.html in share machine
	}

*/
	//////////////////////////////////////////////////////////////////////Initial Running Code///////////////////////////////////////////

/*
	def repGenerateHeader(String testCaseHeader,String testCase, String sApplication, String testCaseDescription)
	{

		String headerHtmlContent = "";
		def passCnt = 0;
		def totalCnt = 0;
		def failCnt = 0;
		//incompleteCnt = 0;
		def startTime = "";
		
		def startDate = new Date();

		headerHtmlContent = "<html><head><link rel = \"stylesheet\" href = \"" +
				"../../ReportRef/css/styles.css\" /></head><body><hr class = \"divline\"><table class = \"reportheader\" width = 99%><tr><td height = 3px><img src  = '" +
				"../../ReportRef/Images/logo_en_thd.png'></td><BR><td height = 5px>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
				//+ appName
				"vvReportName" +
				"<BR>" +
				"<td height = 3px><img src  = '../../ReportRef/Images/logo_en_nex.png'></td>" +
				"<BR><td height = 3px align = right></td></tr></table><hr class = \"divline\">" + 
				"<BR><table class = \"subheader\" width = 99%><tr><td width = 10% class = \"subheader\" align = left>Test Id</td><td width = 35% class = \"subheader\" align = left>Test Case</td><td width = 20% class = \"subheader\">Execution Date</td><td width = 15% align = left class = \"subheader\">Application</td><td width = 20% class = \"subheader\" align = right>Environment</td></tr>" +
				"<tr>" +"<td width = 10% class = \"subcontents\" align = left>"+"sTest_Case_ID"+"</td>" +
				"<td width = 35% class = \"subcontents\" align = left>"+"testCase"+"</td>" +
				"<td width = 20% class = \"subcontents\">" +
				new SimpleDateFormat("MM-dd-yyyy").format(startDate) +
				"</td>" +
				"<td width = 15% class = \"subcontents\" align = left>" +
				"TestDriver.sApplication" + "</td>"+
				"<td width = 20% class = \"subcontents\" align = right>" +
				"TestDriver.sEnvironment" + "</td></tr></table><hr class = \"divline\"><BR><table class = \"subheader\" width = 99%><tr><tr><td width = 99% class = \"subheader\">Test Case Description</td></tr><tr><td width = 99% class = \"subcontents\">" +
				"testCaseDescription" +
				"</td></tr></tr></table><hr class = \"divline\"><BR>";
*/			/*	"<BR>" +
				"<table class = \"subheader\" width = 900px>" +
				"<tr><td width = 800px class = \"subheader\">Test Case</td><td width = 600px class = \"subheader\">Execution Date</td><td width = 400px align = right class = \"subheader\">Application</td></tr><tr><td width = 400px class = \"subcontents\">"
				+ testCase
				+ "</td><td width = 300px class = \"subcontents\">"
				+ new SimpleDateFormat("MM-dd-yyyy").format(startDate)
				+ "</td><td width = 200px align = right class = \"subcontents\">"
				+ sApplication
				+ "</td></tr></table><hr class = \"divline\"> <BR><table class = \"subheader\" width = 900px><tr><tr><td width = 900px class = \"subheader\">Test Case Description</td></tr><tr><td width = 900px class = \"subcontents\">"
				+ testCaseDescription
				+ "</td></tr></tr></table><hr class = \"divline\"><BR>";*/
/*		return headerHtmlContent;
	}
*/
/*
	def repGenerateFooter(Date startDate) {
		String footer = "";
		Date endDate = new Date();
		def strDiff 
		def diff = (int) ((endDate.getTime() / 1000) - (startDate.getTime() / 1000));
		if ((diff / 60) != 0) {
			strDiff = ((diff / 60) + "Min" + " " + (diff % 60) + "Secs");
		} else {
			strDiff = ((diff % 60) + " " + "Secs");
		}
		
		// System.out.println("@@ Time difference @@" + diff);
		//footer = "<table class = \"tblinks\" width = 250px align = left><tr><td class = \"tsheader\">Links</td></tr><tr><td class = \"pfind\"><a href = \"index.html\">Index Page</a></td></tr></table><table width = 250px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 130px>"
		footer = "<table class = \"tblinks\" width = 200px align = left><tr><td class = \"tsheader\">My Links</td></tr><tr><td class = \"pfind\">&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<a href = "+"TestDriver.sIndexHTMLFileName"+">Go to Home Page</a></td></tr></table><table width = 320px class = \"tbtime\"><tr><td colspan = 2 class = \"tsheader\">Test Execution Time</td></tr><tr><td class = \"pfhead\" width = 120px>Start Time</td><td class = \"pfind\" width = 200px>" +
				new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(startDate) +
				"</td></tr><tr><td class = \"pfhead\" width = 120px>End Time</td><td class = \"pfind\" width = 200px>" +
				new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(endDate) +
				"</td></tr><tr><td class = \"pfhead\" width = 120px>Duration</td><td class = \"pfind\" width = 200px>" +
				strDiff +
				"  </td></tr></table><!-- Pass Fail count--><table width = 250px class = \"pfsummary\"><tr><td colspan = 2 class = \"tsheader\">Test Case Summary</td></tr><tr><td class = \"pfhead\" width = 150px>Total Steps</td><td class = \"pfind\" width = 100px>" +
				"totalCnt" +
				"</td>	</tr><tr><td class = \"pfhead\" width = 150px>Steps Passed</td><td class = \"pfind\" width = 100px>" +
				"passCnt" +
				"</td></tr>" +
				//"<tr><td class = \"pfhead\" width = 150px>Incomplete</td><td class = \"pfind\" width = 100px>"+incompleteCnt+"</td></tr>" +
				"<tr><td class = \"pfhead\" width = 150px>Steps Failed</td><td class = \"pfind\" width = 100px>" +
				"failCnt" + "</td></tr></table><BR><BR>";
		return footer;
	}
*/
	def fnUpdateLog(String sLogContent)
	{
		def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
		def logFile = new File(logFileLocn)
		logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
	}
} //End of class]]></script></con:config></con:testStep><con:testStep type="groovy" name="DummyReporter" id="d507d502-4ce8-4dd7-8b61-0c16b1512916"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
//import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

context.setProperty("Reporter", new Reporter());
def working_Directory = context.expand( '${#Project#Working_Directory}' )
log.info working_Directory
String sReportsPath = working_Directory
	log.info "sReportsPath >>"+sReportsPath
/*
Date startDate = new Date();
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	log.info "Before >>"+ working_Directory
	public static String sReportsPath = ""
	log.info "sReportsPath >>"+sReportsPath
	sReportsPath = working_Directory.toString()
	log.info "After sReportsPath>>"+sReportsPath

	*/
class Reporter{

	
    def sayHello(name)
    {
        return "Hello " + name + "!";
    }
	def getProjectLoc()
    {
    		
		//log.info "Proj Loc >>"+ working_Directory
       	 return "Hello " + sReportsPath + "!";
    }
}</script></con:config></con:testStep><con:testStep type="groovy" name="Hostname_TimeDiff" id="e1afe062-56e2-44f8-b100-e203409ddfcf"><con:settings/><con:config><script>log.info InetAddress.getLocalHost().getHostName()

import groovy.time.*

def timeStart = new Date()
// Some code you want to time
sleep 2000
def timeStop = new Date()
def duration = TimeCategory.minus(timeStop, timeStart)
log.info duration</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="9993b99b-e41d-4527-993d-e35b3839fa20" name="Corporations_TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="95d66e10-f35d-4f23-b4c4-67f5a2b1d111" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ViewCorporations_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ViewCorporations_Groovy" id="3ff56434-e6a8-474a-819a-aeded684793e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat;
import groovy.time.*

scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

/*
fnGenerateTCStepsReport("Verify View Corporation", "", "", "")
fnGenerateTCStepsReport("sStepDesc1", "sExpResult1", "sActualResult1", "Pass")
*/



	log.info "[View Corporation] Execution Started.........." 
	fnUpdateLog("[View Corporation] Execution Started..........")
	fnGenerateTCStepsReport("Verify View Corporation", "", "", "")
	
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	log.info sTSName
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	try
	{
		fnRunRequest("ViewCorporations");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewCorporations#Request}')
		def responseContent = context.expand('${ViewCorporations#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		//def request_EnableHotspot = context.expand('${initiateEnableHotSpot#Request}')
		//def response_EnableHotspot = context.expand('${initiateEnableHotSpot#Response}')
	
		//def VIN = context.expand( '${#TestSuite#VIN}' ) 
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			///////////////////Start - Parse JSON and get the size of Corporation List///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
			
			def iMaxCorpId = 0
			jsonResponse["CorporateItems"].each
			{ 
				//log.info "Data for Row>> "+ i.toString() +"  "+it
				if(it.CorporateID >iMaxCorpId)
				{
					iMaxCorpId = it.CorporateID
				}
				//log.info "CorporateID>>>>>>>>>>>>>>>>>>>>>"+ it.CorporateID 
				//log.info "CorporateName>>>>>>>>>>>>>>>>>>>"+ it.CorporateName	
			}
			log.info "Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId 
			fnUpdateLog("Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId)
			
			int iCorportionListSize = jsonResponse["CorporateItems"].size()
			log.info "Corporation List Size>>>>>>>>>>>>>>>>> "+iCorportionListSize.toString()
			//Write DB code here to validate the total number of records
		
			if(iCorportionListSize&lt;=0)
			{
				fnGenerateTCStepsReport("Verify Corporation List", "Corporation list should be retrieved", "Corporation list NOT retrieved", "Fail")
				testRunner.fail("No Corporation found..Check the View Corporation service and try again..")
				log.info "No Corporation found..Check the View Corporation service and try again.."
				fnUpdateLog("No Corporation found..Check the View Corporation service and try again..")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Corporation List", "Corporation list should be retrieved", "Corporations retrieved successfully with total size of : "+iCorportionListSize.toString(), "Pass")
				testRunner.testCase.setPropertyValue("TotalCorporations",iCorportionListSize.toString())
				log.info "Corporations retrieved successfully with total size of : "+iCorportionListSize.toString()
				fnUpdateLog("Corporations retrieved successfully with total size of : "+iCorportionListSize.toString())
			}
	  
		}
		else
		{
			fnGenerateTCStepsReport("Verify View Corporation Response", "View Corporation response should be retrieved", "Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[View Corporations] failed with exception : "+e)
		fnUpdateLog("[View Corporations] failed with exception : "+e)
	}
	finally
	{
		log.info "[View Corporation] Execution Completed Successfully......." 
		fnUpdateLog("[View Corporation] Execution Completed Successfully.......\n")
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//def responseContent = testRunner.testCase.getTestStepByName("ViewCorporations").getPropertyValue("response")
	//log.info responseContent



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" &amp;&amp; sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}
</script></con:config></con:testStep><con:testStep type="restrequest" name="ViewCorporations" id="336de739-a973-4c2c-9c51-42ce22074f20" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Corporate" methodName="ViewCorporations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewCorporations" id="84117eed-e671-481b-b13e-b8ad20fb3df8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Callee" id="c8b8d084-a2ec-453b-bdb8-269013bcb9ed" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
//scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
scripts.testCases["Reporter_TC"].testSteps["DummyReporter"].run(testRunner, context);
String sMsg = context.Reporter.sayHello("Kerry")
context.Reporter.getProjectLoc()
/*
Date startDate = new Date();
String sHeader =  context.Reporter.repGenerateIndexHeader("AAA","BBB","CCC")
log.info "sHeader>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"+sHeader

headerHtmlContent = context.Reporter.repGenerateHeader("testCaseHeader","testCase", "sApplication", "testCaseDescription")
log.info "headerHtmlContent>>>>>>>>>"+headerHtmlContent

String footer = context.Reporter.repGenerateFooter(startDate)
log.info "footer>>>>>>>>>"+footer
miniPath = "testPhase"+"_"	+ new SimpleDateFormat("MM_dd_yyyy_hh_mm_ss_a").format(new Date());
		
		def filePath = "C:\\Selenium_Workspace\\HomeDepot_Renowalk\\Results\\"+ miniPath;
		String sFolderPath = filePath; // save path of local report folder

		String shareFolderPath = "\\\\"+"sSharedServerIP"+"\\"+"testEnv"+"\\"+"MyRelease"+"\\"+"appName"+"\\"+"Results"+"\\";
		shareFolderPath = shareFolderPath + miniPath;
		
		dir = new File(filePath);
		dir.mkdir();
File indexFile = new File(filePath+"\\index.html")
		indexFile.write(sHeader+headerHtmlContent+footer)	 


String sMsg = context.Reporter.sayHello("Kerry")
log.info(sMsg);*/</script></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("TotalCorporations","0")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")
</con:setupScript><con:tearDownScript>log.info "View Corporation Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////////////////////////////////////////////

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalCorporations</con:name><con:value>14</con:value></con:property><con:property><con:name>NewCorpId</con:name><con:value>422</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify View Corporation</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Corporation List </td><td class = "tsgen" width = 25%>Corporation list should be retrieved</td><td class = "tsgen" width = 25%>Corporations retrieved successfully with total size of : 14</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property></con:properties></con:testCase><con:testCase id="d5c95f62-1926-42ca-892a-dc58ca611268" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AddCorporation_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="AddCorporation_Groovy" id="c9e1c8e2-0c32-4c0f-b5f1-4c4af9d9343f"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	log.info "[Add Corporation] Execution Started.........." 
	fnUpdateLog("[Add Corporation] Execution Started..........")
	fnGenerateTCStepsReport("Verify Add Corporation", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewCorpName = ""
	def sCorporateID = ""
	try
	{
		fnRunRequest("ViewCorporations");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewCorporations#Request}')
		def responseContent = context.expand('${ViewCorporations#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max CorpId and set at test case level property NewCorpId,NewCorpName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxCorpId = 0
			int iCorportionListSize = jsonResponse["CorporateItems"].size()
			
			jsonResponse["CorporateItems"].each
			{ 
				//log.info it
				if(it.CorporateID >iMaxCorpId)
				{
					iMaxCorpId = it.CorporateID
				}
				//log.info "CorporateID>>>>>>>>>>>>>>>>>>>>>"+ it.CorporateID 
				//log.info "CorporateName>>>>>>>>>>>>>>>>>>>"+ it.CorporateName	
			}
			log.info "Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId 
			fnUpdateLog("Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId)
			log.info "Total Corporations before Add : "+iCorportionListSize.toString()
			fnUpdateLog("Total Corporations before Add : "+iCorportionListSize.toString())
		
			int iRandomNum = fnRandomNum(10001,99999);
			sNewCorpName = "AutoTestCorporation_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewCorpName",sNewCorpName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Corporation Response", "View Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation..");
		}
		//Start - Adding a new Corporation
		fnRunRequest("AddCorporation");
		
		requestContent = context.expand('${AddCorporation#Request}')
		log.info requestContent
		responseContent = context.expand('${AddCorporation#Response}')
		log.info responseContent


	def sRespHeaderData = testRunner.testCase.testSteps["AddCorporation"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");

		/*
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value
			*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddCorporation", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			//if(sKey=="Status" && sValue=="Action: Corporate Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Corporation Header Response", "Corporation should be created with proper header response", "Corporation : "+sNewCorpName+" added successfully", "Pass")
				log.info "Corporation : "+sNewCorpName+" added successfully"	
				fnUpdateLog("Corporation : "+sNewCorpName+" added successfully")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Corporation Response", "Corporation should be created with proper header response", "Corporation : "+sNewCorpName+" NOT added", "Fail")
				log.info "Corporation : "+sNewCorpName+" NOT added"
				fnUpdateLog("Corporation : "+sNewCorpName+" NOT added")
				testRunner.fail("Corporation : "+sNewCorpName+" NOT added")
			}
			//End - Adding a new Corporation
		
			//sleep(1000)
			//Start - Verify newly added Corporation
			boolean bFlag = false
			fnRunRequest("ViewCorporations");
			requestContent = context.expand('${ViewCorporations#Request}')
			responseContent = context.expand('${ViewCorporations#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iCorportionListSize = jsonResponse["CorporateItems"].size()
				log.info "Total Corporations After Add : "+iCorportionListSize.toString()
				fnUpdateLog("Total Corporations After Add : "+iCorportionListSize.toString())
				
				jsonResponse["CorporateItems"].find
				{ 
					//log.info it
					//if(it.CorporateID == 367 && it.CorporateName == "TestCorporation_367" )  //Just for testing
					//if(it.CorporateID.toString() == iNewCorpId.toString() && it.CorporateName.toString() == sNewCorpName )
					if(it.CorporateName.toString() == sNewCorpName )
					{
						bFlag = true
						sCorporateID = it.CorporateID.toString()
						//log.info "Actual Corp Id : "+it.CorporateID.toString() +" matches with Expected Corp Id : "+iNewCorpId.toString()
						//fnUpdateLog("Actual Corp Id : "+it.CorporateID.toString() +" matches with Expected Corp Id : "+iNewCorpId.toString() )
						fnGenerateTCStepsReport("Verify Corporation Name in View Corporation Response", "Actual Corp name should match with Expected Corp name ", "Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName, "Pass")
						log.info "Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName
						fnUpdateLog("Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName)
						return true
					}	
				}
			
				if(bFlag == true)
				{
					//testRunner.testCase.testSuite.project.testSuites["Offices_TS"].testCases["AddOffice_TC"].setPropertyValue("CorporateID",sCorporateID)
					//testRunner.testCase.testSuite.project.testSuites["Offices_TS"].testCases["AddOffice_TC"].setPropertyValue("NewCorpName",sNewCorpName)
					testRunner.testCase.testSuite.project.testSuites["Offices_TS"].setPropertyValue("CorporateID",sCorporateID)
					testRunner.testCase.testSuite.project.testSuites["Offices_TS"].setPropertyValue("NewCorpName",sNewCorpName)
					fnGenerateTCStepsReport("Validate Newly Added Corporation ", "Newly added Corporation should be validated", "Newly added Corporation validated successfully", "Pass")
					log.info "Newly added Corporation validated successfully"
					fnUpdateLog("Newly added Corporation validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Corporation ", "Newly added Corporation should be validated", "Newly added Corporation NOT validated. Corporation NOT found.", "Fail")
					log.info "Newly added Corporation NOT found"
					fnUpdateLog("Newly added Corporation NOT found")
					testRunner.fail("Newly added Corporation NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Corporation Response", "View Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Corporation Response", "Add Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Corporations] failed with exception : "+e)
		fnUpdateLog("[Add Corporations] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Corporation] Execution Completed Successfully......."
		fnUpdateLog("[Add Corporation] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

	def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
	{	
		try
		{
			def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
			log.info "Headers>>>>>>>"+respHeaders
			String sRespHeaderData = ""
			boolean bFlag = false
			for (header in respHeaders)
			{
				log.info header //<- prints all headers
				def (sHeader, sValue) = header.toString().tokenize( '=' )
				log.info sHeader 
				log.info sValue
				sValue=sValue.replaceAll("\\[","")
				sValue=sValue.replaceAll("\\]","")
				if(sExpHeader==sHeader && sExpValue==sValue)
				{
					bFlag = true
				}
				sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
			}
			sRespHeaderData = "["+sRespHeaderData.trim()+"]"
			log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
			return [sRespHeaderData,bFlag] ;
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
			testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
		}
	
		

}
		/*	{
		    "CorporateID": ${#TestCase#NewCorpId},
		    "CorporateName": "${#TestCase#NewCorpName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddCorporation" id="83914c31-1db0-45ba-a90c-5eec009b7fc7" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Corporate" methodName="AddCorporation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddCorporation" id="cf639bdd-55f7-435f-9406-342efaa36c60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
    "CorporateName": "${#TestCase#NewCorpName}"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:assertion type="GroovyScriptAssertion" id="e4219a6b-f1ed-466c-ab4b-8250e7c3ee14" name="Script Assertion"><con:configuration><scriptText>log.info messageExchange.getRequestContent().toString()

for (header in messageExchange.getResponseHeaders())
{
	log.info header //&lt;- prints all headers
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewCorporations" id="1a3297d4-8349-4dc5-9c73-e8b5966b1f34" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Corporate" methodName="ViewCorporations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewCorporations" id="84117eed-e671-481b-b13e-b8ad20fb3df8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Content-Type" value="application/json"/>
  <con:entry key="Accept" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="adf47010-3b63-4ce4-be1e-013cdcfe685c" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper
def requestContent = context.expand('${ViewCorporations#Request}')
		def responseContent = context.expand('${ViewCorporations#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent


		def rawRequest= context.expand('${ViewCorporations#RawRequest}')
		log.info "rawRequest>>>>"+rawRequest
log.info "RawRequest>>>>>>>"+context.testCase.getTestStepAt(1).getProperty("Response").getValue() 
def value = testRunner.testCase.testSteps["AddCorporation"].testRequest.response.responseHeaders
log.info "Headers>>>>>>>"+value

for (header in value)
{
	log.info header //&lt;- prints all headers
	def (value1, value2) = header.toString().tokenize( '=' )
	log.info value1 
	log.info value2
}
 def header = testRunner.testCase.testSteps["AddCorporation"].testRequest.getRequestHeaders()
</script></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewCorpId","0")
testCase.setPropertyValue("NewCorpName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalCorporations","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Add Corporation Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>NewCorpId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewCorpName</con:name><con:value>AutoTestCorporation_60061</con:value></con:property><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalCorporations</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Add Corporation</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Add Corporation Header Response </td><td class = "tsgen" width = 25%>Corporation should be created with proper header response</td><td class = "tsgen" width = 25%>Corporation : AutoTestCorporation_60061 added successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Corporation Name in View Corporation Response </td><td class = "tsgen" width = 25%>Actual Corp name should match with Expected Corp name </td><td class = "tsgen" width = 25%>Actual Corp Name : AutoTestCorporation_60061 matches with Expected Corp Name : AutoTestCorporation_60061</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.3</td><td class = "tsgen" width = 25%>Validate Newly Added Corporation  </td><td class = "tsgen" width = 25%>Newly added Corporation should be validated</td><td class = "tsgen" width = 25%>Newly added Corporation validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property></con:properties></con:testCase><con:testCase id="7c8ebbe6-6c03-4f82-b674-e77b883ca888" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DuplicateCorporation_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DuplicateCorporation_Groovy" id="8ce550c9-c0f6-49ab-87f9-aa5a1f1b4a24"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
	
	log.info "[Duplicate Corporation] Execution Started.........." 
	fnUpdateLog("[Duplicate Corporation] Execution Started.........." )
	fnGenerateTCStepsReport("Verify Duplicate Corporation", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();

	try
	{
		fnRunRequest("ViewCorporations");
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewCorporations#Request}')
		def responseContent = context.expand('${ViewCorporations#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		
		//jsonRequest = new JsonSlurper().parseText(requestContent)
	
		///////////////////Start - Parse JSON and get Max CorpId and set at test case level property NewCorpId,NewCorpName///////////////////
		def iMaxCorpId = 0
		def sLatestCorpName = ""
		def sNewCorpName =""
		
		if (responseContent!="")
		{
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			int iCorportionListSize = jsonResponse["CorporateItems"].size()
			log.info "Total Corporations Before Duplicate Add Attempt : "+iCorportionListSize.toString()
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Total Corporations Before Duplicate Add Attempt : "+iCorportionListSize.toString()  +".\n")
			fnUpdateLog("Total Corporations Before Duplicate Add Attempt : "+iCorportionListSize.toString() )
			
			jsonResponse["CorporateItems"].each
			{ 
				//log.info it
				if(it.CorporateID >iMaxCorpId)
				{
					iMaxCorpId = it.CorporateID
					sLatestCorpName = it.CorporateName
				}
				//log.info "CorporateID>>>>>>>>>>>>>>>>>>>>>"+ it.CorporateID 
				//log.info "CorporateName>>>>>>>>>>>>>>>>>>>"+ it.CorporateName	
			}
			log.info "Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId  +".\n")
			fnUpdateLog("Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId )
			log.info "Latest Corporate Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestCorpName  
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Latest Corporate Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestCorpName    +".\n")
			fnUpdateLog("Latest Corporate Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestCorpName  )
	
			sNewCorpName = sLatestCorpName;
			testRunner.testCase.setPropertyValue("NewCorpName",sNewCorpName)
		}
		else
		{
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation..\n"
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation..\n");
		}
		
	
		//Start - Adding a new Corporation
		fnRunRequest("AddCorporation");
	
		requestContent = context.expand('${AddCorporation#Request}')
		log.info requestContent
		responseContent = context.expand('${AddCorporation#Response}')
		log.info responseContent
		
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sCode = jsonResponse.code
			String sStatus = jsonResponse.status
			String sErrors = jsonResponse.errors
			log.info sCode+sStatus+sErrors
			//if(sKey=="Status" && sValue=="Add Corporate Failed")
			
			if(sCode=="RQ500" && sStatus=="500")
			{
				fnGenerateTCStepsReport("Verify Duplicate Corporation Response", "Duplicate Corporation response should throw errors", "Duplicate Corporation NOT added and response has errors", "Pass")
				log.info "Duplicate Corporation : "+sNewCorpName+" NOT added successfully"
				fnUpdateLog("Duplicate Corporation : "+sNewCorpName+" NOT added successfully")	
			}
			else
			{	
				fnGenerateTCStepsReport("Verify Duplicate Corporation Response", "Duplicate Corporation response should throw errors", "Duplicate Corporation added and response has NO errors", "Fail")
				log.info "Duplicate Corporation : "+sNewCorpName+" should NOT be added"
				fnUpdateLog("Duplicate Corporation : "+sNewCorpName+" should NOT be added")	
				testRunner.fail("Duplicate Corporation : "+sNewCorpName+" should NOT be added")
			}
			//End - Adding a new Corporation
		
			//Start - Verify newly added Corporation
			boolean bFlag = true
			fnRunRequest("ViewCorporations");
			requestContent = context.expand('${ViewCorporations#Request}')
			responseContent = context.expand('${ViewCorporations#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
			
		
				iCorportionListSize = jsonResponse["CorporateItems"].size()
				log.info "Total Corporations After Duplicate Add Attempt : "+iCorportionListSize.toString()
				fnUpdateLog("Total Corporations After Duplicate Add Attempt : "+iCorportionListSize.toString())	
			
				int iDupCorpCount = 0 
				
				jsonResponse["CorporateItems"].find
				{ 
					//log.info it
					//if(it.CorporateID == 367 && it.CorporateName == "TestCorporation_367" )  //Just for testing
					//if(it.CorporateID == iNewCorpId && it.CorporateName == sNewCorpName )  //No need to validate on Corp Id, It's auto generated by DB
					if(it.CorporateName == sNewCorpName )
					{	
						iDupCorpCount = iDupCorpCount +1
						bFlag = false
						//log.info "Actual Corp Id : "+it.CorporateID.toString() +" matches with Expected Corp Id : "+iNewCorpId.toString()+" It should NOT be added."
						//fnUpdateLog("Actual Corp Id : "+it.CorporateID.toString() +" matches with Expected Corp Id : "+iNewCorpId.toString()+" It should NOT be added.")
						if(iDupCorpCount>=2)
						{	
							fnGenerateTCStepsReport("Verify Corporation Name in View Corporation Response", "Corporation should NOT be added ", "Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName+". It should NOT be added.", "Fail")
							log.info "Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName+" It should NOT be added."
							fnUpdateLog("Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName+" It should NOT be added.")
						}
						//return true  //Look for two duplocate corporations
					}	
				}
				
				log.info "iDupCorpCount>>>>>>>>>>>>>>>"+iDupCorpCount
				if(bFlag == false && iDupCorpCount>=2)
				{
					fnGenerateTCStepsReport("Verify Duplicate Corporation Name in View Corporation Response", "Duplicate Corporation should NOT be added ", "Two duplicate Corporations found.", "Fail")
					log.info "Duplicate Corporation added and found. Test failed.."
					fnUpdateLog("Duplicate Corporation added and found. Test failed..")
					testRunner.fail("Duplicate Corporation added and found. Test failed..")
				}
				else
				{
					fnGenerateTCStepsReport("Verify Duplicate Corporation Name in View Corporation Response", "Duplicate Corporation should NOT be added ", "Duplicate Corporation NOT found successfully", "Pass")
					log.info "Duplicate Corporation NOT found successfully"
					fnUpdateLog("Duplicate Corporation NOT found successfully")
				}
			}
			else
			{
				fnGenerateTCStepsReport("Verify View Corporation Response", "View Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
				fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
	
		//log.info "[Duplicate Corporation] Execution Ended......."
		//fnUpdateLog("[Duplicate Corporation] Execution Ended.......\n")
		//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Corporation Response", "Add Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Duplicate Corporations] failed with exception : "+e)
		fnUpdateLog("[Duplicate Corporations] failed with exception : "+e)
	}
	finally
	{
		log.info "[Duplicate Corporation] Execution Completed Successfully......."
		fnUpdateLog("[Duplicatel Corporation] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddCorporation" id="79488525-e5c0-4150-9143-c1e1430ce05c" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Corporate" methodName="AddCorporation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddCorporation" id="cf639bdd-55f7-435f-9406-342efaa36c60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
    "CorporateName": "${#TestCase#NewCorpName}"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewCorporations" id="4e63437c-3273-4007-bd00-db2e107450f7" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Corporate" methodName="ViewCorporations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewCorporations" id="84117eed-e671-481b-b13e-b8ad20fb3df8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewCorpId","0")
testCase.setPropertyValue("NewCorpName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalCorporations","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Duplicate Corporation Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>NewCorpId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewCorpName</con:name><con:value>AutoTestCorporation_13968</con:value></con:property><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalCorporations</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Duplicate Corporation</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Duplicate Corporation Response </td><td class = "tsgen" width = 25%>Duplicate Corporation response should throw errors</td><td class = "tsgen" width = 25%>Duplicate Corporation NOT added and response has errors</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Duplicate Corporation Name in View Corporation Response </td><td class = "tsgen" width = 25%>Duplicate Corporation should NOT be added </td><td class = "tsgen" width = 25%>Duplicate Corporation NOT found successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property></con:properties></con:testCase><con:testCase id="65f4e8a2-d7d4-44d0-a71f-b8e3aad11ccb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MaxLengthCorporation_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="MaxLengthCorporation_Groovy" id="daf02a23-eb29-4632-8cb8-c857ff325e47"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
	
	log.info "[Max Length Corporation] Execution Started.........." 
	fnUpdateLog("[Max Length Corporation] Execution Started.........." )
	fnGenerateTCStepsReport("Verify Max Length Corporation", "", "", "")
	
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def iMaxCorpId = 0
	def sLatestCorpName = ""
	def sNewCorpName =""

	try
	{
		fnRunRequest("ViewCorporations");
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewCorporations#Request}')
		def responseContent = context.expand('${ViewCorporations#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		
		//jsonRequest = new JsonSlurper().parseText(requestContent)
	
		///////////////////Start - Parse JSON and get Max CorpId and set at test case level property NewCorpId,NewCorpName///////////////////
		
		
		if (responseContent!="")
		{
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			int iCorportionListSize = jsonResponse["CorporateItems"].size()
			log.info "Total Corporations Before Max Length Add Attempt : "+iCorportionListSize.toString()
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Total Corporations Before Max Length Add Attempt : "+iCorportionListSize.toString()  +".\n")
			fnUpdateLog("Total Corporations Before Max Length Add Attempt : "+iCorportionListSize.toString() )
			
			jsonResponse["CorporateItems"].each
			{ 
				//log.info it
				if(it.CorporateID >iMaxCorpId)
				{
					iMaxCorpId = it.CorporateID
					sLatestCorpName = it.CorporateName
				}
				//log.info "CorporateID>>>>>>>>>>>>>>>>>>>>>"+ it.CorporateID 
				//log.info "CorporateName>>>>>>>>>>>>>>>>>>>"+ it.CorporateName	
			}
			log.info "Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId  +".\n")
			fnUpdateLog("Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId )
			log.info "Latest Corporate Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestCorpName  
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Latest Corporate Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestCorpName    +".\n")
			fnUpdateLog("Latest Corporate Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestCorpName  )
	
			int iRandomNum = fnRandomNum(10001,99999);
			sNewCorpName = "TestCorporationTestCorporationTestCorporationTestCorporationTestCorporationTestCorporationTestX_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewCorpName",sNewCorpName)
		}
		else
		{
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation..\n";
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation..\n");
		}
		
	
		//Start - Adding a new Corporation
		fnRunRequest("AddCorporation");
	
		requestContent = context.expand('${AddCorporation#Request}')
		log.info requestContent
		responseContent = context.expand('${AddCorporation#Response}')
		log.info responseContent
		
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sCode = jsonResponse.code
			String sStatus = jsonResponse.status
			String sErrors = jsonResponse.errors
			log.info sCode+sStatus+sErrors
			//if(sKey=="Status" && sValue=="Add Corporate Failed")
			if(sCode=="RQ500" && sStatus=="500")
			{
				fnGenerateTCStepsReport("Verify Max Length Corporation Response", "Max Length Corporation response should throw errors", "Max Length Corporation NOT added and response has errors", "Pass")
				log.info "Max Length Corporation : "+sNewCorpName+" NOT added successfully"
				fnUpdateLog("Max Length Corporation : "+sNewCorpName+" NOT added successfully")	
			}
			else
			{
				fnGenerateTCStepsReport("Verify Max Length Corporation Response", "Max Length Corporation response should throw errors", "Max Length Corporation added and response has NO errors", "Fail")
				log.info "Max Length Corporation : "+sNewCorpName+" should NOT be added"
				fnUpdateLog("Max Length Corporation : "+sNewCorpName+" should NOT be added")	
				testRunner.fail("Max Length Corporation : "+sNewCorpName+" should NOT be added")
			}
			//End - Adding a new Corporation
		
			//Start - Verify newly added Corporation
			boolean bFlag = true
			fnRunRequest("ViewCorporations");
			requestContent = context.expand('${ViewCorporations#Request}')
			responseContent = context.expand('${ViewCorporations#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
			
		
				iCorportionListSize = jsonResponse["CorporateItems"].size()
				log.info "Total Corporations After Max Length Add Attempt : "+iCorportionListSize.toString()
				fnUpdateLog("Total Corporations After Max Length Add Attempt : "+iCorportionListSize.toString())	
			
				int iDupCorpCount = 0 
				
				jsonResponse["CorporateItems"].find
				{ 
					//log.info it
					//if(it.CorporateID == 367 && it.CorporateName == "TestCorporation_367" )  //Just for testing
					//if(it.CorporateID == iNewCorpId && it.CorporateName == sNewCorpName )  //No need to validate on Corp Id, It's auto generated by DB
					if(it.CorporateName == sNewCorpName )
					{	
						iDupCorpCount = iDupCorpCount +1
						bFlag = false
						//log.info "Actual Corp Id : "+it.CorporateID.toString() +" matches with Expected Corp Id : "+iNewCorpId.toString()+" It should NOT be added."
						//fnUpdateLog("Actual Corp Id : "+it.CorporateID.toString() +" matches with Expected Corp Id : "+iNewCorpId.toString()+" It should NOT be added.")
						if(iDupCorpCount>=2)
						{
							fnGenerateTCStepsReport("Verify Corporation Name in View Corporation Response", "Corporation should NOT be added ", "Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName+". It should NOT be added.", "Fail")
							log.info "Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName+" It should NOT be added."
							fnUpdateLog("Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName+" It should NOT be added.")
						}
						//return true  //Look for two duplocate corporations
					}	
				}
				
				log.info "iDupCorpCount>>>>>>>>>>>>>>>"+iDupCorpCount
				if(bFlag == false && iDupCorpCount>=2)
				{
					fnGenerateTCStepsReport("Verify Max Length Corporation Name in View Corporation Response", "Max Length Corporation should NOT be added ", "Max Length Corporation found.", "Fail")
					log.info "Max Length Corporation added and found. Test failed.."
					fnUpdateLog("Max Length Corporation added and found. Test failed..")
					testRunner.fail("Max Length Corporation added and found. Test failed..")
				}
				else
				{
					fnGenerateTCStepsReport("Verify Max Length Corporation Name in View Corporation Response", "Max Length Corporation should NOT be added ", "Max Length Corporation NOT found successfully", "Pass")
					log.info "Max Length Corporation NOT found successfully"
					fnUpdateLog("Max Length Corporation NOT found successfully")
				}
			}
			else
			{
				fnGenerateTCStepsReport("Verify View Corporation Response", "View Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
				fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Corporation Response", "Add Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Max Length Corporations] failed with exception : "+e)
		fnUpdateLog("[Max Length Corporations] failed with exception : "+e)
	}
	finally
	{
		log.info "[Max Length Corporation] Execution Completed Successfully......."
		fnUpdateLog("[Max Length Corporation] Execution Completed Successfully.......\n")
	}
///////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

	]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddCorporation" id="a1bd40d9-6e47-478a-afd7-d8e358bc58fd" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Corporate" methodName="AddCorporation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddCorporation" id="cf639bdd-55f7-435f-9406-342efaa36c60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
    "CorporateName": "${#TestCase#NewCorpName}"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewCorporations" id="3b0f0b2d-e569-4cb2-b186-c98401bc962a" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Corporate" methodName="ViewCorporations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewCorporations" id="84117eed-e671-481b-b13e-b8ad20fb3df8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewCorpId","0")
testCase.setPropertyValue("NewCorpName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalCorporations","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Max Length Corporation Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)


////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>NewCorpId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewCorpName</con:name><con:value>TestCorporationTestCorporationTestCorporationTestCorporationTestCorporationTestCorporationTestX_66322</con:value></con:property><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalCorporations</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Max Length Corporation</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Max Length Corporation Response </td><td class = "tsgen" width = 25%>Max Length Corporation response should throw errors</td><td class = "tsgen" width = 25%>Max Length Corporation NOT added and response has errors</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Max Length Corporation Name in View Corporation Response </td><td class = "tsgen" width = 25%>Max Length Corporation should NOT be added </td><td class = "tsgen" width = 25%>Max Length Corporation NOT found successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property></con:properties></con:testCase><con:properties/><con:setupScript/></con:testSuite><con:testSuite id="e0469a87-f39c-401b-940e-5c694b6d73bf" name="Regions_TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="205c9b09-a08d-44e1-92a4-55304900ff78" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ViewRegions_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ViewRegions_Groovy" id="50fe6a79-8cb3-487d-8a20-4e5d64214ed0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat;
import groovy.time.*

scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

/*
fnGenerateTCStepsReport("Verify View Region", "", "", "")
fnGenerateTCStepsReport("sStepDesc1", "sExpResult1", "sActualResult1", "Pass")
*/



	log.info "[View Region] Execution Started.........." 
	fnUpdateLog("[View Region] Execution Started..........")
	fnGenerateTCStepsReport("Verify View Region", "", "", "")
	
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	log.info sTSName
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	try
	{
		fnRunRequest("ViewRegions");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewRegions#Request}')
		def responseContent = context.expand('${ViewRegions#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		//def request_EnableHotspot = context.expand('${initiateEnableHotSpot#Request}')
		//def response_EnableHotspot = context.expand('${initiateEnableHotSpot#Response}')
	
		//def VIN = context.expand( '${#TestSuite#VIN}' ) 
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
			log.info "Before Line>>"
			/*responseContent.replaceAll('\\{\\"','\\{\n\\"')
			responseContent.replaceAll(',"',',\n"')
			responseContent.replaceAll('"}','"\n}')
			responseContent.replaceAll(',{',',\n{')*/
			/*respFile1.eachLine{ line ->
	
			//log.info(newCode)
				if (line.contains("Region"))
				{
					log.info "Region Line>>"+line
				}
				else
				{
					log.info "Normal Line>>"+line
				}
			}*/	
			///////////////////Start - Parse JSON and get the size of Region List///////////////////
			log.info "In loop1"
			jsonResponse = new JsonSlurper().parseText(responseContent)
			jsonResponse = new JsonSlurper().parseText(responseContent)
			log.info "In loop2"
			def iMaxRegId = 0
			jsonResponse["RegionItems"].each
			{ 
				//log.info "Data for Row>> "+ i.toString() +"  "+it
				if(it.RegionID >iMaxRegId)
				{
					iMaxRegId = it.RegionID
				}
				//log.info "RegionID>>>>>>>>>>>>>>>>>>>>>"+ it.RegionID 
				//log.info "RegionName>>>>>>>>>>>>>>>>>>>"+ it.RegionName	
			}
			log.info "Max RegionID>>>>>>>>>>>>>>>>>>>>>"+ iMaxRegId 
			fnUpdateLog("Max RegionID>>>>>>>>>>>>>>>>>>>>>"+ iMaxRegId)
			
			int iRegionListSize = jsonResponse["RegionItems"].size()
			log.info "Region List Size>>>>>>>>>>>>>>>>> "+iRegionListSize.toString()
			//Write DB code here to validate the total number of records
		
			if(iRegionListSize&lt;=0)
			{
				fnGenerateTCStepsReport("Verify Region List", "Region list should be retrieved", "Region list NOT retrieved", "Fail")
				testRunner.fail("No Region found..Check the View Region service and try again..")
				log.info "No Region found..Check the View Region service and try again.."
				fnUpdateLog("No Region found..Check the View Region service and try again..")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Region List", "Region list should be retrieved", "Regions retrieved successfully with total size of : "+iRegionListSize.toString(), "Pass")
				testRunner.testCase.setPropertyValue("TotalRegions",iRegionListSize.toString())
				log.info "Regions retrieved successfully with total size of : "+iRegionListSize.toString()
				fnUpdateLog("Regions retrieved successfully with total size of : "+iRegionListSize.toString())
			}
	  
		}
		else
		{
			fnGenerateTCStepsReport("Verify View Region Response", "View Region response should be retrieved", "Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{log.info "Exception"+e
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[View Regions] failed with exception : "+e)
		fnUpdateLog("[View Regions] failed with exception : "+e)
	}
	finally
	{
		log.info "[View Region] Execution Completed Successfully......." 
		fnUpdateLog("[View Region] Execution Completed Successfully.......\n")
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//def responseContent = testRunner.testCase.getTestStepByName("ViewRegions").getPropertyValue("response")
	//log.info responseContent



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{log.info "fnUpdateTCStepsCount"
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" &amp;&amp; sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}
</script></con:config></con:testStep><con:testStep type="restrequest" name="ViewRegions" id="9340ab3a-5ec7-4dda-9d29-e6523bd7f949" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Region" methodName="ViewRegions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewRegions" id="c4d65ad6-ccd5-4113-b32f-fbb6d5a49136" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Region</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewRegId","0")
testCase.setPropertyValue("TotalRegions","0")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")
</con:setupScript><con:tearDownScript>log.info "View Regions Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////////////////////////////////////////////

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify View Region</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Region List </td><td class = "tsgen" width = 25%>Region list should be retrieved</td><td class = "tsgen" width = 25%>Regions retrieved successfully with total size of : 9</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalRegions</con:name><con:value>9</con:value></con:property></con:properties></con:testCase><con:testCase id="6b7609e5-91f6-4ce9-816f-8970cdc75648" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AddRegion_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="AddRegion_Groovy" id="4d118c80-4516-454a-b330-1edfa92ce801"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	log.info "[Add Region] Execution Started.........." 
	fnUpdateLog("[Add Region] Execution Started..........")
	fnGenerateTCStepsReport("Verify Add Region", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewRegName = ""
	def sRegionID = ""
	try
	{
		fnRunRequest("ViewRegions");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewRegions#Request}')
		def responseContent = context.expand('${ViewRegions#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max RegId and set at test case level property NewRegId,NewRegName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxRegId = 0
			int iRegionListSize = jsonResponse["RegionItems"].size()
			
			jsonResponse["RegionItems"].each
			{ 
				//log.info it
				if(it.RegionID >iMaxRegId)
				{
					iMaxRegId = it.RegionID
				}
				//log.info "RegionID>>>>>>>>>>>>>>>>>>>>>"+ it.RegionID 
				//log.info "RegionName>>>>>>>>>>>>>>>>>>>"+ it.RegionName	
			}
			log.info "Max RegionID>>>>>>>>>>>>>>>>>>>>>"+ iMaxRegId 
			fnUpdateLog("Max RegionID>>>>>>>>>>>>>>>>>>>>>"+ iMaxRegId)
			log.info "Total Regions before Add : "+iRegionListSize.toString()
			fnUpdateLog("Total Regions before Add : "+iRegionListSize.toString())
		
			int iRandomNum = fnRandomNum(10001,99999);
			sNewRegName = "TestRegion_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewRegName",sNewRegName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Region Response", "View Region response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Region..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Region.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Region..");
		}
		//Start - Adding a new Region
		fnRunRequest("AddRegion");
		
		requestContent = context.expand('${AddRegion#Request}')
		log.info requestContent
		responseContent = context.expand('${AddRegion#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddRegion"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddRegion", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			//if(sKey=="Status" && sValue=="Action: Corporate Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Region Header Response", "Region should be created with proper header response", "Region : "+sNewRegName+" added successfully", "Pass")
				log.info "Region : "+sNewRegName+" added successfully"	
				fnUpdateLog("Region : "+sNewRegName+" added successfully")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Region Response", "Region should be created with proper header response", "Region : "+sNewRegName+" NOT added", "Fail")
				log.info "Region : "+sNewRegName+" NOT added"
				fnUpdateLog("Region : "+sNewRegName+" NOT added")
				testRunner.fail("Region : "+sNewRegName+" NOT added")
			}
			//End - Adding a new Region
		
			//sleep(1000)
			//Start - Verify newly added Region
			boolean bFlag = false
			fnRunRequest("ViewRegions");
			requestContent = context.expand('${ViewRegions#Request}')
			responseContent = context.expand('${ViewRegions#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iRegionListSize = jsonResponse["RegionItems"].size()
				log.info "Total Regions After Add : "+iRegionListSize.toString()
				fnUpdateLog("Total Regions After Add : "+iRegionListSize.toString())
				
				jsonResponse["RegionItems"].find
				{ 
					//log.info it
					//if(it.RegionID == 367 && it.RegionName == "TestRegion_367" )  //Just for testing
					//if(it.RegionID.toString() == iNewRegId.toString() && it.RegionName.toString() == sNewRegName )
					if(it.RegionName.toString() == sNewRegName )
					{
						bFlag = true
						sRegionID = it.RegionID.toString()
						//log.info "Actual Reg Id : "+it.RegionID.toString() +" matches with Expected Reg Id : "+iNewRegId.toString()
						//fnUpdateLog("Actual Reg Id : "+it.RegionID.toString() +" matches with Expected Reg Id : "+iNewRegId.toString() )
						fnGenerateTCStepsReport("Verify Region Name in View Region Response", "Actual Reg name should match with Expected Reg name ", "Actual Reg Name : "+it.RegionName.toString() +" matches with Expected Reg Name : "+sNewRegName, "Pass")
						log.info "Actual Reg Name : "+it.RegionName.toString() +" matches with Expected Reg Name : "+sNewRegName
						fnUpdateLog("Actual Reg Name : "+it.RegionName.toString() +" matches with Expected Reg Name : "+sNewRegName)
						return true
					}	
				}
			
				if(bFlag == true)
				{
					testRunner.testCase.testSuite.project.testSuites["Offices_TS"].setPropertyValue("RegionID",sRegionID)
					testRunner.testCase.testSuite.project.testSuites["Offices_TS"].setPropertyValue("NewRegName",sNewRegName)
					
					fnGenerateTCStepsReport("Validate Newly Added Region ", "Newly added Region should be validated", "Newly added Region validated successfully", "Pass")
					log.info "Newly added Region validated successfully"
					fnUpdateLog("Newly added Region validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Region ", "Newly added Region should be validated", "Newly added Region NOT validated. Region NOT found.", "Fail")
					log.info "Newly added Region NOT found"
					fnUpdateLog("Newly added Region NOT found")
					testRunner.fail("Newly added Region NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Region Response", "View Region response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Region Response", "Add Region response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Regions] failed with exception : "+e)
		fnUpdateLog("[Add Regions] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Region] Execution Completed Successfully......."
		fnUpdateLog("[Add Region] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "RegionID": ${#TestCase#NewRegId},
		    "RegionName": "${#TestCase#NewRegName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddRegion" id="0183ad7a-1b02-404d-8640-03bf19c2eee6" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Region" methodName="AddRegion" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddRegion" id="c4d65ad6-ccd5-4113-b32f-fbb6d5a49136" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
    "RegionName": "${#TestCase#NewRegName}"
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/Region</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewRegions" id="3bac5e85-e87c-488b-aac5-4e2d89250670" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Region" methodName="ViewRegions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewRegions" id="c4d65ad6-ccd5-4113-b32f-fbb6d5a49136" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Region</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewRegId","0")
testCase.setPropertyValue("NewRegName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalRegions","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Add Region Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>6</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>6</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Add Region</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Add Region Header Response </td><td class = "tsgen" width = 25%>Region should be created with proper header response</td><td class = "tsgen" width = 25%>Region : TestRegion_10267 added successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Region Name in View Region Response </td><td class = "tsgen" width = 25%>Actual Reg name should match with Expected Reg name </td><td class = "tsgen" width = 25%>Actual Reg Name : TestRegion_10267 matches with Expected Reg Name : TestRegion_10267</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.3</td><td class = "tsgen" width = 25%>Validate Newly Added Region  </td><td class = "tsgen" width = 25%>Newly added Region should be validated</td><td class = "tsgen" width = 25%>Newly added Region validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>2</td><td class = "tsgenlevel1" width = 25%>Verify Add Region</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>2.1</td><td class = "tsgen" width = 25%>Verify Add Region Header Response </td><td class = "tsgen" width = 25%>Region should be created with proper header response</td><td class = "tsgen" width = 25%>Region : TestRegion_48918 added successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.2</td><td class = "tsgen" width = 25%>Verify Region Name in View Region Response </td><td class = "tsgen" width = 25%>Actual Reg name should match with Expected Reg name </td><td class = "tsgen" width = 25%>Actual Reg Name : TestRegion_48918 matches with Expected Reg Name : TestRegion_48918</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.3</td><td class = "tsgen" width = 25%>Validate Newly Added Region  </td><td class = "tsgen" width = 25%>Newly added Region should be validated</td><td class = "tsgen" width = 25%>Newly added Region validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewRegName</con:name><con:value>TestRegion_48918</con:value></con:property><con:property><con:name>TotalRegions</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="c9fcf2f1-9f6e-4fb9-a783-77d7b65661f6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DuplicateRegion_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DuplicateRegion_Groovy" id="1b0acf15-3e17-490c-bf02-9ae347fabca6"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
	
	log.info "[Duplicate Region] Execution Started.........." 
	fnUpdateLog("[Duplicate Region] Execution Started.........." )
	fnGenerateTCStepsReport("Verify Duplicate Region", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();

	try
	{
		fnRunRequest("ViewRegions");
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewRegions#Request}')
		def responseContent = context.expand('${ViewRegions#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		
		//jsonRequest = new JsonSlurper().parseText(requestContent)
	
		///////////////////Start - Parse JSON and get Max RegId and set at test case level property NewRegId,NewRegName///////////////////
		def iMaxRegId = 0
		def sLatestRegName = ""
		def sNewRegName =""
		
		if (responseContent!="")
		{
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			int iRegionListSize = jsonResponse["RegionItems"].size()
			log.info "Total Regions Before Duplicate Add Attempt : "+iRegionListSize.toString()
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Total Regions Before Duplicate Add Attempt : "+iRegionListSize.toString()  +".\n")
			fnUpdateLog("Total Regions Before Duplicate Add Attempt : "+iRegionListSize.toString() )
			
			jsonResponse["RegionItems"].each
			{ 
				//log.info it
				if(it.RegionID >iMaxRegId)
				{
					iMaxRegId = it.RegionID
					sLatestRegName = it.RegionName
				}
				//log.info "RegionID>>>>>>>>>>>>>>>>>>>>>"+ it.RegionID 
				//log.info "RegionName>>>>>>>>>>>>>>>>>>>"+ it.RegionName	
			}
			log.info "Max RegionID>>>>>>>>>>>>>>>>>>>>>"+ iMaxRegId
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Max RegionID>>>>>>>>>>>>>>>>>>>>>"+ iMaxRegId  +".\n")
			fnUpdateLog("Max RegionID>>>>>>>>>>>>>>>>>>>>>"+ iMaxRegId )
			log.info "Latest Region Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestRegName  
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Latest Region Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestRegName    +".\n")
			fnUpdateLog("Latest Region Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestRegName  )
	
			sNewRegName = sLatestRegName;
			testRunner.testCase.setPropertyValue("NewRegName",sNewRegName)
		}
		else
		{
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Region..\n"
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Region..\n");
		}
		
	
		//Start - Adding a new Region
		fnRunRequest("AddRegion");
	
		requestContent = context.expand('${AddRegion#Request}')
		log.info requestContent
		responseContent = context.expand('${AddRegion#Response}')
		log.info responseContent
		
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sCode = jsonResponse.code
			String sStatus = jsonResponse.status
			String sErrors = jsonResponse.errors
			log.info sCode+sStatus+sErrors
			//if(sKey=="Status" && sValue=="Add Region Failed")
			if(sCode=="RQ500" && sStatus=="500")
			{
				fnGenerateTCStepsReport("Verify Duplicate Region Response", "Duplicate Region response should throw errors", "Duplicate Region NOT added and response has errors", "Pass")
				log.info "Duplicate Region : "+sNewRegName+" NOT added successfully"
				fnUpdateLog("Duplicate Region : "+sNewRegName+" NOT added successfully")	
			}
			else
			{	
				fnGenerateTCStepsReport("Verify Duplicate Region Response", "Duplicate Region response should throw errors", "Duplicate Region added and response has NO errors", "Fail")
				log.info "Duplicate Region : "+sNewRegName+" should NOT be added"
				fnUpdateLog("Duplicate Region : "+sNewRegName+" should NOT be added")	
				testRunner.fail("Duplicate Region : "+sNewRegName+" should NOT be added")
			}
			//End - Adding a new Region
		
			//Start - Verify newly added Region
			boolean bFlag = true
			fnRunRequest("ViewRegions");
			requestContent = context.expand('${ViewRegions#Request}')
			responseContent = context.expand('${ViewRegions#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
			
		
				iRegionListSize = jsonResponse["RegionItems"].size()
				log.info "Total Regions After Duplicate Add Attempt : "+iRegionListSize.toString()
				fnUpdateLog("Total Regions After Duplicate Add Attempt : "+iRegionListSize.toString())	
			
				int iDupRegCount = 0 
				
				jsonResponse["RegionItems"].find
				{ 
					//log.info it
					//if(it.RegionID == 367 && it.RegionName == "TestRegion_367" )  //Just for testing
					//if(it.RegionID == iNewRegId && it.RegionName == sNewRegName )  //No need to validate on Reg Id, It's auto generated by DB
					if(it.RegionName == sNewRegName )
					{	
						iDupRegCount = iDupRegCount +1
						bFlag = false
						//log.info "Actual Reg Id : "+it.RegionID.toString() +" matches with Expected Reg Id : "+iNewRegId.toString()+" It should NOT be added."
						//fnUpdateLog("Actual Reg Id : "+it.RegionID.toString() +" matches with Expected Reg Id : "+iNewRegId.toString()+" It should NOT be added.")
						if(iDupRegCount>=2)
						{	
							fnGenerateTCStepsReport("Verify Region Name in View Region Response", "Region should NOT be added ", "Actual Reg Name : "+it.RegionName.toString() +" matches with Expected Reg Name : "+sNewRegName+". It should NOT be added.", "Fail")
							log.info "Actual Reg Name : "+it.RegionName.toString() +" matches with Expected Reg Name : "+sNewRegName+" It should NOT be added."
							fnUpdateLog("Actual Reg Name : "+it.RegionName.toString() +" matches with Expected Reg Name : "+sNewRegName+" It should NOT be added.")
						}
						//return true  //Look for two duplocate Regions
					}	
				}
				
				log.info "iDupRegCount>>>>>>>>>>>>>>>"+iDupRegCount
				if(bFlag == false && iDupRegCount>=2)
				{
					fnGenerateTCStepsReport("Verify Duplicate Region Name in View Region Response", "Duplicate Region should NOT be added ", "Two duplicate Regions found.", "Fail")
					log.info "Duplicate Region added and found. Test failed.."
					fnUpdateLog("Duplicate Region added and found. Test failed..")
					testRunner.fail("Duplicate Region added and found. Test failed..")
				}
				else
				{
					fnGenerateTCStepsReport("Verify Duplicate Region Name in View Region Response", "Duplicate Region should NOT be added ", "Duplicate Region NOT found successfully", "Pass")
					log.info "Duplicate Region NOT found successfully"
					fnUpdateLog("Duplicate Region NOT found successfully")
				}
			}
			else
			{
				fnGenerateTCStepsReport("Verify View Region Response", "View Region response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
				fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
	
		//log.info "[Duplicate Region] Execution Ended......."
		//fnUpdateLog("[Duplicate Region] Execution Ended.......\n")
		//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Region Response", "Add Region response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Duplicate Regions] failed with exception : "+e)
		fnUpdateLog("[Duplicate Regions] failed with exception : "+e)
	}
	finally
	{
		log.info "[Duplicate Region] Execution Completed Successfully......."
		fnUpdateLog("[Duplicatel Region] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddRegion" id="c3176ebf-c75c-4178-a03b-25b4eb2fe51b" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Region" methodName="AddRegion" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddRegion" id="c4d65ad6-ccd5-4113-b32f-fbb6d5a49136" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
    "RegionName": "${#TestCase#NewRegName}"
}</con:request><con:originalUri>http://172.22.5.141/RenoWalk/api/v1/Region</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewRegions" id="0ba74ca5-cc44-4a35-bece-ca2e8c87512a" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Region" methodName="ViewRegions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewRegions" id="c4d65ad6-ccd5-4113-b32f-fbb6d5a49136" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Region</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewRegId","0")
testCase.setPropertyValue("NewRegName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalRegions","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Duplicate Region Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Duplicate Region</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Duplicate Region Response </td><td class = "tsgen" width = 25%>Duplicate Region response should throw errors</td><td class = "tsgen" width = 25%>Duplicate Region NOT added and response has errors</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Duplicate Region Name in View Region Response </td><td class = "tsgen" width = 25%>Duplicate Region should NOT be added </td><td class = "tsgen" width = 25%>Duplicate Region NOT found successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewRegName</con:name><con:value>TestRegion_10267</con:value></con:property><con:property><con:name>TotalRegions</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="5a60623b-bdc9-41c1-91b5-10c54bb414df" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MaxLengthRegion_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="MaxLengthRegion_Groovy" id="dab20e37-15a4-483f-8a19-c513a9044e9b"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
	
	log.info "[Max Length Region] Execution Started.........." 
	fnUpdateLog("[Max Length Region] Execution Started.........." )
	fnGenerateTCStepsReport("Verify Max Length Region", "", "", "")
	
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def iMaxRegId = 0
	def sLatestRegName = ""
	def sNewRegName =""

	try
	{
		fnRunRequest("ViewRegions");
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewRegions#Request}')
		def responseContent = context.expand('${ViewRegions#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		
		//jsonRequest = new JsonSlurper().parseText(requestContent)
	
		///////////////////Start - Parse JSON and get Max RegId and set at test case level property NewRegId,NewRegName///////////////////
		
		
		if (responseContent!="")
		{
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			int iRegionListSize = jsonResponse["RegionItems"].size()
			log.info "Total Regions Before Max Length Add Attempt : "+iRegionListSize.toString()
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Total Regions Before Max Length Add Attempt : "+iRegionListSize.toString()  +".\n")
			fnUpdateLog("Total Regions Before Max Length Add Attempt : "+iRegionListSize.toString() )
			
			jsonResponse["RegionItems"].each
			{ 
				//log.info it
				if(it.RegionID >iMaxRegId)
				{
					iMaxRegId = it.RegionID
					sLatestRegName = it.RegionName
				}
				//log.info "RegionID>>>>>>>>>>>>>>>>>>>>>"+ it.RegionID 
				//log.info "RegionName>>>>>>>>>>>>>>>>>>>"+ it.RegionName	
			}
			log.info "Max RegionID>>>>>>>>>>>>>>>>>>>>>"+ iMaxRegId
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Max RegionID>>>>>>>>>>>>>>>>>>>>>"+ iMaxRegId  +".\n")
			fnUpdateLog("Max RegionID>>>>>>>>>>>>>>>>>>>>>"+ iMaxRegId )
			log.info "Latest Region Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestRegName  
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Latest Region Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestRegName    +".\n")
			fnUpdateLog("Latest Region Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestRegName  )
	
			int iRandomNum = fnRandomNum(10001,99999);
			sNewRegName = "TestRegionTestRegionTestRegionTestRegionTestRegionTestRegionTestRegionTestRegionTestRegionTestX_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewRegName",sNewRegName)
		}
		else
		{
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Region..\n";
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Region..\n");
		}
		
	
		//Start - Adding a new Region
		fnRunRequest("AddRegion");
	
		requestContent = context.expand('${AddRegion#Request}')
		log.info requestContent
		responseContent = context.expand('${AddRegion#Response}')
		log.info responseContent
		
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sCode = jsonResponse.code
			String sStatus = jsonResponse.status
			String sErrors = jsonResponse.errors
			log.info sCode+sStatus+sErrors
			//if(sKey=="Status" && sValue=="Add Region Failed")
			if(sCode=="RQ500" && sStatus=="500")
			{
				fnGenerateTCStepsReport("Verify Max Length Region Response", "Max Length Region response should throw errors", "Max Length Region NOT added and response has errors", "Pass")
				log.info "Max Length Region : "+sNewRegName+" NOT added successfully"
				fnUpdateLog("Max Length Region : "+sNewRegName+" NOT added successfully")	
			}
			else
			{
				fnGenerateTCStepsReport("Verify Max Length Region Response", "Max Length Region response should throw errors", "Max Length Region added and response has NO errors", "Fail")
				log.info "Max Length Region : "+sNewRegName+" should NOT be added"
				fnUpdateLog("Max Length Region : "+sNewRegName+" should NOT be added")	
				testRunner.fail("Max Length Region : "+sNewRegName+" should NOT be added")
			}
			//End - Adding a new Region
		
			//Start - Verify newly added Region
			boolean bFlag = true
			fnRunRequest("ViewRegions");
			requestContent = context.expand('${ViewRegions#Request}')
			responseContent = context.expand('${ViewRegions#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
			
		
				iRegionListSize = jsonResponse["RegionItems"].size()
				log.info "Total Regions After Max Length Add Attempt : "+iRegionListSize.toString()
				fnUpdateLog("Total Regions After Max Length Add Attempt : "+iRegionListSize.toString())	
			
				int iDupRegCount = 0 
				
				jsonResponse["RegionItems"].find
				{ 
					//log.info it
					//if(it.RegionID == 367 && it.RegionName == "TestRegion_367" )  //Just for testing
					//if(it.RegionID == iNewRegId && it.RegionName == sNewRegName )  //No need to validate on Reg Id, It's auto generated by DB
					if(it.RegionName == sNewRegName )
					{	
						iDupRegCount = iDupRegCount +1
						bFlag = false
						//log.info "Actual Reg Id : "+it.RegionID.toString() +" matches with Expected Reg Id : "+iNewRegId.toString()+" It should NOT be added."
						//fnUpdateLog("Actual Reg Id : "+it.RegionID.toString() +" matches with Expected Reg Id : "+iNewRegId.toString()+" It should NOT be added.")
						if(iDupRegCount>=2)
						{
							fnGenerateTCStepsReport("Verify Region Name in View Region Response", "Region should NOT be added ", "Actual Reg Name : "+it.RegionName.toString() +" matches with Expected Reg Name : "+sNewRegName+". It should NOT be added.", "Fail")
							log.info "Actual Reg Name : "+it.RegionName.toString() +" matches with Expected Reg Name : "+sNewRegName+" It should NOT be added."
							fnUpdateLog("Actual Reg Name : "+it.RegionName.toString() +" matches with Expected Reg Name : "+sNewRegName+" It should NOT be added.")
						}
						//return true  //Look for two duplocate Regions
					}	
				}
				
				log.info "iDupRegCount>>>>>>>>>>>>>>>"+iDupRegCount
				if(bFlag == false && iDupRegCount>=2)
				{
					fnGenerateTCStepsReport("Verify Max Length Region Name in View Region Response", "Max Length Region should NOT be added ", "Max Length Region found.", "Fail")
					log.info "Max Length Region added and found. Test failed.."
					fnUpdateLog("Max Length Region added and found. Test failed..")
					testRunner.fail("Max Length Region added and found. Test failed..")
				}
				else
				{
					fnGenerateTCStepsReport("Verify Max Length Region Name in View Region Response", "Max Length Region should NOT be added ", "Max Length Region NOT found successfully", "Pass")
					log.info "Max Length Region NOT found successfully"
					fnUpdateLog("Max Length Region NOT found successfully")
				}
			}
			else
			{
				fnGenerateTCStepsReport("Verify View Region Response", "View Region response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
				fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Region Response", "Add Region response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Max Length Regions] failed with exception : "+e)
		fnUpdateLog("[Max Length Regions] failed with exception : "+e)
	}
	finally
	{
		log.info "[Max Length Region] Execution Completed Successfully......."
		fnUpdateLog("[Max Length Region] Execution Completed Successfully.......\n")
	}
///////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

	]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddRegion" id="ade17ebb-9bfb-4055-88eb-3679ad03ba1d" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Region" methodName="AddRegion" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddRegion" id="c4d65ad6-ccd5-4113-b32f-fbb6d5a49136" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
    "RegionName": "${#TestCase#NewRegName}"
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/Region</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewRegions" id="dde8f783-8736-41bd-99e5-86198b7291a5" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Region" methodName="ViewRegions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewRegions" id="c4d65ad6-ccd5-4113-b32f-fbb6d5a49136" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Region</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewRegId","0")
testCase.setPropertyValue("NewRegName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalRegions","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Max Length Region Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)


////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Max Length Region</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Max Length Region Response </td><td class = "tsgen" width = 25%>Max Length Region response should throw errors</td><td class = "tsgen" width = 25%>Max Length Region NOT added and response has errors</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Max Length Region Name in View Region Response </td><td class = "tsgen" width = 25%>Max Length Region should NOT be added </td><td class = "tsgen" width = 25%>Max Length Region NOT found successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewRegName</con:name><con:value>TestRegionTestRegionTestRegionTestRegionTestRegionTestRegionTestRegionTestRegionTestRegionTestX_12380</con:value></con:property><con:property><con:name>TotalRegions</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:properties/><con:setupScript/></con:testSuite><con:testSuite id="9f1d9e1d-1305-4302-a530-7a0d4da57cee" name="ProductTiers_TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ab64e597-ea0b-4ab2-9f98-6db3720ac882" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ViewProductTiers_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ViewProductTiers_Groovy" id="da2db3b5-412f-44c6-94a5-c59e23f76427"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat;
import groovy.time.*

scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

/*
fnGenerateTCStepsReport("Verify View ProductTier", "", "", "")
fnGenerateTCStepsReport("sStepDesc1", "sExpResult1", "sActualResult1", "Pass")
*/



	log.info "[View Product Tier] Execution Started.........." 
	fnUpdateLog("[View Product Tier] Execution Started..........")
	fnGenerateTCStepsReport("Verify View Product Tier", "", "", "")
	
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	log.info sTSName
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	try
	{
		fnRunRequest("ViewProductTiers");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewProductTiers#Request}')
		def responseContent = context.expand('${ViewProductTiers#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		//def request_EnableHotspot = context.expand('${initiateEnableHotSpot#Request}')
		//def response_EnableHotspot = context.expand('${initiateEnableHotSpot#Response}')
	
		//def VIN = context.expand( '${#TestSuite#VIN}' ) 
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
			log.info "Before Line>>"
			/*responseContent.replaceAll('\\{\\"','\\{\n\\"')
			responseContent.replaceAll(',"',',\n"')
			responseContent.replaceAll('"}','"\n}')
			responseContent.replaceAll(',{',',\n{')*/
			/*respFile1.eachLine{ line ->
	
			//log.info(newCode)
				if (line.contains("ProductTier"))
				{
					log.info "ProductTier Line>>"+line
				}
				else
				{
					log.info "Normal Line>>"+line
				}
			}*/	
			///////////////////Start - Parse JSON and get the size of ProductTier List///////////////////
			log.info "In loop1"
			jsonResponse = new JsonSlurper().parseText(responseContent)
			jsonResponse = new JsonSlurper().parseText(responseContent)
			log.info "In loop2"
			def iMaxPTId = 0
			jsonResponse["ProductTiersItems"].each
			{ 
				//log.info "Data for Row>> "+ i.toString() +"  "+it
				if(it.ProductTierID >iMaxPTId)
				{
					iMaxPTId = it.ProductTierID
				}
				//log.info "ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ it.ProductTierID 
				//log.info "TierName>>>>>>>>>>>>>>>>>>>"+ it.TierName	
			}
			log.info "Max ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPTId 
			fnUpdateLog("Max ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPTId)
			
			int iProductTierListSize = jsonResponse["ProductTiersItems"].size()
			log.info "Product Tier List Size>>>>>>>>>>>>>>>>> "+iProductTierListSize.toString()
			//Write DB code here to validate the total number of records
		
			if(iProductTierListSize&lt;=0)
			{
				fnGenerateTCStepsReport("Verify Product Tier List", "Product Tier list should be retrieved", "Product Tier list NOT retrieved", "Fail")
				testRunner.fail("No Product Tier found..Check the View Product Tier service and try again..")
				log.info "No Product Tier found..Check the View Product Tier service and try again.."
				fnUpdateLog("No Product Tier found..Check the View Product Tier service and try again..")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Product Tier List", "Product Tier list should be retrieved", "Product Tiers retrieved successfully with total size of : "+iProductTierListSize.toString(), "Pass")
				testRunner.testCase.setPropertyValue("TotalProductTiers",iProductTierListSize.toString())
				log.info "Product Tiers retrieved successfully with total size of : "+iProductTierListSize.toString()
				fnUpdateLog("Product Tiers retrieved successfully with total size of : "+iProductTierListSize.toString())
			}
	  
		}
		else
		{
			fnGenerateTCStepsReport("Verify View Product Tier Response", "View Product Tier response should be retrieved", "Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{log.info "Exception"+e
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[View Product Tiers] failed with exception : "+e)
		fnUpdateLog("[View Product Tiers] failed with exception : "+e)
	}
	finally
	{
		log.info "[View Product Tiers] Execution Completed Successfully......." 
		fnUpdateLog("[View Product Tiers] Execution Completed Successfully.......\n")
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//def responseContent = testRunner.testCase.getTestStepByName("ViewProductTiers").getPropertyValue("response")
	//log.info responseContent



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{log.info "fnUpdateTCStepsCount"
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" &amp;&amp; sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}
</script></con:config></con:testStep><con:testStep type="restrequest" name="ViewProductTiers" id="de90e396-48f4-4249-8014-f905a0f237f4" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/ProductTiers" methodName="ViewProductTiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewProductTiers" id="355346a2-a3c0-4473-9742-82287a4e59b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewPTId","0")
testCase.setPropertyValue("TotalProductTiers","0")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")
</con:setupScript><con:tearDownScript>log.info "View Product Tier Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////////////////////////////////////////////

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify View Product Tier</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Product Tier List </td><td class = "tsgen" width = 25%>Product Tier list should be retrieved</td><td class = "tsgen" width = 25%>Product Tiers retrieved successfully with total size of : 13</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalRegions</con:name><con:value>0</con:value></con:property><con:property><con:name>NewPTId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalProductTiers</con:name><con:value>13</con:value></con:property></con:properties></con:testCase><con:testCase id="905ab486-3ad4-4c16-baf4-75254ce00e38" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AddProductTier_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="AddProductTier_Groovy" id="d7aad0f0-38b3-4cad-8827-23d8e2038d2d"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	log.info "[Add Product Tier] Execution Started.........." 
	fnUpdateLog("[Add Product Tier] Execution Started..........")
	fnGenerateTCStepsReport("Verify Add Product Tier", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewPTName = ""
	try
	{

		String sOfficeName = fnGetFirstOffice();
		log.info "First Office successfully returned as : "+sOfficeName
		
		fnRunRequest("ViewProductTiers");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewProductTiers#Request}')
		def responseContent = context.expand('${ViewProductTiers#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max PTId and set at test case level property NewPTId,NewPTName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxPTId = 0
			int iProductTierListSize = jsonResponse["ProductTiersItems"].size()
			
			jsonResponse["ProductTiersItems"].each
			{ 
				//log.info it
				if(it.ProductTierID >iMaxPTId)
				{
					iMaxPTId = it.ProductTierID
				}
				//log.info "ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ it.ProductTierID 
				//log.info "TierName>>>>>>>>>>>>>>>>>>>"+ it.TierName	
			}
			log.info "Max ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPTId 
			fnUpdateLog("Max ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPTId)
			log.info "Total Product Tiers before Add : "+iProductTierListSize.toString()
			fnUpdateLog("Total Product Tiers before Add : "+iProductTierListSize.toString())
		
			int iRandomNum = fnRandomNum(10001,99999);
			sNewPTName = "TestProductTier_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewPTName",sNewPTName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Product Tier Response", "View Product Tier response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Product Tier..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Product Tier.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Product Tier..");
		}
		//Start - Adding a new Product Tier
		fnRunRequest("AddProductTier");
		
		requestContent = context.expand('${AddProductTier#Request}')
		log.info requestContent
		responseContent = context.expand('${AddProductTier#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddProductTier"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			//jsonResponse = new JsonSlurper().parseText(responseContent)
			//String sKey = jsonResponse.Key
			//String sValue = jsonResponse.Value
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddProductTier", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			//if(sKey=="Status" && sValue=="Action: Corporate Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Product Tier Header Response", "Product Tier should be created with proper header response", "Product Tier : "+sNewPTName+" added successfully", "Pass")
				log.info "Product Tier : "+sNewPTName+" added successfully"	
				fnUpdateLog("Product Tier : "+sNewPTName+" added successfully")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Product Tier Response", "Product Tier should be created with proper header response", "Product Tier : "+sNewPTName+" NOT added", "Fail")
				log.info "Product Tier : "+sNewPTName+" NOT added"
				fnUpdateLog("Product Tier : "+sNewPTName+" NOT added")
				testRunner.fail("Product Tier : "+sNewPTName+" NOT added")
			}
			//End - Adding a new Product Tier
		
			//sleep(1000)
			//Start - Verify newly added Product Tier
			boolean bFlag = false
			fnRunRequest("ViewProductTiers");
			requestContent = context.expand('${ViewProductTiers#Request}')
			responseContent = context.expand('${ViewProductTiers#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iProductTierListSize = jsonResponse["ProductTiersItems"].size()
				log.info "Total Product Tiers After Add : "+iProductTierListSize.toString()
				fnUpdateLog("Total Product Tiers After Add : "+iProductTierListSize.toString())
				
				jsonResponse["ProductTiersItems"].find
				{ 
					//log.info it
					//if(it.ProductTierID == 367 && it.TierName == "TestProductTier_367" )  //Just for testing
					//if(it.ProductTierID.toString() == iNewPTId.toString() && it.TierName.toString() == sNewPTName )
					if(it.TierName.toString() == sNewPTName )
					{
						bFlag = true
						//log.info "Actual PT Id : "+it.ProductTierID.toString() +" matches with Expected PT Id : "+iNewPTId.toString()
						//fnUpdateLog("Actual PT Id : "+it.ProductTierID.toString() +" matches with Expected PT Id : "+iNewPTId.toString() )
						fnGenerateTCStepsReport("Verify Product Tier Name in View Product Tier Response", "Actual Product Tier Name should match with Expected Product Tier Name ", "Actual Product Tier Name : "+it.TierName.toString() +" matches with Expected Product Tier Name : "+sNewPTName, "Pass")
						log.info "Actual Product Tier Name : "+it.TierName.toString() +" matches with Expected Product Tier Name : "+sNewPTName
						fnUpdateLog("Actual Product Tier Name : "+it.TierName.toString() +" matches with Expected Product Tier Name : "+sNewPTName)
						return true
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Product Tier ", "Newly added Product Tier should be validated", "Newly added Product Tier validated successfully", "Pass")
					log.info "Newly added Product Tier validated successfully"
					fnUpdateLog("Newly added Product Tier validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Product Tier ", "Newly added Product Tier should be validated", "Newly added Product Tier NOT validated. Product Tier NOT found.", "Fail")
					log.info "Newly added Product Tier NOT found"
					fnUpdateLog("Newly added Product Tier NOT found")
					testRunner.fail("Newly added Product Tier NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Product Tier Response", "View Product Tier response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Product Tier Response", "Add Product Tier response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
		
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Product Tier] failed with exception : "+e)
		fnUpdateLog("[Add Product Tier] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Product Tier] Execution Completed Successfully......."
		fnUpdateLog("[Add Product Tier] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}

		def String fnGetFirstOffice()
		{	
			try
			{
				String sAppOfficeID = ""
				String sOfficeName = ""
				/////////////////////////////////////////////////Get First Office - Start////////////////////////////////////////////////////////////////
				fnRunRequest("ViewOffices");
				def respOfficesContent = context.expand('${ViewOffices#Response}')
				log.info respOfficesContent
				if (respOfficesContent!="")
				{
					jsonResponse = new JsonSlurper().parseText(respOfficesContent)
					int iAppOfficeItemsSize = jsonResponse["AppOfficeItems"].size()
					log.info "iAppOfficeItemsSize>>>"+iAppOfficeItemsSize
					
					sAppOfficeID = jsonResponse["AppOfficeItems"][0].AppOfficeID.toString()
					sOfficeName = jsonResponse["AppOfficeItems"][0].OfficeName.toString()
					log.info "sAppOfficeID>>>"+sAppOfficeID +"  sOfficeName>>>"+sOfficeName
					testRunner.testCase.setPropertyValue("AppOfficeID",sAppOfficeID)
					testRunner.testCase.setPropertyValue("OfficeName",sOfficeName)
				}
				else
				{
					log.info "No Office available. Please add an office and resume...."
				}
				return sOfficeName
				/////////////////////////////////////////////////Get First Office - End////////////////////////////////////////////////////////////////
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnGetFirstOffice] failed with exception : "+e)
				testRunner.fail("Function [fnGetFirstOffice] failed with exception : "+e)
			}
		
			
		}

		/*	{
		    "ProductTierID": ${#TestCase#NewPTId},
		    "TierName": "${#TestCase#NewPTName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddProductTier" id="485e366a-3503-43d8-b023-4cb89799c292" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/ProductTiers" methodName="AddProductTier" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddProductTier" id="355346a2-a3c0-4473-9742-82287a4e59b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID": ${#TestCase#AppOfficeID}, "TierName": "${#TestCase#NewPTName}"
}
</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewProductTiers" id="c497cad1-34e8-4f6a-8e10-f42ae89c5157" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/ProductTiers" methodName="ViewProductTiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewProductTiers" id="355346a2-a3c0-4473-9742-82287a4e59b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewOffices" id="64c8a01d-c7cc-4dda-9379-4d28f264b58b" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="ViewOffices" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewOffices" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewPTId","0")
testCase.setPropertyValue("NewPTName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalProductTiers","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")
testCase.setPropertyValue("AppOfficeID","")
testCase.setPropertyValue("OfficeName","")</con:setupScript><con:tearDownScript>log.info "Add Region Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Add Product Tier</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Add Product Tier Header Response </td><td class = "tsgen" width = 25%>Product Tier should be created with proper header response</td><td class = "tsgen" width = 25%>Product Tier : TestProductTier_49288 added successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Product Tier Name in View Product Tier Response </td><td class = "tsgen" width = 25%>Actual Product Tier Name should match with Expected Product Tier Name </td><td class = "tsgen" width = 25%>Actual Product Tier Name : TestProductTier_49288 matches with Expected Product Tier Name : TestProductTier_49288</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.3</td><td class = "tsgen" width = 25%>Validate Newly Added Product Tier  </td><td class = "tsgen" width = 25%>Newly added Product Tier should be validated</td><td class = "tsgen" width = 25%>Newly added Product Tier validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewPTName</con:name><con:value>TestProductTier_49288</con:value></con:property><con:property><con:name>AppOfficeID</con:name><con:value>34</con:value></con:property><con:property><con:name>OfficeName</con:name><con:value>AutoTestOffice_11260</con:value></con:property><con:property><con:name>NewPTId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalProductTiers</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="0331bd3e-7509-4bd3-87cb-0b622b37916e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DuplicateProductTier_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DuplicateProductTier_Groovy" id="6ddeb550-3e05-46eb-8903-e686cbfc396f"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
	
	log.info "[Duplicate Product Tier] Execution Started.........." 
	fnUpdateLog("[Duplicate Product Tier] Execution Started.........." )
	fnGenerateTCStepsReport("Verify Duplicate Product Tier", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();

	try
	{
		String sOfficeName = fnGetFirstOffice();
		log.info "First Office successfully returned as : "+sOfficeName
		
		fnRunRequest("ViewProductTiers");
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewProductTiers#Request}')
		def responseContent = context.expand('${ViewProductTiers#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		
		//jsonRequest = new JsonSlurper().parseText(requestContent)
	
		///////////////////Start - Parse JSON and get Max PTId and set at test case level property NewPTId,NewPTName///////////////////
		def iMaxPTId = 0
		def sLatestPTName = ""
		def sNewPTName =""
		
		if (responseContent!="")
		{
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			int iProductTierListSize = jsonResponse["ProductTiersItems"].size()
			log.info "Total Product Tiers Before Duplicate Add Attempt : "+iProductTierListSize.toString()
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Total ProductTiers Before Duplicate Add Attempt : "+iProductTierListSize.toString()  +".\n")
			fnUpdateLog("Total Product Tiers Before Duplicate Add Attempt : "+iProductTierListSize.toString() )
			
			jsonResponse["ProductTiersItems"].each
			{ 
				//log.info it
				if(it.ProductTierID >iMaxPTId)
				{
					iMaxPTId = it.ProductTierID
					sLatestPTName = it.TierName
				}
				//log.info "ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ it.ProductTierID 
				//log.info "TierName>>>>>>>>>>>>>>>>>>>"+ it.TierName	
			}
			log.info "Max ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPTId
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Max ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPTId  +".\n")
			fnUpdateLog("Max ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPTId )
			log.info "Latest ProductTier Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestPTName  
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Latest ProductTier Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestPTName    +".\n")
			fnUpdateLog("Latest Product Tier Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestPTName  )
	
			sNewPTName = sLatestPTName;
			testRunner.testCase.setPropertyValue("NewPTName",sNewPTName)
		}
		else
		{
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Product Tier..\n"
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Product Tier..\n");
		}
		
	
		//Start - Adding a new Product Tier
		fnRunRequest("AddProductTier");
	
		requestContent = context.expand('${AddProductTier#Request}')
		log.info requestContent
		responseContent = context.expand('${AddProductTier#Response}')
		log.info responseContent
		
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sCode = jsonResponse.code
			String sStatus = jsonResponse.status
			String sErrors = jsonResponse.errors
			log.info sCode+sStatus+sErrors
			//if(sKey=="Status" && sValue=="Add ProductTier Failed")
			if(sCode=="RQ500" && sStatus=="500")
			{
				fnGenerateTCStepsReport("Verify Duplicate Product Tier Response", "Duplicate Product Tier response should throw errors", "Duplicate Product Tier NOT added and response has errors", "Pass")
				log.info "Duplicate Product Tier : "+sNewPTName+" NOT added successfully"
				fnUpdateLog("Duplicate Product Tier : "+sNewPTName+" NOT added successfully")	
			}
			else
			{	
				fnGenerateTCStepsReport("Verify Duplicate Product Tier Response", "Duplicate Product Tier response should throw errors", "Duplicate Product Tier added and response has NO errors", "Fail")
				log.info "Duplicate Product Tier : "+sNewPTName+" should NOT be added"
				fnUpdateLog("Duplicate Product Tier : "+sNewPTName+" should NOT be added")	
				testRunner.fail("Duplicate Product Tier : "+sNewPTName+" should NOT be added")
			}
			//End - Adding a new Product Tier
		
			//Start - Verify newly added Product Tier
			boolean bFlag = true
			fnRunRequest("ViewProductTiers");
			requestContent = context.expand('${ViewProductTiers#Request}')
			responseContent = context.expand('${ViewProductTiers#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
			
		
				iProductTierListSize = jsonResponse["ProductTiersItems"].size()
				log.info "Total Product Tiers After Duplicate Add Attempt : "+iProductTierListSize.toString()
				fnUpdateLog("Total Product Tiers After Duplicate Add Attempt : "+iProductTierListSize.toString())	
			
				int iDupPTCount = 0 
				
				jsonResponse["ProductTiersItems"].find
				{ 
					//log.info it
					//if(it.ProductTierID == 367 && it.TierName == "TestProductTier_367" )  //Just for testing
					//if(it.ProductTierID == iNewPTId && it.TierName == sNewPTName )  //No need to validate on PT Id, It's auto generated by DB
					if(it.TierName == sNewPTName )
					{	
						iDupPTCount = iDupPTCount +1
						bFlag = false
						//log.info "Actual PT Id : "+it.ProductTierID.toString() +" matches with Expected PT Id : "+iNewPTId.toString()+" It should NOT be added."
						//fnUpdateLog("Actual PT Id : "+it.ProductTierID.toString() +" matches with Expected PT Id : "+iNewPTId.toString()+" It should NOT be added.")
						if(iDupPTCount>=2)
						{	
							fnGenerateTCStepsReport("Verify Product Tier Name in View Product Tier Response", "Product Tier should NOT be added ", "Actual PT Name : "+it.TierName.toString() +" matches with Expected PT Name : "+sNewPTName+". It should NOT be added.", "Fail")
							log.info "Actual PT Name : "+it.TierName.toString() +" matches with Expected PT Name : "+sNewPTName+" It should NOT be added."
							fnUpdateLog("Actual PT Name : "+it.TierName.toString() +" matches with Expected PT Name : "+sNewPTName+" It should NOT be added.")
						}
						//return true  //Look for two duplocate ProductTiers
					}	
				}
				
				log.info "iDupPTCount>>>>>>>>>>>>>>>"+iDupPTCount
				if(bFlag == false && iDupPTCount>=2)
				{
					fnGenerateTCStepsReport("Verify Duplicate Product Tier Name in View Product Tier Response", "Duplicate Product Tier should NOT be added ", "Two duplicate Product Tiers found.", "Fail")
					log.info "Duplicate Product Tier added and found. Test failed.."
					fnUpdateLog("Duplicate Product Tier added and found. Test failed..")
					testRunner.fail("Duplicate Product Tier added and found. Test failed..")
				}
				else
				{
					fnGenerateTCStepsReport("Verify Duplicate Product Tier Name in View Product Tier Response", "Duplicate Product Tier should NOT be added ", "Duplicate Product Tier NOT found successfully", "Pass")
					log.info "Duplicate Product Tier NOT found successfully"
					fnUpdateLog("Duplicate Product Tier NOT found successfully")
				}
			}
			else
			{
				fnGenerateTCStepsReport("Verify View Product Tier Response", "View Product Tier response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
				fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
	
		//log.info "[Duplicate Product Tier] Execution Ended......."
		//fnUpdateLog("[Duplicate Product Tier] Execution Ended.......\n")
		//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Product Tier Response", "Add Product Tier response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Duplicate Product Tier] failed with exception : "+e)
		fnUpdateLog("[Duplicate Product Tier] failed with exception : "+e)
	}
	finally
	{
		log.info "[Duplicate Product Tier] Execution Completed Successfully......."
		fnUpdateLog("[Duplicatel Product Tier] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

	def String fnGetFirstOffice()
	{	
		try
		{
			String sAppOfficeID = ""
			String sOfficeName = ""
			/////////////////////////////////////////////////Get First Office - Start////////////////////////////////////////////////////////////////
			fnRunRequest("ViewOffices");
			def respOfficesContent = context.expand('${ViewOffices#Response}')
			log.info respOfficesContent
			if (respOfficesContent!="")
			{
				jsonResponse = new JsonSlurper().parseText(respOfficesContent)
				int iAppOfficeItemsSize = jsonResponse["AppOfficeItems"].size()
				log.info "iAppOfficeItemsSize>>>"+iAppOfficeItemsSize
				
				sAppOfficeID = jsonResponse["AppOfficeItems"][0].AppOfficeID.toString()
				sOfficeName = jsonResponse["AppOfficeItems"][0].OfficeName.toString()
				log.info "sAppOfficeID>>>"+sAppOfficeID +"  sOfficeName>>>"+sOfficeName
				testRunner.testCase.setPropertyValue("AppOfficeID",sAppOfficeID)
				testRunner.testCase.setPropertyValue("OfficeName",sOfficeName)
			}
			else
			{
				log.info "No Office available. Please add an office and resume...."
			}
			return sOfficeName
			/////////////////////////////////////////////////Get First Office - End////////////////////////////////////////////////////////////////
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGetFirstOffice] failed with exception : "+e)
			testRunner.fail("Function [fnGetFirstOffice] failed with exception : "+e)
		}
	
		
	}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddProductTier" id="9f3bdbfc-48be-4bb8-81b5-476dc50eeea0" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/ProductTiers" methodName="AddProductTier" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddProductTier" id="355346a2-a3c0-4473-9742-82287a4e59b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID": ${#TestCase#AppOfficeID}, "TierName": "${#TestCase#NewPTName}"
}
</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewProductTiers" id="11640da0-cb16-490f-b64e-fd1f3d36f051" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/ProductTiers" methodName="ViewProductTiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewProductTiers" id="355346a2-a3c0-4473-9742-82287a4e59b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewOffices" id="eded125e-557d-4c36-a6d6-ce5c0fa7cfe9" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="ViewOffices" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewOffices" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewPTId","0")
testCase.setPropertyValue("NewPTName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalProductTiers","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")
testCase.setPropertyValue("AppOfficeID","")
testCase.setPropertyValue("OfficeName","")</con:setupScript><con:tearDownScript>log.info "Duplicate Product Tier Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Duplicate Product Tier</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Duplicate Product Tier Response </td><td class = "tsgen" width = 25%>Duplicate Product Tier response should throw errors</td><td class = "tsgen" width = 25%>Duplicate Product Tier NOT added and response has errors</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Duplicate Product Tier Name in View Product Tier Response </td><td class = "tsgen" width = 25%>Duplicate Product Tier should NOT be added </td><td class = "tsgen" width = 25%>Duplicate Product Tier NOT found successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewRegName</con:name><con:value/></con:property><con:property><con:name>TotalRegions</con:name><con:value>0</con:value></con:property><con:property><con:name>AppOfficeID</con:name><con:value>34</con:value></con:property><con:property><con:name>NewPTName</con:name><con:value>TestProductTier_49288</con:value></con:property><con:property><con:name>NewPTId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalProductTiers</con:name><con:value>0</con:value></con:property><con:property><con:name>OfficeName</con:name><con:value>AutoTestOffice_11260</con:value></con:property></con:properties></con:testCase><con:testCase id="af2cf71b-7e9a-49da-acf9-fc1061999e9d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MaxLengthProductTier_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="MaxLengthProductTier_Groovy" id="1d37e8b8-f438-4dd9-8070-50b775064637"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
	
	log.info "[Max Length Product Tier] Execution Started.........." 
	fnUpdateLog("[Max Length Product Tier] Execution Started.........." )
	fnGenerateTCStepsReport("Verify Max Length Product Tier", "", "", "")
	
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def iMaxPTId = 0
	def sLatestPTName = ""
	def sNewPTName =""

	try
	{
		String sOfficeName = fnGetFirstOffice();
		log.info "First Office successfully returned as : "+sOfficeName
		
		fnRunRequest("ViewProductTiers");
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewProductTiers#Request}')
		def responseContent = context.expand('${ViewProductTiers#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		
		//jsonRequest = new JsonSlurper().parseText(requestContent)
	
		///////////////////Start - Parse JSON and get Max PTId and set at test case level property NewPTId,NewPTName///////////////////
		
		
		if (responseContent!="")
		{
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			int iProductTierListSize = jsonResponse["ProductTiersItems"].size()
			log.info "Total Product Tiers Before Max Length Add Attempt : "+iProductTierListSize.toString()
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Total ProductTiers Before Max Length Add Attempt : "+iProductTierListSize.toString()  +".\n")
			fnUpdateLog("Total Product Tiers Before Max Length Add Attempt : "+iProductTierListSize.toString() )
			
			jsonResponse["ProductTiersItems"].each
			{ 
				//log.info it
				if(it.ProductTierID >iMaxPTId)
				{
					iMaxPTId = it.ProductTierID
					sLatestPTName = it.TierName
				}
				//log.info "ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ it.ProductTierID 
				//log.info "TierName>>>>>>>>>>>>>>>>>>>"+ it.TierName	
			}
			log.info "Max ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPTId
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Max ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPTId  +".\n")
			fnUpdateLog("Max ProductTierID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPTId )
			log.info "Latest ProductTier Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestPTName  
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Latest ProductTier Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestPTName    +".\n")
			fnUpdateLog("Latest Product Tier Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestPTName  )
	
			int iRandomNum = fnRandomNum(10001,99999);
			sNewPTName = "TestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestXTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestX_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewPTName",sNewPTName)
		}
		else
		{
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding ProductTier..\n";
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding ProductTier..\n");
		}
		
	
		//Start - Adding a new ProductTier
		fnRunRequest("AddProductTier");
	
		requestContent = context.expand('${AddProductTier#Request}')
		log.info requestContent
		responseContent = context.expand('${AddProductTier#Response}')
		log.info responseContent
		
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sCode = jsonResponse.code
			String sStatus = jsonResponse.status
			String sErrors = jsonResponse.errors
			log.info sCode+sStatus+sErrors
			//if(sKey=="Status" && sValue=="Add ProductTier Failed")
			if(sCode=="RQ500" && sStatus=="500")
			{
				fnGenerateTCStepsReport("Verify Max Length Product Tier Response", "Max Length Product Tier response should throw errors", "Max Length Product Tier NOT added and response has errors", "Pass")
				log.info "Max Length Product Tier : "+sNewPTName+" NOT added successfully"
				fnUpdateLog("Max Length Product Tier : "+sNewPTName+" NOT added successfully")	
			}
			else
			{
				fnGenerateTCStepsReport("Verify Max Length Product Tier Response", "Max Length Product Tier response should throw errors", "Max Length Product Tier added and response has NO errors", "Fail")
				log.info "Max Length Product Tier : "+sNewPTName+" should NOT be added"
				fnUpdateLog("Max Length Product Tier : "+sNewPTName+" should NOT be added")	
				testRunner.fail("Max Length Product Tier : "+sNewPTName+" should NOT be added")
			}
			//End - Adding a new Product Tier
		
			//Start - Verify newly added Product Tier
			boolean bFlag = true
			fnRunRequest("ViewProductTiers");
			requestContent = context.expand('${ViewProductTiers#Request}')
			responseContent = context.expand('${ViewProductTiers#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
			
		
				iProductTierListSize = jsonResponse["ProductTiersItems"].size()
				log.info "Total Product Tiers After Max Length Add Attempt : "+iProductTierListSize.toString()
				fnUpdateLog("Total Product Tiers After Max Length Add Attempt : "+iProductTierListSize.toString())	
			
				int iDupPTCount = 0 
				
				jsonResponse["ProductTiersItems"].find
				{ 
					//log.info it
					//if(it.ProductTierID == 367 && it.TierName == "TestProductTier_367" )  //Just for testing
					//if(it.ProductTierID == iNewPTId && it.TierName == sNewPTName )  //No need to validate on PT Id, It's auto generated by DB
					if(it.TierName == sNewPTName )
					{	
						iDupPTCount = iDupPTCount +1
						bFlag = false
						//log.info "Actual PT Id : "+it.ProductTierID.toString() +" matches with Expected PT Id : "+iNewPTId.toString()+" It should NOT be added."
						//fnUpdateLog("Actual PT Id : "+it.ProductTierID.toString() +" matches with Expected PT Id : "+iNewPTId.toString()+" It should NOT be added.")
						if(iDupPTCount>=2)
						{
							fnGenerateTCStepsReport("Verify Product Tier Name in View Product Tier Response", "Product Tier should NOT be added ", "Actual Product Tier Name : "+it.TierName.toString() +" matches with Expected Product Tier Name : "+sNewPTName+". It should NOT be added.", "Fail")
							log.info "Actual Product Tier Name : "+it.TierName.toString() +" matches with Expected Product Tier Name : "+sNewPTName+" It should NOT be added."
							fnUpdateLog("Actual Product Tier Name : "+it.TierName.toString() +" matches with Expected Product Tier Name : "+sNewPTName+" It should NOT be added.")
						}
						//return true  //Look for two duplocate Product Tiers
					}	
				}
				
				log.info "iDupPTCount>>>>>>>>>>>>>>>"+iDupPTCount
				if(bFlag == false && iDupPTCount>=2)
				{
					fnGenerateTCStepsReport("Verify Max Length Product Tier Name in View Product Tier Response", "Max Length Product Tier should NOT be added ", "Max Length Product Tier found.", "Fail")
					log.info "Max Length Product Tier added and found. Test failed.."
					fnUpdateLog("Max Length Product Tier added and found. Test failed..")
					testRunner.fail("Max Length Product Tier added and found. Test failed..")
				}
				else
				{
					fnGenerateTCStepsReport("Verify Max Length Product Tier Name in View Product Tier Response", "Max Length Product Tier should NOT be added ", "Max Length Product Tier NOT found successfully", "Pass")
					log.info "Max Length Product Tier NOT found successfully"
					fnUpdateLog("Max Length Product Tier NOT found successfully")
				}
			}
			else
			{
				fnGenerateTCStepsReport("Verify View Product Tier Response", "View Product Tier response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
				fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Product Tier Response", "Add Product Tier response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Max Length Product Tier] failed with exception : "+e)
		fnUpdateLog("[Max Length Product Tier] failed with exception : "+e)
	}
	finally
	{
		log.info "[Max Length Product Tier] Execution Completed Successfully......."
		fnUpdateLog("[Max Length Product Tier] Execution Completed Successfully.......\n")
	}
///////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

	def String fnGetFirstOffice()
	{	
		try
		{
			String sAppOfficeID = ""
			String sOfficeName = ""
			/////////////////////////////////////////////////Get First Office - Start////////////////////////////////////////////////////////////////
			fnRunRequest("ViewOffices");
			def respOfficesContent = context.expand('${ViewOffices#Response}')
			log.info respOfficesContent
			if (respOfficesContent!="")
			{
				jsonResponse = new JsonSlurper().parseText(respOfficesContent)
				int iAppOfficeItemsSize = jsonResponse["AppOfficeItems"].size()
				log.info "iAppOfficeItemsSize>>>"+iAppOfficeItemsSize
				
				sAppOfficeID = jsonResponse["AppOfficeItems"][0].AppOfficeID.toString()
				sOfficeName = jsonResponse["AppOfficeItems"][0].OfficeName.toString()
				log.info "sAppOfficeID>>>"+sAppOfficeID +"  sOfficeName>>>"+sOfficeName
				testRunner.testCase.setPropertyValue("AppOfficeID",sAppOfficeID)
				testRunner.testCase.setPropertyValue("OfficeName",sOfficeName)
			}
			else
			{
				log.info "No Office available. Please add an office and resume...."
			}
			return sOfficeName
			/////////////////////////////////////////////////Get First Office - End////////////////////////////////////////////////////////////////
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGetFirstOffice] failed with exception : "+e)
			testRunner.fail("Function [fnGetFirstOffice] failed with exception : "+e)
		}
	
		
	}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddProductTier" id="21b78222-7717-4312-a82b-d73554ecb6ab" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/ProductTiers" methodName="AddProductTier" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddProductTier" id="355346a2-a3c0-4473-9742-82287a4e59b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID": ${#TestCase#AppOfficeID}, "TierName": "${#TestCase#NewPTName}"
}
</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewProductTiers" id="8e078764-c06a-4984-8f43-b8c18c4b0103" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/ProductTiers" methodName="ViewProductTiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewProductTiers" id="355346a2-a3c0-4473-9742-82287a4e59b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/ProductTiers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewOffices" id="28995b49-1897-493c-98d3-dc5d7169020c" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="ViewOffices" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewOffices" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewPTId","0")
testCase.setPropertyValue("NewPTName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalProductTiers","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")
testCase.setPropertyValue("AppOfficeID","")
testCase.setPropertyValue("OfficeName","")</con:setupScript><con:tearDownScript>log.info "Max Length Region Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)


////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>AppOfficeID</con:name><con:value>34</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>NewPTId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewPTName</con:name><con:value>TestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestXTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestProductTierTestX_93273</con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewRegName</con:name><con:value/></con:property><con:property><con:name>OfficeName</con:name><con:value>AutoTestOffice_11260</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Max Length Product Tier</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Max Length Product Tier Response </td><td class = "tsgen" width = 25%>Max Length Product Tier response should throw errors</td><td class = "tsgen" width = 25%>Max Length Product Tier NOT added and response has errors</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Max Length Product Tier Name in View Product Tier Response </td><td class = "tsgen" width = 25%>Max Length Product Tier should NOT be added </td><td class = "tsgen" width = 25%>Max Length Product Tier NOT found successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalProductTiers</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalRegions</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>2</con:value></con:property></con:properties></con:testCase><con:properties/><con:setupScript/></con:testSuite><con:testSuite id="d62d97cc-ff8f-4708-8294-f040fc30f481" name="Offices_TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="de660b63-a8f3-4b43-9221-42c823e21caf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ViewOffices_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ViewOffices_Groovy" id="063fa59b-bec6-4251-b58c-3a989cd034be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat;
import groovy.time.*

scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

/*
fnGenerateTCStepsReport("Verify View Office", "", "", "")
fnGenerateTCStepsReport("sStepDesc1", "sExpResult1", "sActualResult1", "Pass")
*/



	log.info "[View Office] Execution Started.........." 
	fnUpdateLog("[View Office] Execution Started..........")
	fnGenerateTCStepsReport("Verify View Office", "", "", "")
	
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	log.info sTSName
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	try
	{
		fnRunRequest("ViewOffices");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewOffices#Request}')
		def responseContent = context.expand('${ViewOffices#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		//def request_EnableHotspot = context.expand('${initiateEnableHotSpot#Request}')
		//def response_EnableHotspot = context.expand('${initiateEnableHotSpot#Response}')
	
		//def VIN = context.expand( '${#TestSuite#VIN}' ) 
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
			log.info "Before Line>>"
			/*responseContent.replaceAll('\\{\\"','\\{\n\\"')
			responseContent.replaceAll(',"',',\n"')
			responseContent.replaceAll('"}','"\n}')
			responseContent.replaceAll(',{',',\n{')*/
			/*respFile1.eachLine{ line ->
	
			//log.info(newCode)
				if (line.contains("Office"))
				{
					log.info "Office Line>>"+line
				}
				else
				{
					log.info "Normal Line>>"+line
				}
			}*/	
			///////////////////Start - Parse JSON and get the size of Office List///////////////////
			log.info "In loop1"
			jsonResponse = new JsonSlurper().parseText(responseContent)
			jsonResponse = new JsonSlurper().parseText(responseContent)
			log.info "In loop2"
			def iMaxOfficeId = 0
			jsonResponse["AppOfficeItems"].each
			{ 
				//log.info "Data for Row>> "+ i.toString() +"  "+it
				if(it.AppOfficeID >iMaxOfficeId)
				{
					iMaxOfficeId = it.AppOfficeID
				}
				//log.info "OfficeID>>>>>>>>>>>>>>>>>>>>>"+ it.AppOfficeID 
				//log.info "OfficeName>>>>>>>>>>>>>>>>>>>"+ it.OfficeName	
			}
			log.info "Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId 
			fnUpdateLog("Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId)
			
			int iOfficeListSize = jsonResponse["AppOfficeItems"].size()
			log.info "Office List Size>>>>>>>>>>>>>>>>> "+iOfficeListSize.toString()
			//Write DB code here to validate the total number of records
		
			if(iOfficeListSize&lt;=0)
			{
				fnGenerateTCStepsReport("Verify Office List", "Office list should be retrieved", "Office list NOT retrieved", "Fail")
				testRunner.fail("No Office found..Check the View Office service and try again..")
				log.info "No Office found..Check the View Office service and try again.."
				fnUpdateLog("No Office found..Check the View Office service and try again..")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Office List", "Office list should be retrieved", "Offices retrieved successfully with total size of : "+iOfficeListSize.toString(), "Pass")
				testRunner.testCase.setPropertyValue("TotalOffices",iOfficeListSize.toString())
				log.info "Offices retrieved successfully with total size of : "+iOfficeListSize.toString()
				fnUpdateLog("Offices retrieved successfully with total size of : "+iOfficeListSize.toString())
			}
	  
		}
		else
		{
			fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{log.info "Exception"+e
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[View Offices] failed with exception : "+e)
		fnUpdateLog("[View Offices] failed with exception : "+e)
	}
	finally
	{
		log.info "[View Office] Execution Completed Successfully......." 
		fnUpdateLog("[View Office] Execution Completed Successfully.......\n")
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//def responseContent = testRunner.testCase.getTestStepByName("ViewOffices").getPropertyValue("response")
	//log.info responseContent



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{log.info "fnUpdateTCStepsCount"
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" &amp;&amp; sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}
</script></con:config></con:testStep><con:testStep type="restrequest" name="ViewOffices" id="6682622b-cc3a-43e5-adbd-e22150f25092" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="ViewOffices" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewOffices" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewOfficeId","0")
testCase.setPropertyValue("TotalOffices","0")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")
</con:setupScript><con:tearDownScript>log.info "View Offices Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////////////////////////////////////////////

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify View Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Office List </td><td class = "tsgen" width = 25%>Office list should be retrieved</td><td class = "tsgen" width = 25%>Offices retrieved successfully with total size of : 111</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalRegions</con:name><con:value>5</con:value></con:property><con:property><con:name>NewOfficeId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>111</con:value></con:property></con:properties></con:testCase><con:testCase id="cb363765-dc99-429e-86ce-90203507bc9b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AddOffice_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="AddOffice_Groovy" id="db3bbd44-0dcd-4d8b-a57a-7c2a6506dd70"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	log.info "[Add Office] Execution Started.........." 
	fnUpdateLog("[Add Office] Execution Started..........")
	
	fnGenerateTCStepsReport("Pre-requisite - Add Corporation", "", "", "")
	def runner = testRunner.testCase.testSuite.project.testSuites["Corporations_TS"].testCases["AddCorporation_TC"].run(null,false);
	//sTCStepsHTMLContent = testRunner.testCase.testSuite.project.testSuites[sTSName].testCases[sTCName].getPropertyValue("TCStepsHTMLContent")
	fnGenerateTCStepsReport("Verify Add Office", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	String sAppOfficeID = ""
	def sNewOfficeName = ""
	String sNewCorpName = testRunner.testCase.testSuite.getPropertyValue("NewCorpName")
	try
	{
		fnRunRequest("ViewOffices");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewOffices#Request}')
		def responseContent = context.expand('${ViewOffices#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max OfficeId and set at test case level property NewOfficeId,NewOfficeName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxOfficeId = 0
			int iOfficeListSize = jsonResponse["AppOfficeItems"].size()
			
			jsonResponse["AppOfficeItems"].each
			{ 
				//log.info it
				if(it.AppOfficeID >iMaxOfficeId)
				{
					iMaxOfficeId = it.AppOfficeID
				}
				//log.info "OfficeID>>>>>>>>>>>>>>>>>>>>>"+ it.AppOfficeID 
				//log.info "OfficeName>>>>>>>>>>>>>>>>>>>"+ it.OfficeName	
			}
			log.info "Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId 
			fnUpdateLog("Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId)
			log.info "Total Offices before Add : "+iOfficeListSize.toString()
			fnUpdateLog("Total Offices before Add : "+iOfficeListSize.toString())
		
			//int iRandomNum = fnRandomNum(10001,99999);
			//sNewOfficeName = "AutoTestOffice_"+iRandomNum.toString();
			sNewOfficeName = testRunner.testCase.testSuite.getPropertyValue("NewCorpName").toString().replaceAll("Corporation","Office")
			testRunner.testCase.setPropertyValue("NewOfficeName",sNewOfficeName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..");
		}
		//Start - Adding a new Office
		fnRunRequest("AddOffice");
		
		requestContent = context.expand('${AddOffice#Request}')
		log.info requestContent
		responseContent = context.expand('${AddOffice#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddOffice"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddOffice", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			//def sCorporation = context.expand( '${#Project#CorporateID}' )
			def sCorporation = context.expand( '${#TestSuite#CorporateID}' )
			//if(sKey=="Status" && sValue=="Action: Corporate Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Office Header Response", "Office should be added with proper header response", "Office : "+sNewOfficeName+" added successfully for Corporation : "+sNewCorpName+" (Id : "+sCorporation+")", "Pass")
				log.info "Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporation
				fnUpdateLog("Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporation)
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Office Response", "Office should be created with proper header response", "Office NOT added for Corporation : "+sNewCorpName+" (Id : "+sCorporation+")", "Fail")
				log.info "Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporation+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporation+" with header response : "+arrResult[0].toString())
				testRunner.fail("Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporation+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Office
		
			//sleep(1000)
			//Start - Verify newly added Office
			boolean bFlag = false
			fnRunRequest("ViewOffices");
			requestContent = context.expand('${ViewOffices#Request}')
			responseContent = context.expand('${ViewOffices#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iOfficeListSize = jsonResponse["AppOfficeItems"].size()
				log.info "Total Offices After Add : "+iOfficeListSize.toString()
				fnUpdateLog("Total Offices After Add : "+iOfficeListSize.toString())

				String sDefaultStoreNumber = fnGetPropertyValue("DefaultStoreNumber")
				String sAddress = fnGetPropertyValue("Address")
				String sCity = fnGetPropertyValue("City")
				String sState = fnGetPropertyValue("State")
				String sZipCode = fnGetPropertyValue("ZipCode")
				String sPhoneNumber = fnGetPropertyValue("PhoneNumber")
				String sQuoteEmailAddress = fnGetPropertyValue("QuoteEmailAddress")
				String sPropertyWalkSubmitEmailAddress = fnGetPropertyValue("PropertyWalkSubmitEmailAddress")

				
				
				jsonResponse["AppOfficeItems"].find
				{ 
					//log.info it
					//if(it.AppOfficeID == 367 && it.OfficeName == "TestOffice_367" )  //Just for testing
					//if(it.AppOfficeID.toString() == iNewOfficeId.toString() && it.OfficeName.toString() == sNewOfficeName )
					if(it.OfficeName.toString() == sNewOfficeName && it.CorporateID.toString() == sCorporation)
					{
						if (it.DefaultStoreNumber.toString() == sDefaultStoreNumber && it.Address.toString() == sAddress  && it.City.toString() == sCity && it.State.toString() == sState  && it.ZipCode.toString() == sZipCode && it.PhoneNumber.toString() == sPhoneNumber  && it.QuoteEmailAddress.toString() == sQuoteEmailAddress && it.PropertyWalkSubmitEmailAddress.toString() == sPropertyWalkSubmitEmailAddress)
						{
							bFlag = true
							sAppOfficeID = it.AppOfficeID.toString()
							//log.info "Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString()
							//fnUpdateLog("Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString() )
							fnGenerateTCStepsReport("Verify Office Name in View Office Response", "Actual Office name should match with Expected Office name ", "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation "+sNewCorpName+" (Id : "+sCorporation+")", "Pass")
							log.info "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation : "+sNewCorpName+" (Id : "+sCorporation+")"
							fnUpdateLog("Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation : "+sNewCorpName+" (Id : "+sCorporation+")")
							return true
						}
					}	
				}
			
				if(bFlag == true)
				{
					//testRunner.testCase.testSuite.project.testSuites["Property_TS"].testCases["AddProperty_TC"].setPropertyValue("AppOfficeID",sAppOfficeID)
					//testRunner.testCase.testSuite.project.testSuites["Property_TS"].testCases["AddProperty_TC"].setPropertyValue("OfficeName",sNewOfficeName)
					testRunner.testCase.testSuite.project.testSuites["Property_TS"].setPropertyValue("AppOfficeID",sAppOfficeID)
					testRunner.testCase.testSuite.project.testSuites["Property_TS"].setPropertyValue("OfficeName",sNewOfficeName)
					testRunner.testCase.testSuite.project.testSuites["Groups_TS"].setPropertyValue("AppOfficeID",sAppOfficeID)
					testRunner.testCase.testSuite.project.testSuites["Groups_TS"].setPropertyValue("OfficeName",sNewOfficeName)
					
					fnGenerateTCStepsReport("Validate Newly Added Office ", "Newly added Office should be validated", "Newly added Office validated successfully", "Pass")
					log.info "Newly added Office validated successfully"
					fnUpdateLog("Newly added Office validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Office ", "Newly added Office should be validated", "Newly added Office NOT validated. Office NOT found.", "Fail")
					log.info "Newly added Office NOT found"
					fnUpdateLog("Newly added Office NOT found")
					testRunner.fail("Newly added Office NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Office Response", "Add Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Offices] failed with exception : "+e)
		fnUpdateLog("[Add Offices] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Office] Execution Completed Successfully......."
		fnUpdateLog("[Add Office] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def String fnGetPropertyValue(String sPropertyName)
	{
		String  sPropValue = ""
		try
		{
			sPropValue = testRunner.testCase.getPropertyValue(sPropertyName)
			return sPropValue;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnGetPropertyValue] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "OfficeID": ${#TestCase#NewOfficeId},
		    "OfficeName": "${#TestCase#NewOfficeName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddOffice" id="a3e21845-e4a8-4afd-b910-0f262114f76d" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="AddOffice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddOffice" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"OfficeName": "${#TestCase#NewOfficeName}",
	"DefaultStoreNumber": "${#TestCase#DefaultStoreNumber}",
	"Address": "${#TestCase#Address}",
	"City": "${#TestCase#City}",
	"State": "${#TestCase#State}",
	"ZipCode": "${#TestCase#ZipCode}",
	"PhoneNumber": "${#TestCase#PhoneNumber}",
	"QuoteEmailAddress": "${#TestCase#QuoteEmailAddress}",
	"PropertyWalkSubmitEmailAddress": "${#TestCase#PropertyWalkSubmitEmailAddress}",
	"CorporateID": ${#TestSuite#CorporateID},
	"RegionID": ${#TestSuite#RegionID}
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewOffices" id="84b2476d-1402-4344-a3a1-8c5365644f58" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="ViewOffices" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewOffices" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewOfficeId","0")
testCase.setPropertyValue("NewOfficeName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalOffices","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
//testCase.setPropertyValue("NewCorpName","")
//testCase.setPropertyValue("CorporateID","0")
testCase.testSuite.setPropertyValue("NewCorpName","")
testCase.testSuite.setPropertyValue("CorporateID","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Add Office Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Pre-requisite - Add Corporation</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr><tr><td class = "tsindlevel1" width = 5%>2</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>2.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_60061 added successfully for Corporation : AutoTestCorporation_60061 (Id : 109)</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_60061 matches with Expected Office Name : AutoTestOffice_60061 for Corporation AutoTestCorporation_60061 (Id : 109)</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewOfficeId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewOfficeName</con:name><con:value>AutoTestOffice_60061</con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property><con:property><con:name>DefaultStoreNumber</con:name><con:value>1234</con:value></con:property><con:property><con:name>Address</con:name><con:value>AutoTestAddress</con:value></con:property><con:property><con:name>City</con:name><con:value>AutoTestCity</con:value></con:property><con:property><con:name>State</con:name><con:value>MI</con:value></con:property><con:property><con:name>ZipCode</con:name><con:value>48108</con:value></con:property><con:property><con:name>PhoneNumber</con:name><con:value>1234567</con:value></con:property><con:property><con:name>QuoteEmailAddress</con:name><con:value>AutoTestQuote@AutoTest.com</con:value></con:property><con:property><con:name>PropertyWalkSubmitEmailAddress</con:name><con:value>AutoTestSubmit@AutoTest.com</con:value></con:property></con:properties></con:testCase><con:testCase id="dc9adca9-d67b-4e1f-a1a9-b1d38781577e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DuplicateOffice_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DuplicateOffice_Groovy" id="c1fa21f6-1cb8-4e6c-91a6-c2b9cffd95fd"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	//fnGenerateTCStepsReport("Pre-requisite - Add Corporation", "", "", "")
	//def runner = testRunner.testCase.testSuite.project.testSuites["Corporations_TS"].testCases["AddCorporation_TC"].run(null,false);
	log.info "[Duplicate Office] Execution Started.........." 
	fnUpdateLog("[Duplicate Office] Execution Started.........." )
	fnGenerateTCStepsReport("Verify Duplicate Office", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	
	String sNewCorpName = testRunner.testCase.testSuite.getPropertyValue("NewCorpName")
	
	try
	{
		fnRunRequest("ViewOffices");
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewOffices#Request}')
		def responseContent = context.expand('${ViewOffices#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		
		//jsonRequest = new JsonSlurper().parseText(requestContent)
	
		///////////////////Start - Parse JSON and get Max OfficeId and set at test case level property NewOfficeId,NewOfficeName///////////////////
		def iMaxOfficeId = 0
		def sLatestOfficeName = ""
		def sNewOfficeName =""
		
		if (responseContent!="")
		{
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			int iOfficeListSize = jsonResponse["AppOfficeItems"].size()
			log.info "Total Offices Before Duplicate Add Attempt : "+iOfficeListSize.toString()
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Total Offices Before Duplicate Add Attempt : "+iOfficeListSize.toString()  +".\n")
			fnUpdateLog("Total Offices Before Duplicate Add Attempt : "+iOfficeListSize.toString() )
			
			String sCurrentCorp = testRunner.testCase.testSuite.getPropertyValue("CorporateID").toString()
			jsonResponse["AppOfficeItems"].each
			{ 
				//log.info it
				if(it.AppOfficeID >iMaxOfficeId)
				{
					iMaxOfficeId = it.AppOfficeID
					if(it.CorporateID == sCurrentCorp.toInteger())
					{
						sLatestOfficeName = it.OfficeName
					}
				}
				//log.info "OfficeID>>>>>>>>>>>>>>>>>>>>>"+ it.AppOfficeID 
				//log.info "OfficeName>>>>>>>>>>>>>>>>>>>"+ it.OfficeName	
			}
			log.info "Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId  +".\n")
			fnUpdateLog("Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId )
			log.info "Latest Office Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestOfficeName  
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Latest Office Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestOfficeName    +".\n")
			fnUpdateLog("Latest Office Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestOfficeName  )
	
			sNewOfficeName = sLatestOfficeName;
			testRunner.testCase.setPropertyValue("NewOfficeName",sNewOfficeName)
		}
		else
		{
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..\n"
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..\n");
		}
		
	
		//Start - Adding a new Office
		fnRunRequest("AddOffice");
	
		requestContent = context.expand('${AddOffice#Request}')
		log.info requestContent
		responseContent = context.expand('${AddOffice#Response}')
		log.info responseContent
		
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sCode = jsonResponse.code
			String sStatus = jsonResponse.status
			String sErrors = jsonResponse.errors
			log.info sCode+sStatus+sErrors
			//if(sKey=="Status" && sValue=="Add Office Failed")
			
			if(sCode=="RQ500" && sStatus=="500")
			{
				fnGenerateTCStepsReport("Verify Duplicate Office Response", "Duplicate Office response should throw errors", "Duplicate Office NOT added and response has errors", "Pass")
				log.info "Duplicate Office : "+sNewOfficeName+" NOT added successfully"
				fnUpdateLog("Duplicate Office : "+sNewOfficeName+" NOT added successfully")	
			}
			else
			{	
				fnGenerateTCStepsReport("Verify Duplicate Office Response", "Duplicate Office response should throw errors", "Duplicate Office added and response has NO errors", "Fail")
				log.info "Duplicate Office : "+sNewOfficeName+" should NOT be added"
				fnUpdateLog("Duplicate Office : "+sNewOfficeName+" should NOT be added")	
				testRunner.fail("Duplicate Office : "+sNewOfficeName+" should NOT be added")
			}
			//End - Adding a new Office
		
			//Start - Verify newly added Office
			boolean bFlag = true
			fnRunRequest("ViewOffices");
			requestContent = context.expand('${ViewOffices#Request}')
			responseContent = context.expand('${ViewOffices#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
			
		
				iOfficeListSize = jsonResponse["AppOfficeItems"].size()
				log.info "Total Offices After Duplicate Add Attempt : "+iOfficeListSize.toString()
				fnUpdateLog("Total Offices After Duplicate Add Attempt : "+iOfficeListSize.toString())	
			
				int iDupOfficeCount = 0 
				
				jsonResponse["AppOfficeItems"].find
				{ 
					//log.info it
					//if(it.AppOfficeID == 367 && it.OfficeName == "TestOffice_367" )  //Just for testing
					//if(it.AppOfficeID == iNewOfficeId && it.OfficeName == sNewOfficeName )  //No need to validate on Office Id, It's auto generated by DB
					if(it.OfficeName == sNewOfficeName )
					{	
						iDupOfficeCount = iDupOfficeCount +1
						bFlag = false
						//log.info "Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString()+" It should NOT be added."
						//fnUpdateLog("Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString()+" It should NOT be added.")
						if(iDupOfficeCount>=2)
						{	
							fnGenerateTCStepsReport("Verify Office Name in View Office Response", "Office should NOT be added ", "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+". It should NOT be added.", "Fail")
							log.info "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" It should NOT be added."
							fnUpdateLog("Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" It should NOT be added.")
						}
						//return true  //Look for two duplocate Offices
					}	
				}
				
				log.info "iDupOfficeCount>>>>>>>>>>>>>>>"+iDupOfficeCount
				if(bFlag == false && iDupOfficeCount>=2)
				{
					fnGenerateTCStepsReport("Verify Duplicate Office Name in View Office Response", "Duplicate Office should NOT be added ", "Two duplicate Offices found.", "Fail")
					log.info "Duplicate Office added and found. Test failed.."
					fnUpdateLog("Duplicate Office added and found. Test failed..")
					testRunner.fail("Duplicate Office added and found. Test failed..")
				}
				else
				{
					fnGenerateTCStepsReport("Verify Duplicate Office Name in View Office Response", "Duplicate Office should NOT be added ", "Duplicate Office NOT found successfully", "Pass")
					log.info "Duplicate Office NOT found successfully"
					fnUpdateLog("Duplicate Office NOT found successfully")
				}
			}
			else
			{
				fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
				fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
	
		//log.info "[Duplicate Office] Execution Ended......."
		//fnUpdateLog("[Duplicate Office] Execution Ended.......\n")
		//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Office Response", "Add Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Duplicate Offices] failed with exception : "+e)
		fnUpdateLog("[Duplicate Offices] failed with exception : "+e)
	}
	finally
	{
		log.info "[Duplicate Office] Execution Completed Successfully......."
		fnUpdateLog("[Duplicatel Office] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddOffice" id="d57ec470-c3d9-425b-ac0a-2387d3024621" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="AddOffice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddOffice" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"OfficeName": "${#TestCase#NewOfficeName}",
	"DefaultStoreNumber": "${#TestCase#DefaultStoreNumber}",
	"Address": "${#TestCase#Address}",
	"City": "${#TestCase#City}",
	"State": "${#TestCase#State}",
	"ZipCode": "${#TestCase#ZipCode}",
	"PhoneNumber": "${#TestCase#PhoneNumber}",
	"QuoteEmailAddress": "${#TestCase#QuoteEmailAddress}",
	"PropertyWalkSubmitEmailAddress": "${#TestCase#PropertyWalkSubmitEmailAddress}",
	"CorporateID": ${#TestSuite#CorporateID},
	"RegionID": ${#TestSuite#RegionID}
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewOffices" id="9763952c-9d75-42e3-a3f9-00f12cdf19f7" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="ViewOffices" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewOffices" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewOfficeId","0")
testCase.setPropertyValue("NewOfficeName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalOffices","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")
//testCase.setPropertyValue("NewCorpName","")
//testCase.setPropertyValue("CorporateID","0")
//testCase.testSuite.setPropertyValue("NewCorpName","")
//testCase.testSuite.setPropertyValue("CorporateID","0")</con:setupScript><con:tearDownScript>log.info "Duplicate Office Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Duplicate Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Duplicate Office Response </td><td class = "tsgen" width = 25%>Duplicate Office response should throw errors</td><td class = "tsgen" width = 25%>Duplicate Office NOT added and response has errors</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Duplicate Office Name in View Office Response </td><td class = "tsgen" width = 25%>Duplicate Office should NOT be added </td><td class = "tsgen" width = 25%>Duplicate Office NOT found successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewOfficeId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewOfficeName</con:name><con:value>AutoTestOffice_24426</con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property><con:property><con:name>DefaultStoreNumber</con:name><con:value>1234</con:value></con:property><con:property><con:name>Address</con:name><con:value>AutoTestAddress</con:value></con:property><con:property><con:name>City</con:name><con:value>AutoTestCity</con:value></con:property><con:property><con:name>State</con:name><con:value>MI</con:value></con:property><con:property><con:name>ZipCode</con:name><con:value>48108</con:value></con:property><con:property><con:name>PhoneNumber</con:name><con:value>1234567</con:value></con:property><con:property><con:name>QuoteEmailAddress</con:name><con:value>AutoTestQuote@AutoTest.com</con:value></con:property><con:property><con:name>PropertyWalkSubmitEmailAddress</con:name><con:value>AutoTestSubmit@AutoTest.com</con:value></con:property></con:properties></con:testCase><con:testCase id="7cf0b651-202c-4f92-9323-7183cbf98c19" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MaxLengthOffice_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="MaxLengthOffice_Groovy" id="2d863f1c-1a6a-47e6-906f-71c79fc91d12"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
	
	log.info "[Max Length Office] Execution Started.........." 
	fnUpdateLog("[Max Length Office] Execution Started.........." )
	fnGenerateTCStepsReport("Verify Max Length Office", "", "", "")
	
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def iMaxOfficeId = 0
	def sLatestOfficeName = ""
	def sNewOfficeName =""

	try
	{
		fnRunRequest("ViewOffices");
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewOffices#Request}')
		def responseContent = context.expand('${ViewOffices#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		
		//jsonRequest = new JsonSlurper().parseText(requestContent)
	
		///////////////////Start - Parse JSON and get Max OfficeId and set at test case level property NewOfficeId,NewOfficeName///////////////////
		
		
		if (responseContent!="")
		{
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			int iOfficeListSize = jsonResponse["AppOfficeItems"].size()
			log.info "Total Offices Before Max Length Add Attempt : "+iOfficeListSize.toString()
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Total Offices Before Max Length Add Attempt : "+iOfficeListSize.toString()  +".\n")
			fnUpdateLog("Total Offices Before Max Length Add Attempt : "+iOfficeListSize.toString() )
			
			jsonResponse["AppOfficeItems"].each
			{ 
				//log.info it
				if(it.AppOfficeID >iMaxOfficeId)
				{
					iMaxOfficeId = it.AppOfficeID
					sLatestOfficeName = it.OfficeName
				}
				//log.info "OfficeID>>>>>>>>>>>>>>>>>>>>>"+ it.AppOfficeID 
				//log.info "OfficeName>>>>>>>>>>>>>>>>>>>"+ it.OfficeName	
			}
			log.info "Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId  +".\n")
			fnUpdateLog("Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId )
			log.info "Latest Office Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestOfficeName  
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Latest Office Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestOfficeName    +".\n")
			fnUpdateLog("Latest Office Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestOfficeName  )
	
			int iRandomNum = fnRandomNum(10001,99999);
			sNewOfficeName = "TestOfficeTestOfficeTestOfficeTestOfficeTestOfficeTestOfficeTestOfficeTestOfficeTestOfficeTestX_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewOfficeName",sNewOfficeName)
		}
		else
		{
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..\n";
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..\n");
		}
		
	
		//Start - Adding a new Office
		fnRunRequest("AddOffice");
	
		requestContent = context.expand('${AddOffice#Request}')
		log.info requestContent
		responseContent = context.expand('${AddOffice#Response}')
		log.info responseContent
		
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sCode = jsonResponse.code
			String sStatus = jsonResponse.status
			String sErrors = jsonResponse.errors
			log.info sCode+sStatus+sErrors
			//if(sKey=="Status" && sValue=="Add Office Failed")
			if(sCode=="RQ500" && sStatus=="500")
			{
				fnGenerateTCStepsReport("Verify Max Length Office Response", "Max Length Office response should throw errors", "Max Length Office NOT added and response has errors", "Pass")
				log.info "Max Length Office : "+sNewOfficeName+" NOT added successfully"
				fnUpdateLog("Max Length Office : "+sNewOfficeName+" NOT added successfully")	
			}
			else
			{
				fnGenerateTCStepsReport("Verify Max Length Office Response", "Max Length Office response should throw errors", "Max Length Office added and response has NO errors", "Fail")
				log.info "Max Length Office : "+sNewOfficeName+" should NOT be added"
				fnUpdateLog("Max Length Office : "+sNewOfficeName+" should NOT be added")	
				testRunner.fail("Max Length Office : "+sNewOfficeName+" should NOT be added")
			}
			//End - Adding a new Office
		
			//Start - Verify newly added Office
			boolean bFlag = true
			fnRunRequest("ViewOffices");
			requestContent = context.expand('${ViewOffices#Request}')
			responseContent = context.expand('${ViewOffices#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
			
		
				iOfficeListSize = jsonResponse["AppOfficeItems"].size()
				log.info "Total Offices After Max Length Add Attempt : "+iOfficeListSize.toString()
				fnUpdateLog("Total Offices After Max Length Add Attempt : "+iOfficeListSize.toString())	
			
				int iDupOfficeCount = 0 
				
				jsonResponse["AppOfficeItems"].find
				{ 
					//log.info it
					//if(it.AppOfficeID == 367 && it.OfficeName == "TestOffice_367" )  //Just for testing
					//if(it.AppOfficeID == iNewOfficeId && it.OfficeName == sNewOfficeName )  //No need to validate on Office Id, It's auto generated by DB
					if(it.OfficeName == sNewOfficeName )
					{	
						iDupOfficeCount = iDupOfficeCount +1
						bFlag = false
						//log.info "Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString()+" It should NOT be added."
						//fnUpdateLog("Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString()+" It should NOT be added.")
						if(iDupOfficeCount>=2)
						{
							fnGenerateTCStepsReport("Verify Office Name in View Office Response", "Office should NOT be added ", "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+". It should NOT be added.", "Fail")
							log.info "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" It should NOT be added."
							fnUpdateLog("Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" It should NOT be added.")
						}
						//return true  //Look for two duplocate Offices
					}	
				}
				
				log.info "iDupOfficeCount>>>>>>>>>>>>>>>"+iDupOfficeCount
				if(bFlag == false && iDupOfficeCount>=2)
				{
					fnGenerateTCStepsReport("Verify Max Length Office Name in View Office Response", "Max Length Office should NOT be added ", "Max Length Office found.", "Fail")
					log.info "Max Length Office added and found. Test failed.."
					fnUpdateLog("Max Length Office added and found. Test failed..")
					testRunner.fail("Max Length Office added and found. Test failed..")
				}
				else
				{
					fnGenerateTCStepsReport("Verify Max Length Office Name in View Office Response", "Max Length Office should NOT be added ", "Max Length Office NOT found successfully", "Pass")
					log.info "Max Length Office NOT found successfully"
					fnUpdateLog("Max Length Office NOT found successfully")
				}
			}
			else
			{
				fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
				fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Office Response", "Add Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Max Length Offices] failed with exception : "+e)
		fnUpdateLog("[Max Length Offices] failed with exception : "+e)
	}
	finally
	{
		log.info "[Max Length Office] Execution Completed Successfully......."
		fnUpdateLog("[Max Length Office] Execution Completed Successfully.......\n")
	}
///////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

	]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddOffice" id="c93fa40c-c247-42ce-b005-fe8d159f5fb8" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="AddOffice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddOffice" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"OfficeName": "${#TestCase#NewOfficeName}",
	"DefaultStoreNumber": "1234",
	"Address": "AutoTestAddress",
	"City": "AutoTestCity",
	"State": "MI",
	"ZipCode": "48108",
	"PhoneNumber": "1112222",
	"QuoteEmailAddress": "AutoTestQuote@AutoTest.com",
	"PropertyWalkSubmitEmailAddress": "AutoTestSubmit@AutoTest.com",
	"CorporateID": ${#TestSuite#CorporateID}
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewOffices" id="26517bc6-0b65-4647-abd9-8aefad85798d" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="ViewOffices" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewOffices" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("NewRegId","0")
testCase.setPropertyValue("NewRegName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalRegions","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Max Length Region Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)


////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Max Length Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Max Length Office Response </td><td class = "tsgen" width = 25%>Max Length Office response should throw errors</td><td class = "tsgen" width = 25%>Max Length Office NOT added and response has errors</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Max Length Office Name in View Office Response </td><td class = "tsgen" width = 25%>Max Length Office should NOT be added </td><td class = "tsgen" width = 25%>Max Length Office NOT found successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>NewRegName</con:name><con:value/></con:property><con:property><con:name>TotalRegions</con:name><con:value>0</con:value></con:property><con:property><con:name>NewOfficeName</con:name><con:value>TestOfficeTestOfficeTestOfficeTestOfficeTestOfficeTestOfficeTestOfficeTestOfficeTestOfficeTestX_78309</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>NewCorpName</con:name><con:value>AutoTestCorporation_60061</con:value></con:property><con:property><con:name>CorporateID</con:name><con:value>109</con:value></con:property><con:property><con:name>RegionID</con:name><con:value>61</con:value></con:property><con:property><con:name>NewRegName</con:name><con:value>TestRegion_48918</con:value></con:property></con:properties><con:setupScript/></con:testSuite><con:testSuite id="f3aac9fb-3e5d-4895-b646-9cfb766e498c" name="Property_TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="344dc9ad-588c-4166-82d7-5dbd49938aee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AddProperty_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="AddProperty_Groovy" id="c35113a8-5390-4b5f-a75d-0bb22c1da2b2"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	fnGenerateTCStepsReport("Pre-requisite - Add Corporation and Office", "", "", "")
	def runner = testRunner.testCase.testSuite.project.testSuites["Offices_TS"].testCases["AddOffice_TC"].run(null,false);
	
	log.info "[Add Property] Execution Started.........." 
	fnUpdateLog("[Add Property] Execution Started..........")
	fnGenerateTCStepsReport("Verify Add Property", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewPropertyName = ""
	def sAppOfficeID = context.expand( '${#TestSuite#AppOfficeID}' )
	def sOfficeName = context.expand( '${#TestSuite#OfficeName}' )
	def (OfficeInitial, OfficeLast) = sOfficeName.tokenize( '_' )
	String sOfficeRandomNum = OfficeLast;
	String sCorporationName = testRunner.testCase.testSuite.project.testSuites["Corporations_TS"].testCases["AddCorporation_TC"].getPropertyValue("NewCorpName")
	
	try
	{
		fnRunRequest("ViewProperties");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//def sCount = testRunner.testCase.testSuite.getPropertyValue("TestCount")
		def requestContent = context.expand('${ViewProperties#Request}')
		def responseContent = context.expand('${ViewProperties#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max PropertyId and set at test case level property NewPropertyId,NewPropertyName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxPropertyId = 0
			int iPropertyListSize = jsonResponse["properties"].size()
			
			jsonResponse["properties"].each
			{ 
				//log.info it
				if(it.PropertyID >iMaxPropertyId)
				{
					iMaxPropertyId = it.PropertyID
				}
				//log.info "PropertyID>>>>>>>>>>>>>>>>>>>>>"+ it.PropertyID 
				//log.info "PropertyName>>>>>>>>>>>>>>>>>>>"+ it.ProjectName	
			}
			log.info "Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId 
			fnUpdateLog("Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId)
			log.info "Total Properties before Add : "+iPropertyListSize.toString()
			fnUpdateLog("Total Properties before Add : "+iPropertyListSize.toString())
		
			//int iRandomNum = fnRandomNum(10001,99999);
			//sNewPropertyName = "AutoTestProperty_"+iRandomNum.toString();
			sNewPropertyName = "AutoTestProperty_"+sOfficeRandomNum;
			testRunner.testCase.setPropertyValue("NewPropertyName",sNewPropertyName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Property..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Property.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Property..");
		}
		//Start - Adding a new Property
		fnRunRequest("AddProperty");
		
		requestContent = context.expand('${AddProperty#Request}')
		log.info requestContent
		responseContent = context.expand('${AddProperty#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddProperty"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddProperty", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			
			//if(sKey=="Status" && sValue=="Action: Office Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Property Header Response", "Property should be added with proper header response", "Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Pass")
				log.info "Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")"
				fnUpdateLog("Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Property Response", "Property should be created with proper header response", "Property NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Fail")
				log.info "Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
				testRunner.fail("Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Property
		
			//sleep(1000)
			//Start - Verify newly added Property
			boolean bFlag = false
			fnRunRequest("ViewProperties");
			requestContent = context.expand('${ViewProperties#Request}')
			responseContent = context.expand('${ViewProperties#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iPropertyListSize = jsonResponse["properties"].size()
				log.info "Total Properties After Add : "+iPropertyListSize.toString()
				fnUpdateLog("Total Properties After Add : "+iPropertyListSize.toString())

				
				String sAddress = fnGetPropertyValue("Address")
				String sCity = fnGetPropertyValue("City")
				String sState = fnGetPropertyValue("State")
				String sZipCode = fnGetPropertyValue("ZipCode")
				String sCounty = fnGetPropertyValue("County")
				String sMainSqFt = fnGetPropertyValue("MainSqFt")
				String sNumberBedroom = fnGetPropertyValue("NumberBedroom")
				String sNumberBathroom = fnGetPropertyValue("NumberBathroom")
				String sYearBuilt = fnGetPropertyValue("YearBuilt")
				String sComment = fnGetPropertyValue("Comment")
				String sGateCode = fnGetPropertyValue("GateCode")
				String sLockBox = fnGetPropertyValue("LockBox")
				String swalkUserAssigned = fnGetPropertyValue("walkUserAssigned")
				String sPropertyStatus = "Assigned Not Walked" //"Not Assigned" //remove comment once status bug gets fixed
				//&& it.walkUserAssigned.toString() == null
				
				jsonResponse["properties"].find
				{ log.info "it.walkUserAssigned.toString()>>>>>"+it.walkUserAssigned.toString()
					//log.info it
					//if(it.PropertyID == 367 && it.ProjectName == "TestProperty_367" )  //Just for testing
					//if(it.PropertyID.toString() == iNewPropertyId.toString() && it.ProjectName.toString() == sNewPropertyName )
					if(it.ProjectName.toString() == sNewPropertyName && it.AppOfficeID.toString() == sAppOfficeID)
					{
						if (it.PropertyStatus.toString() == sPropertyStatus && it.Address.toString() == sAddress  && it.City.toString() == sCity && it.State.toString() == sState  && it.ZipCode.toString() == sZipCode && it.County.toString() == sCounty  && it.MainSqFt.toString() == sMainSqFt && it.NumberBedroom.toString() == sNumberBedroom && it.NumberBathroom.toString() == sNumberBathroom  && it.YearBuilt.toString() == sYearBuilt && it.Comment.toString() == sComment  && it.GateCode.toString() == sGateCode && it.LockBox.toString() == sLockBox) // && it.walkUserAssigned.toString() == swalkUserAssigned) //remove comment once user bug gets fixed
						{
							bFlag = true
							//log.info "Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString()
							//fnUpdateLog("Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString() )
							fnGenerateTCStepsReport("Verify Property Name in View Property Response", "Actual Property name should match with Expected Property name ", "Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Pass")
							log.info "Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName
							fnUpdateLog("Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName)
							return true
						}
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Property ", "Newly added Property should be validated", "Newly added Property validated successfully", "Pass")
					log.info "Newly added Property validated successfully"
					fnUpdateLog("Newly added Property validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Property ", "Newly added Property should be validated", "Newly added Property NOT validated. Property NOT found.", "Fail")
					log.info "Newly added Property NOT found"
					fnUpdateLog("Newly added Property NOT found")
					testRunner.fail("Newly added Property NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Property Response", "Add Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Properties] failed with exception : "+e)
		fnUpdateLog("[Add Properties] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Property] Execution Completed Successfully......."
		fnUpdateLog("[Add Property] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def String fnGetPropertyValue(String sPropertyName)
	{
		String  sPropValue = ""
		try
		{
			sPropValue = testRunner.testCase.getPropertyValue(sPropertyName)
			return sPropValue;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnGetPropertyValue] failed with exception : "+e)
		}
	}
	
	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "PropertyID": ${#TestCase#NewPropertyId},
		    "PropertyName": "${#TestCase#NewPropertyName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddProperty" id="842a9cdf-1b38-40de-a42b-7b2c90ef7f07" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="AddProperty" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddProperty" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID":${#TestSuite#AppOfficeID},
	"ProjectName":"${#TestCase#NewPropertyName}",
	"Address":"${#TestCase#Address}",
	"City":"${#TestCase#City}",
	"State":"${#TestCase#State}",
	"ZipCode":"${#TestCase#ZipCode}",
	"County":"${#TestCase#County}",
	"MainSqFt":"${#TestCase#MainSqFt}",
	"NumberBedroom":"${#TestCase#NumberBedroom}",
	"NumberBathroom":"${#TestCase#NumberBathroom}",
	"YearBuilt":"${#TestCase#YearBuilt}",
	"Comment":"${#TestCase#Comment}",
	"GateCode":"${#TestCase#GateCode}",
	"LockBox":"${#TestCase#LockBox}",
	"walkUserAssigned":"${#TestCase#walkUserAssigned}"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewProperties" id="8aef88a9-0720-4117-b00f-e226b2511ed0" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="ViewProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewProperties" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>//testCase.setPropertyValue("AppOfficeID","0")
//testCase.setPropertyValue("OfficeName","")
testCase.testSuite.setPropertyValue("AppOfficeID","0")
testCase.testSuite.setPropertyValue("OfficeName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalOffices","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")

</con:setupScript><con:tearDownScript>log.info "Add Property Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Pre-requisite - Add Corporation and Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr><tr><td class = "tsindlevel1" width = 5%>2</td><td class = "tsgenlevel1" width = 25%>Verify Add Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>2.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_50521 added successfully for Office Id : 168 and Office Name : AutoTestOffice_50521 (Corporation : AutoTestCorporation_50521)</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_50521 matches with Expected Property Name : AutoTestProperty_50521 for Office ID : 168 and Office Name : AutoTestOffice_50521 (Corporation : AutoTestCorporation_50521)</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property><con:property><con:name>NewPropertyName</con:name><con:value>AutoTestProperty_50521</con:value></con:property><con:property><con:name>Address</con:name><con:value>AutoTestAddress</con:value></con:property><con:property><con:name>City</con:name><con:value>AutoTestCity</con:value></con:property><con:property><con:name>State</con:name><con:value>MI</con:value></con:property><con:property><con:name>ZipCode</con:name><con:value>48108</con:value></con:property><con:property><con:name>County</con:name><con:value>AutoTestCounty</con:value></con:property><con:property><con:name>MainSqFt</con:name><con:value>1234</con:value></con:property><con:property><con:name>NumberBedroom</con:name><con:value>2</con:value></con:property><con:property><con:name>NumberBathroom</con:name><con:value>2.5</con:value></con:property><con:property><con:name>YearBuilt</con:name><con:value>2015</con:value></con:property><con:property><con:name>Comment</con:name><con:value>AutoTestComment</con:value></con:property><con:property><con:name>GateCode</con:name><con:value>AutoGCode</con:value></con:property><con:property><con:name>LockBox</con:name><con:value>AutoLckBox</con:value></con:property><con:property><con:name>walkUserAssigned</con:name><con:value>Bryce</con:value></con:property><con:property><con:name>AppOfficeID</con:name><con:value>140</con:value></con:property><con:property><con:name>OfficeName</con:name><con:value>AutoTestOffice_36527</con:value></con:property></con:properties></con:testCase><con:testCase id="2fcbf98c-8ac2-4fb9-8c12-7934cb9eb378" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ViewProperties_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ViewProperties_Groovy" id="3ea8ebfd-420f-48c5-9561-fcab72cae38f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat;
import groovy.time.*

scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

/*
fnGenerateTCStepsReport("Verify View Property", "", "", "")
fnGenerateTCStepsReport("sStepDesc1", "sExpResult1", "sActualResult1", "Pass")
*/



	log.info "[View Properties] Execution Started.........." 
	fnUpdateLog("[View Properties] Execution Started..........")
	fnGenerateTCStepsReport("Verify View Properties", "", "", "")
	
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	log.info sTSName
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	try
	{
		fnRunRequest("ViewProperties");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewProperties#Request}')
		def responseContent = context.expand('${ViewProperties#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		//def request_EnableHotspot = context.expand('${initiateEnableHotSpot#Request}')
		//def response_EnableHotspot = context.expand('${initiateEnableHotSpot#Response}')
	
			if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
			log.info "Before Line>>"
			/*responseContent.replaceAll('\\{\\"','\\{\n\\"')
			responseContent.replaceAll(',"',',\n"')
			responseContent.replaceAll('"}','"\n}')
			responseContent.replaceAll(',{',',\n{')*/
			/*respFile1.eachLine{ line ->
	
			//log.info(newCode)
				if (line.contains("Property"))
				{
					log.info "Property Line>>"+line
				}
				else
				{
					log.info "Normal Line>>"+line
				}
			}*/	
			///////////////////Start - Parse JSON and get the size of Property List///////////////////
			log.info "In loop1"
			jsonResponse = new JsonSlurper().parseText(responseContent)
			jsonResponse = new JsonSlurper().parseText(responseContent)
			log.info "In loop2"
			def iMaxPropertyId = 0
			jsonResponse["properties"].each
			{ 
				//log.info "Data for Row>> "+ i.toString() +"  "+it
				if(it.PropertyID >iMaxPropertyId)
				{
					iMaxPropertyId = it.PropertyID
				}
				//log.info "PropertyID>>>>>>>>>>>>>>>>>>>>>"+ it.PropertyID 
				//log.info "PropertyName>>>>>>>>>>>>>>>>>>>"+ it.PropertyName	
			}
			log.info "Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId 
			fnUpdateLog("Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId)
			
			int iPropertyListSize = jsonResponse["properties"].size()
			log.info "Property List Size>>>>>>>>>>>>>>>>> "+iPropertyListSize.toString()
			//Write DB code here to validate the total number of records
		
			if(iPropertyListSize&lt;=0)
			{
				fnGenerateTCStepsReport("Verify Property List", "Property list should be retrieved", "Property list NOT retrieved", "Fail")
				testRunner.fail("No Property found..Check the View Property service and try again..")
				log.info "No Property found..Check the View Property service and try again.."
				fnUpdateLog("No Property found..Check the View Property service and try again..")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Property List", "Property list should be retrieved", "Properties retrieved successfully with total size of : "+iPropertyListSize.toString(), "Pass")
				testRunner.testCase.setPropertyValue("TotalProperties",iPropertyListSize.toString())
				log.info "Properties retrieved successfully with total size of : "+iPropertyListSize.toString()
				fnUpdateLog("Properties retrieved successfully with total size of : "+iPropertyListSize.toString())
			}
	  
		}
		else
		{
			fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{log.info "Exception"+e
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[View Properties] failed with exception : "+e)
		fnUpdateLog("[View Properties] failed with exception : "+e)
	}
	finally
	{
		log.info "[View Property] Execution Completed Successfully......." 
		fnUpdateLog("[View Property] Execution Completed Successfully.......\n")
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//def responseContent = testRunner.testCase.getTestStepByName("ViewProperties").getPropertyValue("response")
	//log.info responseContent



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{log.info "fnUpdateTCStepsCount"
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" &amp;&amp; sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}
</script></con:config></con:testStep><con:testStep type="restrequest" name="ViewProperties" id="79d22f56-2b86-4a0e-924c-203a3084f46a" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="ViewProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewProperties" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("PropertyId","0")
testCase.setPropertyValue("TotalProperties","0")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")
</con:setupScript><con:tearDownScript>log.info "View Properties Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////////////////////////////////////////////

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify View Properties</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Property List </td><td class = "tsgen" width = 25%>Property list should be retrieved</td><td class = "tsgen" width = 25%>Properties retrieved successfully with total size of : 98</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalRegions</con:name><con:value>5</con:value></con:property><con:property><con:name>NewOfficeId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalProperties</con:name><con:value>98</con:value></con:property><con:property><con:name>PropertyId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="9541671b-4f5b-450f-885e-c36aae96bc48" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DuplicateProperty_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DuplicateProperty_Groovy" id="7a91d290-7c83-4140-b4e2-1b7866a96662"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	fnGenerateTCStepsReport("Pre-requisite - Add Corporation and Office", "", "", "")
	def runner = testRunner.testCase.testSuite.project.testSuites["Offices_TS"].testCases["AddOffice_TC"].run(null,false);
	
	log.info "[Duplicate Property] Execution Started.........." 
	fnUpdateLog("[Duplicate Property] Execution Started..........")
	fnGenerateTCStepsReport("Verify Duplicate Property", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewPropertyName = ""
	def sAppOfficeID = context.expand( '${#TestSuite#AppOfficeID}' )
	def sOfficeName = context.expand( '${#TestSuite#OfficeName}' )
	def (OfficeInitial, OfficeLast) = sOfficeName.tokenize( '_' )
	String sOfficeRandomNum = OfficeLast;
	String sCorporationName = testRunner.testCase.testSuite.project.testSuites["Corporations_TS"].testCases["AddCorporation_TC"].getPropertyValue("NewCorpName")
	
	try
	{
		fnRunRequest("ViewProperties");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//def sCount = testRunner.testCase.testSuite.getPropertyValue("TestCount")
		def requestContent = context.expand('${ViewProperties#Request}')
		def responseContent = context.expand('${ViewProperties#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max PropertyId and set at test case level property NewPropertyId,NewPropertyName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxPropertyId = 0
			int iPropertyListSize = jsonResponse["properties"].size()
			
			jsonResponse["properties"].each
			{ 
				//log.info it
				if(it.PropertyID >iMaxPropertyId)
				{
					iMaxPropertyId = it.PropertyID
				}
				//log.info "PropertyID>>>>>>>>>>>>>>>>>>>>>"+ it.PropertyID 
				//log.info "PropertyName>>>>>>>>>>>>>>>>>>>"+ it.ProjectName	
			}
			log.info "Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId 
			fnUpdateLog("Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId)
			log.info "Total Properties before Duplicate Add : "+iPropertyListSize.toString()
			fnUpdateLog("Total Properties before Duplicate Add : "+iPropertyListSize.toString())
		
			//int iRandomNum = fnRandomNum(10001,99999);
			//sNewPropertyName = "AutoTestProperty_"+iRandomNum.toString();
			sNewPropertyName = "AutoTestProperty_"+sOfficeRandomNum;
			testRunner.testCase.setPropertyValue("NewPropertyName",sNewPropertyName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Property..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Property.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Property..");
		}
		//Start - Adding a new Property
		fnRunRequest("AddProperty"); // First Add
		fnRunRequest("AddProperty"); // Duplicate
		
		requestContent = context.expand('${AddProperty#Request}')
		log.info requestContent
		responseContent = context.expand('${AddProperty#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddProperty"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddProperty", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			
			//if(sKey=="Status" && sValue=="Action: Office Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Property Header Response for Duplicate", "Duplicate Property should be added with proper header response", "Duplicate Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Pass")
				log.info "Duplicate Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")"
				fnUpdateLog("Duplicate Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Property Response for Duplicate", "Duplicate Property should be created with proper header response", "Duplicate Property NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Fail")
				log.info "Duplicate Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Duplicate Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
				testRunner.fail("Duplicate Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Property
		
			//sleep(1000)
			//Start - Verify newly added Property
			boolean bFlag = false
			fnRunRequest("ViewProperties");
			requestContent = context.expand('${ViewProperties#Request}')
			responseContent = context.expand('${ViewProperties#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iPropertyListSize = jsonResponse["properties"].size()
				log.info "Total Properties After Duplicate Add : "+iPropertyListSize.toString()
				fnUpdateLog("Total Properties After Duplicate Add : "+iPropertyListSize.toString())

				
				String sAddress = fnGetPropertyValue("Address")
				String sCity = fnGetPropertyValue("City")
				String sState = fnGetPropertyValue("State")
				String sZipCode = fnGetPropertyValue("ZipCode")
				String sCounty = fnGetPropertyValue("County")
				String sMainSqFt = fnGetPropertyValue("MainSqFt")
				String sNumberBedroom = fnGetPropertyValue("NumberBedroom")
				String sNumberBathroom = fnGetPropertyValue("NumberBathroom")
				String sYearBuilt = fnGetPropertyValue("YearBuilt")
				String sComment = fnGetPropertyValue("Comment")
				String sGateCode = fnGetPropertyValue("GateCode")
				String sLockBox = fnGetPropertyValue("LockBox")
				String swalkUserAssigned = fnGetPropertyValue("walkUserAssigned")
				String sPropertyStatus = "Assigned Not Walked" //"Not Assigned" //remove comment once status bug gets fixed
				//&& it.walkUserAssigned.toString() == null
				
				jsonResponse["properties"].find
				{ log.info "it.walkUserAssigned.toString()>>>>>"+it.walkUserAssigned.toString()
					//log.info it
					//if(it.PropertyID == 367 && it.ProjectName == "TestProperty_367" )  //Just for testing
					//if(it.PropertyID.toString() == iNewPropertyId.toString() && it.ProjectName.toString() == sNewPropertyName )
					if(it.ProjectName.toString() == sNewPropertyName && it.AppOfficeID.toString() == sAppOfficeID)
					{
						if (it.PropertyStatus.toString() == sPropertyStatus && it.Address.toString() == sAddress  && it.City.toString() == sCity && it.State.toString() == sState  && it.ZipCode.toString() == sZipCode && it.County.toString() == sCounty  && it.MainSqFt.toString() == sMainSqFt && it.NumberBedroom.toString() == sNumberBedroom && it.NumberBathroom.toString() == sNumberBathroom  && it.YearBuilt.toString() == sYearBuilt && it.Comment.toString() == sComment  && it.GateCode.toString() == sGateCode && it.LockBox.toString() == sLockBox) // && it.walkUserAssigned.toString() == swalkUserAssigned) //remove comment once user bug gets fixed
						{
							bFlag = true
							//log.info "Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString()
							//fnUpdateLog("Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString() )
							fnGenerateTCStepsReport("Verify Property Name in View Property Response", "Actual Property name should match with Expected Property name ", "Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Pass")
							log.info "Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName
							fnUpdateLog("Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName)
							return true
						}
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Duplicate Property ", "Newly added Duplicate Property should be validated", "Newly added Duplicate Property validated successfully", "Pass")
					log.info "Newly added Duplicate Property validated successfully"
					fnUpdateLog("Newly added Duplicate Property validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Duplicate Property ", "Newly added Duplicate Property should be validated", "Newly added Duplicate Property NOT validated. Property NOT found.", "Fail")
					log.info "Newly added Duplicate Property NOT found"
					fnUpdateLog("Newly added Duplicate Property NOT found")
					testRunner.fail("Newly added Duplicate Property NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Duplicate Add Property Response", "Duplicate Add Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Properties] failed with exception : "+e)
		fnUpdateLog("[Add Properties] failed with exception : "+e)
	}
	finally
	{
		log.info "[Duplicate Property] Execution Completed Successfully......."
		fnUpdateLog("[Duplicate Property] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def String fnGetPropertyValue(String sPropertyName)
	{
		String  sPropValue = ""
		try
		{
			sPropValue = testRunner.testCase.getPropertyValue(sPropertyName)
			return sPropValue;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnGetPropertyValue] failed with exception : "+e)
		}
	}
	
	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "PropertyID": ${#TestCase#NewPropertyId},
		    "PropertyName": "${#TestCase#NewPropertyName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddProperty" id="17a43c74-2033-4c13-9f39-d33745cfdd39" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="AddProperty" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddProperty" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID":${#TestSuite#AppOfficeID},
	"ProjectName":"${#TestCase#NewPropertyName}",
	"Address":"${#TestCase#Address}",
	"City":"${#TestCase#City}",
	"State":"${#TestCase#State}",
	"ZipCode":"${#TestCase#ZipCode}",
	"County":"${#TestCase#County}",
	"MainSqFt":"${#TestCase#MainSqFt}",
	"NumberBedroom":"${#TestCase#NumberBedroom}",
	"NumberBathroom":"${#TestCase#NumberBathroom}",
	"YearBuilt":"${#TestCase#YearBuilt}",
	"Comment":"${#TestCase#Comment}",
	"GateCode":"${#TestCase#GateCode}",
	"LockBox":"${#TestCase#LockBox}",
	"walkUserAssigned":"${#TestCase#walkUserAssigned}"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewProperties" id="c0ff8d7b-7ade-477e-a3bd-f846d2a4ad94" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="ViewProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewProperties" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>//testCase.setPropertyValue("AppOfficeID","0")
//testCase.setPropertyValue("OfficeName","")
testCase.testSuite.setPropertyValue("AppOfficeID","0")
testCase.testSuite.setPropertyValue("OfficeName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalOffices","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Duplicate Add Property Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Pre-requisite - Add Corporation and Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr><tr><td class = "tsindlevel1" width = 5%>2</td><td class = "tsgenlevel1" width = 25%>Verify Duplicate Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>2.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response for Duplicate </td><td class = "tsgen" width = 25%>Duplicate Property should be added with proper header response</td><td class = "tsgen" width = 25%>Duplicate Property : AutoTestProperty_46465 added successfully for Office Id : 169 and Office Name : AutoTestOffice_46465 (Corporation : AutoTestCorporation_46465)</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_46465 matches with Expected Property Name : AutoTestProperty_46465 for Office ID : 169 and Office Name : AutoTestOffice_46465 (Corporation : AutoTestCorporation_46465)</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.3</td><td class = "tsgen" width = 25%>Validate Newly Added Duplicate Property  </td><td class = "tsgen" width = 25%>Newly added Duplicate Property should be validated</td><td class = "tsgen" width = 25%>Newly added Duplicate Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property><con:property><con:name>AppOfficeID</con:name><con:value>0</con:value></con:property><con:property><con:name>OfficeName</con:name><con:value/></con:property><con:property><con:name>NewPropertyName</con:name><con:value>AutoTestProperty_46465</con:value></con:property><con:property><con:name>Address</con:name><con:value>AutoTestAddress</con:value></con:property><con:property><con:name>City</con:name><con:value>AutoTestCity</con:value></con:property><con:property><con:name>State</con:name><con:value>MI</con:value></con:property><con:property><con:name>ZipCode</con:name><con:value>48108</con:value></con:property><con:property><con:name>County</con:name><con:value>AutoTestCounty</con:value></con:property><con:property><con:name>MainSqFt</con:name><con:value>1234</con:value></con:property><con:property><con:name>NumberBedroom</con:name><con:value>2</con:value></con:property><con:property><con:name>NumberBathroom</con:name><con:value>2.5</con:value></con:property><con:property><con:name>YearBuilt</con:name><con:value>2015</con:value></con:property><con:property><con:name>Comment</con:name><con:value>AutoTestComment</con:value></con:property><con:property><con:name>GateCode</con:name><con:value>AutoGCode</con:value></con:property><con:property><con:name>LockBox</con:name><con:value>AutoLckBox</con:value></con:property><con:property><con:name>walkUserAssigned</con:name><con:value>Bryce</con:value></con:property></con:properties></con:testCase><con:testCase id="ea8a1cba-0ad8-4a8e-a14c-c4aefc296738" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MaxLengthProperty_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="MaxLengthProperty_Groovy" id="e8ed182f-8358-444c-8e1d-b552520d638f"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
	
	log.info "[Max Length Property] Execution Started.........." 
	fnUpdateLog("[Max Length Property] Execution Started.........." )
	fnGenerateTCStepsReport("Verify Max Length Property", "", "", "")
	
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def iMaxPropertyId = 0
	def sLatestPropertyName = ""
	def sNewPropertyName =""

	try
	{
		fnRunRequest("ViewProperties");
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewProperties#Request}')
		def responseContent = context.expand('${ViewProperties#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		
		//jsonRequest = new JsonSlurper().parseText(requestContent)
	
		///////////////////Start - Parse JSON and get Max PropertyId and set at test case level property NewPropertyId,NewPropertyName///////////////////
		
		
		if (responseContent!="")
		{
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			int iPropertyListSize = jsonResponse["properties"].size()
			log.info "Total Properties Before Max Length Add Attempt : "+iPropertyListSize.toString()
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Total Properties Before Max Length Add Attempt : "+iPropertyListSize.toString()  +".\n")
			fnUpdateLog("Total Properties Before Max Length Add Attempt : "+iPropertyListSize.toString() )
			
			jsonResponse["properties"].each
			{ 
				//log.info it
				if(it.PropertyID >iMaxPropertyId)
				{
					iMaxPropertyId = it.PropertyID
					sLatestPropertyName = it.PropertyName
				}
				//log.info "PropertyID>>>>>>>>>>>>>>>>>>>>>"+ it.PropertyID 
				//log.info "PropertyName>>>>>>>>>>>>>>>>>>>"+ it.PropertyName	
			}
			log.info "Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId  +".\n")
			fnUpdateLog("Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId )
			log.info "Latest Property Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestPropertyName  
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Latest Property Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestPropertyName    +".\n")
			fnUpdateLog("Latest Property Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestPropertyName  )
	
			int iRandomNum = fnRandomNum(10001,99999);
			sNewPropertyName = "TestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestTestPropertyTestPropertyTestPropertyTest_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewPropertyName",sNewPropertyName)
		}
		else
		{
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Property..\n";
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Property..\n");
		}
		
	
		//Start - Adding a new Property
		fnRunRequest("AddProperty");
	
		requestContent = context.expand('${AddProperty#Request}')
		log.info requestContent
		responseContent = context.expand('${AddProperty#Response}')
		log.info responseContent
		
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sCode = jsonResponse.code
			String sStatus = jsonResponse.status
			String sErrors = jsonResponse.errors
			log.info sCode+sStatus+sErrors
			//if(sKey=="Status" && sValue=="Add Property Failed")
			if(sCode=="RQ500" && sStatus=="500")
			{
				fnGenerateTCStepsReport("Verify Max Length Property Response", "Max Length Property response should throw errors", "Max Length Property NOT added and response has errors", "Pass")
				log.info "Max Length Property : "+sNewPropertyName+" NOT added successfully"
				fnUpdateLog("Max Length Property : "+sNewPropertyName+" NOT added successfully")	
			}
			else
			{
				fnGenerateTCStepsReport("Verify Max Length Property Response", "Max Length Property response should throw errors", "Max Length Property added and response has NO errors", "Fail")
				log.info "Max Length Property : "+sNewPropertyName+" should NOT be added"
				fnUpdateLog("Max Length Property : "+sNewPropertyName+" should NOT be added")	
				testRunner.fail("Max Length Property : "+sNewPropertyName+" should NOT be added")
			}
			//End - Adding a new Property
		
			//Start - Verify newly added Property
			boolean bFlag = true
			fnRunRequest("ViewProperties");
			requestContent = context.expand('${ViewProperties#Request}')
			responseContent = context.expand('${ViewProperties#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
			
		
				iPropertyListSize = jsonResponse["properties"].size()
				log.info "Total Properties After Max Length Add Attempt : "+iPropertyListSize.toString()
				fnUpdateLog("Total Properties After Max Length Add Attempt : "+iPropertyListSize.toString())	
			
				int iDupPropertyCount = 0 
				
				jsonResponse["properties"].find
				{ 
					//log.info it
					//if(it.PropertyID == 367 && it.PropertyName == "TestProperty_367" )  //Just for testing
					//if(it.PropertyID == iNewPropertyId && it.PropertyName == sNewPropertyName )  //No need to validate on Property Id, It's auto generated by DB
					if(it.PropertyName == sNewPropertyName )
					{	
						iDupPropertyCount = iDupPropertyCount +1
						bFlag = false
						//log.info "Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString()+" It should NOT be added."
						//fnUpdateLog("Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString()+" It should NOT be added.")
						if(iDupPropertyCount>=2)
						{
							fnGenerateTCStepsReport("Verify Property Name in View Property Response", "Property should NOT be added ", "Actual Property Name : "+it.PropertyName.toString() +" matches with Expected Property Name : "+sNewPropertyName+". It should NOT be added.", "Fail")
							log.info "Actual Property Name : "+it.PropertyName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" It should NOT be added."
							fnUpdateLog("Actual Property Name : "+it.PropertyName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" It should NOT be added.")
						}
						//return true  //Look for two duplocate Properties
					}	
				}
				
				log.info "iDupPropertyCount>>>>>>>>>>>>>>>"+iDupPropertyCount
				if(bFlag == false && iDupPropertyCount>=2)
				{
					fnGenerateTCStepsReport("Verify Max Length Property Name in View Property Response", "Max Length Property should NOT be added ", "Max Length Property found.", "Fail")
					log.info "Max Length Property added and found. Test failed.."
					fnUpdateLog("Max Length Property added and found. Test failed..")
					testRunner.fail("Max Length Property added and found. Test failed..")
				}
				else
				{
					fnGenerateTCStepsReport("Verify Max Length Property Name in View Property Response", "Max Length Property should NOT be added ", "Max Length Property NOT found successfully", "Pass")
					log.info "Max Length Property NOT found successfully"
					fnUpdateLog("Max Length Property NOT found successfully")
				}
			}
			else
			{
				fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
				fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Property Response", "Add Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Max Length Properties] failed with exception : "+e)
		fnUpdateLog("[Max Length Properties] failed with exception : "+e)
	}
	finally
	{
		log.info "[Max Length Property] Execution Completed Successfully......."
		fnUpdateLog("[Max Length Property] Execution Completed Successfully.......\n")
	}
///////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

	]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddProperty" id="bc765bf5-7ccb-483e-8469-a0f4c5fa6a8e" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="AddProperty" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddProperty" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID":${#TestSuite#AppOfficeID},
	"ProjectName":"${#TestCase#NewPropertyName}",
	"Address":"${#TestCase#Address}",
	"City":"${#TestCase#City}",
	"State":"${#TestCase#State}",
	"ZipCode":"${#TestCase#ZipCode}",
	"County":"${#TestCase#County}",
	"MainSqFt":"${#TestCase#MainSqFt}",
	"NumberBedroom":"${#TestCase#NumberBedroom}",
	"NumberBathroom":"${#TestCase#NumberBathroom}",
	"YearBuilt":"${#TestCase#YearBuilt}",
	"Comment":"${#TestCase#Comment}",
	"GateCode":"${#TestCase#GateCode}",
	"LockBox":"${#TestCase#LockBox}",
	"walkUserAssigned":"${#TestCase#walkUserAssigned}"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewProperties" id="703006e2-1bf4-447f-af66-192e08acdffd" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="ViewProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewProperties" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="_MaxLengthProperty_Groovy" id="db07cf9f-cf84-4491-ba56-c30cafa57892" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	fnGenerateTCStepsReport("Pre-requisite - Add Corporation and Office", "", "", "")
	def runner = testRunner.testCase.testSuite.project.testSuites["Offices_TS"].testCases["AddOffice_TC"].run(null,false);
	
	log.info "[Max Length Property] Execution Started.........." 
	fnUpdateLog("[Max Length Property] Execution Started..........")
	fnGenerateTCStepsReport("Verify Max Length Property", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewPropertyName = ""
	def sAppOfficeID = context.expand( '${#TestSuite#AppOfficeID}' )
	def sOfficeName = context.expand( '${#TestSuite#OfficeName}' )
	def (OfficeInitial, OfficeLast) = sOfficeName.tokenize( '_' )
	String sOfficeRandomNum = OfficeLast;
	String sCorporationName = testRunner.testCase.testSuite.project.testSuites["Corporations_TS"].testCases["AddCorporation_TC"].getPropertyValue("NewCorpName")
	
	try
	{
		fnRunRequest("ViewProperties");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//def sCount = testRunner.testCase.testSuite.getPropertyValue("TestCount")
		def requestContent = context.expand('${ViewProperties#Request}')
		def responseContent = context.expand('${ViewProperties#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max PropertyId and set at test case level property NewPropertyId,NewPropertyName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxPropertyId = 0
			int iPropertyListSize = jsonResponse["properties"].size()
			
			jsonResponse["properties"].each
			{ 
				//log.info it
				if(it.PropertyID >iMaxPropertyId)
				{
					iMaxPropertyId = it.PropertyID
				}
				//log.info "PropertyID>>>>>>>>>>>>>>>>>>>>>"+ it.PropertyID 
				//log.info "PropertyName>>>>>>>>>>>>>>>>>>>"+ it.ProjectName	
			}
			log.info "Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId 
			fnUpdateLog("Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId)
			log.info "Total Properties before Add : "+iPropertyListSize.toString()
			fnUpdateLog("Total Properties before Add : "+iPropertyListSize.toString())
		
			//int iRandomNum = fnRandomNum(10001,99999);
			//sNewPropertyName = "AutoTestProperty_"+iRandomNum.toString();
			sNewPropertyName = "AutoTestProperty_"+sOfficeRandomNum;
			testRunner.testCase.setPropertyValue("NewPropertyName",sNewPropertyName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Property..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Property.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Property..");
		}
		//Start - Adding a new Property
		fnRunRequest("AddProperty");

		jsonResponse = new JsonSlurper().parseText(responseContent)
		String sCode = jsonResponse.code
		String sStatus = jsonResponse.status
		String sErrors = jsonResponse.errors
		log.info sCode+sStatus+sErrors
		
		if(sCode=="RQ500" && sStatus=="500")
		{
			fnGenerateTCStepsReport("Verify Max Length Office Response", "Max Length Office response should throw errors", "Max Length Office NOT added and response has errors", "Pass")
			log.info "Max Length Office : "+sNewOfficeName+" NOT added successfully"
			fnUpdateLog("Max Length Office : "+sNewOfficeName+" NOT added successfully")	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Max Length Office Response", "Max Length Office response should throw errors", "Max Length Office added and response has NO errors", "Fail")
			log.info "Max Length Office : "+sNewOfficeName+" should NOT be added"
			fnUpdateLog("Max Length Office : "+sNewOfficeName+" should NOT be added")	
			testRunner.fail("Max Length Office : "+sNewOfficeName+" should NOT be added")
		}
		//End - Adding a new Property
		
		requestContent = context.expand('${AddProperty#Request}')
		log.info requestContent
		responseContent = context.expand('${AddProperty#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddProperty"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddProperty", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			
			//if(sKey=="Status" && sValue=="Action: Office Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Property Header Response for Max Length", "Max Length Property should be added with proper header response", "Max Length Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Pass")
				log.info "Max Length Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")"
				fnUpdateLog("Max Length Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Property Response for Max Length", "Max Length Property should be created with proper header response", "Max Length Property NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Fail")
				log.info "Max Length Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Max Length Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
				testRunner.fail("Max Length Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Property
		
			//sleep(1000)
			//Start - Verify newly added Property
			boolean bFlag = false
			fnRunRequest("ViewProperties");
			requestContent = context.expand('${ViewProperties#Request}')
			responseContent = context.expand('${ViewProperties#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iPropertyListSize = jsonResponse["properties"].size()
				log.info "Total Properties After Max Length Add : "+iPropertyListSize.toString()
				fnUpdateLog("Total Properties After Max Length Add : "+iPropertyListSize.toString())

				
				String sAddress = fnGetPropertyValue("Address")
				String sCity = fnGetPropertyValue("City")
				String sState = fnGetPropertyValue("State")
				String sZipCode = fnGetPropertyValue("ZipCode")
				String sCounty = fnGetPropertyValue("County")
				String sMainSqFt = fnGetPropertyValue("MainSqFt")
				String sNumberBedroom = fnGetPropertyValue("NumberBedroom")
				String sNumberBathroom = fnGetPropertyValue("NumberBathroom")
				String sYearBuilt = fnGetPropertyValue("YearBuilt")
				String sComment = fnGetPropertyValue("Comment")
				String sGateCode = fnGetPropertyValue("GateCode")
				String sLockBox = fnGetPropertyValue("LockBox")
				String swalkUserAssigned = fnGetPropertyValue("walkUserAssigned")
				String sPropertyStatus = "Assigned Not Walked" //"Not Assigned" //remove comment once status bug gets fixed
				//&& it.walkUserAssigned.toString() == null
				
				jsonResponse["properties"].find
				{ log.info "it.walkUserAssigned.toString()>>>>>"+it.walkUserAssigned.toString()
					//log.info it
					//if(it.PropertyID == 367 && it.ProjectName == "TestProperty_367" )  //Just for testing
					//if(it.PropertyID.toString() == iNewPropertyId.toString() && it.ProjectName.toString() == sNewPropertyName )
					if(it.ProjectName.toString() == sNewPropertyName && it.AppOfficeID.toString() == sAppOfficeID)
					{
						if (it.PropertyStatus.toString() == sPropertyStatus && it.Address.toString() == sAddress  && it.City.toString() == sCity && it.State.toString() == sState  && it.ZipCode.toString() == sZipCode && it.County.toString() == sCounty  && it.MainSqFt.toString() == sMainSqFt && it.NumberBedroom.toString() == sNumberBedroom && it.NumberBathroom.toString() == sNumberBathroom  && it.YearBuilt.toString() == sYearBuilt && it.Comment.toString() == sComment  && it.GateCode.toString() == sGateCode && it.LockBox.toString() == sLockBox) // && it.walkUserAssigned.toString() == swalkUserAssigned) //remove comment once user bug gets fixed
						{
							bFlag = true
							//log.info "Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString()
							//fnUpdateLog("Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString() )
							fnGenerateTCStepsReport("Verify Property Name in View Property Response", "Actual Property name should match with Expected Property name ", "Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Pass")
							log.info "Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName
							fnUpdateLog("Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName)
							return true
						}
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Max Length Property ", "Newly added Max Length Property should be validated", "Newly added Max Length Property validated successfully", "Pass")
					log.info "Newly added Max Length Property validated successfully"
					fnUpdateLog("Newly added Max Length Property validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Max Length Property ", "Newly added Max Length Property should be validated", "Newly added Max Length Property NOT validated. Property NOT found.", "Fail")
					log.info "Newly added Max Length Property NOT found"
					fnUpdateLog("Newly added Max Length Property NOT found")
					testRunner.fail("Newly added Max Length Property NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Max Length Add Property Response", "Max Length Add Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Properties] failed with exception : "+e)
		fnUpdateLog("[Add Properties] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Property] Execution Completed Successfully......."
		fnUpdateLog("[Add Property] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def String fnGetPropertyValue(String sPropertyName)
	{
		String  sPropValue = ""
		try
		{
			sPropValue = testRunner.testCase.getPropertyValue(sPropertyName)
			return sPropValue;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnGetPropertyValue] failed with exception : "+e)
		}
	}
	
	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "PropertyID": ${#TestCase#NewPropertyId},
		    "PropertyName": "${#TestCase#NewPropertyName}"
		}*/]]></script></con:config></con:testStep><con:setupScript>//testCase.setPropertyValue("AppOfficeID","0")
//testCase.setPropertyValue("OfficeName","")
testCase.testSuite.setPropertyValue("AppOfficeID","0")
testCase.testSuite.setPropertyValue("OfficeName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalOffices","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Duplicate Add Property Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Max Length Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Max Length Property Response </td><td class = "tsgen" width = 25%>Max Length Property response should throw errors</td><td class = "tsgen" width = 25%>Max Length Property NOT added and response has errors</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Max Length Property Name in View Property Response </td><td class = "tsgen" width = 25%>Max Length Property should NOT be added </td><td class = "tsgen" width = 25%>Max Length Property NOT found successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property><con:property><con:name>AppOfficeID</con:name><con:value>0</con:value></con:property><con:property><con:name>OfficeName</con:name><con:value/></con:property><con:property><con:name>NewPropertyName</con:name><con:value>TestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestPropertyTestTestPropertyTestPropertyTestPropertyTest_64798</con:value></con:property><con:property><con:name>Address</con:name><con:value>AutoTestAddress</con:value></con:property><con:property><con:name>City</con:name><con:value>AutoTestCity</con:value></con:property><con:property><con:name>State</con:name><con:value>MI</con:value></con:property><con:property><con:name>ZipCode</con:name><con:value>48108</con:value></con:property><con:property><con:name>County</con:name><con:value>AutoTestCounty</con:value></con:property><con:property><con:name>MainSqFt</con:name><con:value>1234</con:value></con:property><con:property><con:name>NumberBedroom</con:name><con:value>2</con:value></con:property><con:property><con:name>NumberBathroom</con:name><con:value>2.5</con:value></con:property><con:property><con:name>YearBuilt</con:name><con:value>2015</con:value></con:property><con:property><con:name>Comment</con:name><con:value>AutoTestComment</con:value></con:property><con:property><con:name>GateCode</con:name><con:value>AutoGCode</con:value></con:property><con:property><con:name>LockBox</con:name><con:value>AutoLckBox</con:value></con:property><con:property><con:name>walkUserAssigned</con:name><con:value>Bryce</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>AppOfficeID</con:name><con:value>187</con:value></con:property><con:property><con:name>OfficeName</con:name><con:value>AutoTestOffice_60061</con:value></con:property></con:properties><con:setupScript/></con:testSuite><con:testSuite id="b0f2066c-f4c8-4869-aae6-2647b86ce370" name="Groups_TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e2641048-f1ca-46c3-9cb3-ef8a6c044ee1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AddGroup_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="AddGroup_Groovy" id="600fd259-3533-4a4e-a462-80c15771c320"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	fnGenerateTCStepsReport("Pre-requisite - Add Corporation and Office", "", "", "")
	def runner = testRunner.testCase.testSuite.project.testSuites["Offices_TS"].testCases["AddOffice_TC"].run(null,false);
	
	log.info "[Add Group] Execution Started.........." 
	fnUpdateLog("[Add Group] Execution Started..........")
	fnGenerateTCStepsReport("Verify Add Group", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewGroupName = ""
	def sAppOfficeID = context.expand( '${#TestSuite#AppOfficeID}' )
	def sOfficeName = context.expand( '${#TestSuite#OfficeName}' )
	def (OfficeInitial, OfficeLast) = sOfficeName.tokenize( '_' )
	String sOfficeRandomNum = OfficeLast;
	String sCorporationName = testRunner.testCase.testSuite.project.testSuites["Corporations_TS"].testCases["AddCorporation_TC"].getPropertyValue("NewCorpName")
	
	try
	{
		fnRunRequest("ViewGroups");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//def sCount = testRunner.testCase.testSuite.getPropertyValue("TestCount")
		def requestContent = context.expand('${ViewGroups#Request}')
		def responseContent = context.expand('${ViewGroups#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max GroupId and set at test case level Group NewGroupId,NewGroupName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxGroupId = 0
			int iGroupListSize = jsonResponse["PWGroupItems"].size()
			
			jsonResponse["PWGroupItems"].each
			{ 
				//log.info it
				if(it.PWGroupID >iMaxGroupId)
				{
					iMaxGroupId = it.PWGroupID
				}
				//log.info "GroupID>>>>>>>>>>>>>>>>>>>>>"+ it.PWGroupID 
				//log.info "GroupName>>>>>>>>>>>>>>>>>>>"+ it.Name	
			}
			log.info "Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId 
			fnUpdateLog("Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId)
			log.info "Total Groups before Add : "+iGroupListSize.toString()
			fnUpdateLog("Total Groups before Add : "+iGroupListSize.toString())
		
			//int iRandomNum = fnRandomNum(10001,99999);
			//sNewGroupName = "AutoTestGroup_"+iRandomNum.toString();
			sNewGroupName = "AutoTestGroup_"+sOfficeRandomNum;
			testRunner.testCase.setPropertyValue("NewGroupName",sNewGroupName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Group Response", "View Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group..");
		}
		//Start - Adding a new Group
		fnRunRequest("AddGroup");
		
		requestContent = context.expand('${AddGroup#Request}')
		log.info requestContent
		responseContent = context.expand('${AddGroup#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddGroup"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddGroup", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			
			//if(sKey=="Status" && sValue=="Action: Office Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Group Header Response", "Group should be added with proper header response", "Group : "+sNewGroupName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Pass")
				log.info "Group : "+sNewGroupName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")"
				fnUpdateLog("Group : "+sNewGroupName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Group Response", "Group should be created with proper header response", "Group NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Fail")
				log.info "Group : "+sNewGroupName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Group : "+sNewGroupName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
				testRunner.fail("Group : "+sNewGroupName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Group
		
			//sleep(1000)
			//Start - Verify newly added Group
			boolean bFlag = false
			fnRunRequest("ViewGroups");
			requestContent = context.expand('${ViewGroups#Request}')
			responseContent = context.expand('${ViewGroups#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iGroupListSize = jsonResponse["PWGroupItems"].size()
				log.info "Total Groups After Add : "+iGroupListSize.toString()
				fnUpdateLog("Total Groups After Add : "+iGroupListSize.toString())

				
				String sDefaultPhotoGroup = fnGetPropertyValue("DefaultPhotoGroup")
				String sDescription = fnGetPropertyValue("Description")
				String sGLCode = fnGetPropertyValue("GLCode")
				String sIncludeComment = fnGetPropertyValue("IncludeComment")
				String sIncludeMeasurements = fnGetPropertyValue("IncludeMeasurements")
				String sIncludePaint = fnGetPropertyValue("IncludePaint")
				String sMaxNumberPerHouse = fnGetPropertyValue("MaxNumberPerHouse")
				String sPhotoFolderName = fnGetPropertyValue("PhotoFolderName")
				
				
				
				jsonResponse["PWGroupItems"].find
				{ 
					//log.info it
					//if(it.PWGroupID == 367 && it.Name == "TestGroup_367" )  //Just for testing
					//if(it.PWGroupID.toString() == iNewGroupId.toString() && it.Name.toString() == sNewGroupName )
					if(it.Name.toString() == sNewGroupName && it.AppOfficeID.toString() == sAppOfficeID)
					{log.info "In first true"
						if (it.DefaultPhotoGroup.toString() == sDefaultPhotoGroup && it.Description.toString() == sDescription  && it.GLCode.toString() == sGLCode && it.IncludeComment.toString() == sIncludeComment  && it.IncludeMeasurements.toString() == sIncludeMeasurements && it.IncludePaint.toString() == sIncludePaint  && it.MaxNumberPerHouse.toString() == sMaxNumberPerHouse && it.PhotoFolderName.toString() == sPhotoFolderName)
						{log.info "In second true"
							bFlag = true
							//log.info "Actual Group Id : "+it.PWGroupID.toString() +" matches with Expected Group Id : "+iNewGroupId.toString()
							//fnUpdateLog("Actual Group Id : "+it.PWGroupID.toString() +" matches with Expected Group Id : "+iNewGroupId.toString() )
							fnGenerateTCStepsReport("Verify Group Name in View Group Response", "Actual Group name should match with Expected Group name ", "Actual Group Name : "+it.Name.toString() +" matches with Expected Group Name : "+sNewGroupName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName+" (Corporation : "+sCorporationName+")", "Pass")
							log.info "Actual Group Name : "+it.Name.toString() +" matches with Expected Group Name : "+sNewGroupName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName
							fnUpdateLog("Actual Group Name : "+it.Name.toString() +" matches with Expected Group Name : "+sNewGroupName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName)
							return true
						}
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Group ", "Newly added Group should be validated", "Newly added Group validated successfully", "Pass")
					log.info "Newly added Group validated successfully"
					fnUpdateLog("Newly added Group validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Group ", "Newly added Group should be validated", "Newly added Group NOT validated. Group NOT found.", "Fail")
					log.info "Newly added Group NOT found"
					fnUpdateLog("Newly added Group NOT found")
					testRunner.fail("Newly added Group NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Group Response", "View Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Group Response", "Add Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Group] failed with exception : "+e)
		fnUpdateLog("[Add Group] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Group] Execution Completed Successfully......."
		fnUpdateLog("[Add Group] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def String fnGetPropertyValue(String sGroupName)
	{
		String  sPropValue = ""
		try
		{
			sPropValue = testRunner.testCase.testSuite.getPropertyValue(sGroupName)
			return sPropValue;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnGetPropertyValue] failed with exception : "+e)
		}
	}
	
	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "GroupID": ${#TestCase#NewGroupId},
		    "GroupName": "${#TestCase#NewGroupName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddGroup" id="2b82e449-2268-47d7-8382-2c00c7646d75" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/PWGroup" methodName="AddGroup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddGroup" id="9bfc5647-0e68-415f-b318-ff0abaad34cb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID": ${#TestSuite#AppOfficeID},
	"Name": "${#TestCase#NewGroupName}",
	"DefaultPhotoGroup": ${#TestSuite#DefaultPhotoGroup},
	"Description": "${#TestSuite#Description}",
	"GLCode": "${#TestSuite#GLCode}",
	"IncludeComment": ${#TestSuite#IncludeComment},
	"IncludeMeasurements": ${#TestSuite#IncludeMeasurements},
	"IncludePaint": ${#TestSuite#IncludePaint},
	"MaxNumberPerHouse": "${#TestSuite#MaxNumberPerHouse}",
	"PWGroupItem": [],
	"PhotoFolderName": "${#TestSuite#PhotoFolderName}"
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/PWGroup</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewGroups" id="2fda7d7a-f506-405b-9972-5f01c8daaa53" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/PWGroup" methodName="ViewGroups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewGroups" id="9bfc5647-0e68-415f-b318-ff0abaad34cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/PWGroup</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>//testCase.setPropertyValue("AppOfficeID","0")
//testCase.setPropertyValue("OfficeName","")
testCase.testSuite.setPropertyValue("AppOfficeID","0")
testCase.testSuite.setPropertyValue("OfficeName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")

</con:setupScript><con:tearDownScript>log.info "Add Group Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Pre-requisite - Add Corporation and Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr><tr><td class = "tsindlevel1" width = 5%>2</td><td class = "tsgenlevel1" width = 25%>Verify Add Group</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>2.1</td><td class = "tsgen" width = 25%>Verify Add Group Header Response </td><td class = "tsgen" width = 25%>Group should be added with proper header response</td><td class = "tsgen" width = 25%>Group : AutoTestGroup_60061 added successfully for Office Id : 187 and Office Name : AutoTestOffice_60061 (Corporation : AutoTestCorporation_60061)</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.2</td><td class = "tsgen" width = 25%>Verify Group Name in View Group Response </td><td class = "tsgen" width = 25%>Actual Group name should match with Expected Group name </td><td class = "tsgen" width = 25%>Actual Group Name : AutoTestGroup_60061 matches with Expected Group Name : AutoTestGroup_60061 for Office ID : 187 and Office Name : AutoTestOffice_60061 (Corporation : AutoTestCorporation_60061)</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.3</td><td class = "tsgen" width = 25%>Validate Newly Added Group  </td><td class = "tsgen" width = 25%>Newly added Group should be validated</td><td class = "tsgen" width = 25%>Newly added Group validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewGroupName</con:name><con:value>AutoTestGroup_60061</con:value></con:property></con:properties></con:testCase><con:testCase id="b0f15962-0d20-4804-9d04-9960fa388bf1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ViewGroups_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ViewGroups_Groovy" id="97b1c01d-1725-44dd-8eaa-97822092f69b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;
import groovy.json.JsonSlurper
import java.text.SimpleDateFormat;
import groovy.time.*

scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

/*
fnGenerateTCStepsReport("Verify View Group", "", "", "")
fnGenerateTCStepsReport("sStepDesc1", "sExpResult1", "sActualResult1", "Pass")
*/



	log.info "[View Groups] Execution Started.........." 
	fnUpdateLog("[View Groups] Execution Started..........")
	fnGenerateTCStepsReport("Verify View Groups", "", "", "")
	
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	log.info sTSName
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	try
	{
		fnRunRequest("ViewGroups");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewGroups#Request}')
		def responseContent = context.expand('${ViewGroups#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		//def request_EnableHotspot = context.expand('${initiateEnableHotSpot#Request}')
		//def response_EnableHotspot = context.expand('${initiateEnableHotSpot#Response}')
	
			if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
			log.info "Before Line>>"
			/*responseContent.replaceAll('\\{\\"','\\{\n\\"')
			responseContent.replaceAll(',"',',\n"')
			responseContent.replaceAll('"}','"\n}')
			responseContent.replaceAll(',{',',\n{')*/
			/*respFile1.eachLine{ line ->
	
			//log.info(newCode)
				if (line.contains("Group"))
				{
					log.info "Group Line>>"+line
				}
				else
				{
					log.info "Normal Line>>"+line
				}
			}*/	
			///////////////////Start - Parse JSON and get the size of Group List///////////////////
			log.info "In loop1"
			jsonResponse = new JsonSlurper().parseText(responseContent)
			jsonResponse = new JsonSlurper().parseText(responseContent)
			log.info "In loop2"
			def iMaxGroupId = 0
			jsonResponse["PWGroupItems"].each
			{ 
				//log.info "Data for Row>> "+ i.toString() +"  "+it
				if(it.PWGroupID >iMaxGroupId)
				{
					iMaxGroupId = it.PWGroupID
				}
				//log.info "GroupID>>>>>>>>>>>>>>>>>>>>>"+ it.GroupID 
				//log.info "GroupName>>>>>>>>>>>>>>>>>>>"+ it.GroupName	
			}
			log.info "Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId 
			fnUpdateLog("Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId)
			
			int iGroupListSize = jsonResponse["PWGroupItems"].size()
			log.info "Group List Size>>>>>>>>>>>>>>>>> "+iGroupListSize.toString()
			//Write DB code here to validate the total number of records
		
			if(iGroupListSize&lt;=0)
			{
				fnGenerateTCStepsReport("Verify Group List", "Group list should be retrieved", "Group list NOT retrieved", "Fail")
				testRunner.fail("No Group found..Check the View Group service and try again..")
				log.info "No Group found..Check the View Group service and try again.."
				fnUpdateLog("No Group found..Check the View Group service and try again..")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Group List", "Group list should be retrieved", "Groups retrieved successfully with total size of : "+iGroupListSize.toString(), "Pass")
				testRunner.testCase.setPropertyValue("TotalGroups",iGroupListSize.toString())
				log.info "Groups retrieved successfully with total size of : "+iGroupListSize.toString()
				fnUpdateLog("Groups retrieved successfully with total size of : "+iGroupListSize.toString())
			}
	  
		}
		else
		{
			fnGenerateTCStepsReport("Verify View Group Response", "View Group response should be retrieved", "Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{log.info "Exception"+e
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[View Groups] failed with exception : "+e)
		fnUpdateLog("[View Groups] failed with exception : "+e)
	}
	finally
	{
		log.info "[View Groups] Execution Completed Successfully......." 
		fnUpdateLog("[View Groups] Execution Completed Successfully.......\n")
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//def responseContent = testRunner.testCase.getTestStepByName("ViewGroups").getPropertyValue("response")
	//log.info responseContent



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{log.info "fnUpdateTCStepsCount"
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" &amp;&amp; sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}
</script></con:config></con:testStep><con:testStep type="restrequest" name="ViewGroups" id="a2accc33-f292-4b9c-9b48-bbfc4288d37e" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/PWGroup" methodName="ViewGroups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewGroups" id="9bfc5647-0e68-415f-b318-ff0abaad34cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/PWGroup</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("PropertyId","0")
testCase.setPropertyValue("TotalProperties","0")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")
</con:setupScript><con:tearDownScript>log.info "View Properties Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////////////////////////////////////////////

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify View Groups</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Group List </td><td class = "tsgen" width = 25%>Group list should be retrieved</td><td class = "tsgen" width = 25%>Groups retrieved successfully with total size of : 71</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalRegions</con:name><con:value>5</con:value></con:property><con:property><con:name>NewOfficeId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalProperties</con:name><con:value>0</con:value></con:property><con:property><con:name>PropertyId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalGroups</con:name><con:value>71</con:value></con:property></con:properties></con:testCase><con:testCase id="3482793c-45d8-4b7c-87e8-7d2ffa2ef5a5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DuplicateGroup_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DuplicateGroup_Groovy" id="c99dfb2e-d37a-4eed-a760-d4b07847f529"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	fnGenerateTCStepsReport("Pre-requisite - Add Corporation and Office", "", "", "")
	def runner = testRunner.testCase.testSuite.project.testSuites["Offices_TS"].testCases["AddOffice_TC"].run(null,false);
	
	log.info "[Duplicate Group] Execution Started.........." 
	fnUpdateLog("[Duplicate Group] Execution Started..........")
	fnGenerateTCStepsReport("Verify Duplicate Group", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewGroupName = ""
	def sAppOfficeID = context.expand( '${#TestSuite#AppOfficeID}' )
	def sOfficeName = context.expand( '${#TestSuite#OfficeName}' )
	def (OfficeInitial, OfficeLast) = sOfficeName.tokenize( '_' )
	String sGroupRandomNum = OfficeLast;
	String sCorporationName = testRunner.testCase.testSuite.project.testSuites["Corporations_TS"].testCases["AddCorporation_TC"].getPropertyValue("NewCorpName")
	
	try
	{
		fnRunRequest("ViewGroups");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//def sCount = testRunner.testCase.testSuite.getPropertyValue("TestCount")
		def requestContent = context.expand('${ViewGroups#Request}')
		def responseContent = context.expand('${ViewGroups#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max GroupId and set at test case level Group NewGroupId,NewGroupName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxGroupId = 0
			int iGroupListSize = jsonResponse["PWGroupItems"].size()
			
			jsonResponse["PWGroupItems"].each
			{ 
				//log.info it
				if(it.PWGroupID >iMaxGroupId)
				{
					iMaxGroupId = it.PWGroupID
				}
				//log.info "GroupID>>>>>>>>>>>>>>>>>>>>>"+ it.PWGroupID 
				//log.info "GroupName>>>>>>>>>>>>>>>>>>>"+ it.Name	
			}
			log.info "Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId 
			fnUpdateLog("Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId)
			log.info "Total Groups before Add : "+iGroupListSize.toString()
			fnUpdateLog("Total Groups before Add : "+iGroupListSize.toString())
		
			//int iRandomNum = fnRandomNum(10001,99999);
			//sNewGroupName = "AutoTestGroup_"+iRandomNum.toString();
			sNewGroupName = "AutoTestGroup_"+sGroupRandomNum;
			testRunner.testCase.setPropertyValue("NewGroupName",sNewGroupName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Group Response", "View Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group..");
		}
		//Start - Adding a new Group
		fnRunRequest("AddGroup"); // First Add
		fnRunRequest("AddGroup"); // Duplicate
		
		requestContent = context.expand('${AddGroup#Request}')
		log.info requestContent
		responseContent = context.expand('${AddGroup#Response}')
		log.info responseContent
	
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sCode = jsonResponse.code
			String sStatus = jsonResponse.status
			String sErrors = jsonResponse.errors
			log.info sCode+sStatus+sErrors
			//if(sKey=="Status" && sValue=="Add Group Failed")
			
			if(sCode=="RQ500" && sStatus=="500")
			{
				fnGenerateTCStepsReport("Verify Duplicate Group Response", "Duplicate Group response should throw errors", "Duplicate Group NOT added and response has errors", "Pass")
				log.info "Duplicate Group : "+sNewGroupName+" NOT added successfully"
				fnUpdateLog("Duplicate Group : "+sNewGroupName+" NOT added successfully")	
			}
			else
			{	
				fnGenerateTCStepsReport("Verify Duplicate Group Response", "Duplicate Group response should throw errors", "Duplicate Group added and response has NO errors", "Fail")
				log.info "Duplicate Group : "+sNewGroupName+" should NOT be added"
				fnUpdateLog("Duplicate Group : "+sNewGroupName+" should NOT be added")	
				testRunner.fail("Duplicate Group : "+sNewGroupName+" should NOT be added")
			}
			//End - Adding a new Group
		
			//Start - Verify newly added Group
			boolean bFlag = true
			fnRunRequest("ViewGroups");
			requestContent = context.expand('${ViewGroups#Request}')
			responseContent = context.expand('${ViewGroups#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
			
		
				iGroupListSize = jsonResponse["PWGroupItems"].size()
				log.info "Total Groups After Duplicate Add Attempt : "+iGroupListSize.toString()
				fnUpdateLog("Total Groups After Duplicate Add Attempt : "+iGroupListSize.toString())	
			
				int iDupGroupCount = 0 
				
				jsonResponse["PWGroupItems"].find
				{ 
					//log.info it
					//if(it.AppGroupID == 367 && it.GroupName == "TestGroup_367" )  //Just for testing
					//if(it.AppGroupID == iNewGroupId && it.GroupName == sNewGroupName )  //No need to validate on Group Id, It's auto generated by DB
					if(it.Name == sNewGroupName )
					{	
						iDupGroupCount = iDupGroupCount +1
						bFlag = false
						//log.info "Actual Group Id : "+it.AppGroupID.toString() +" matches with Expected Group Id : "+iNewGroupId.toString()+" It should NOT be added."
						//fnUpdateLog("Actual Group Id : "+it.AppGroupID.toString() +" matches with Expected Group Id : "+iNewGroupId.toString()+" It should NOT be added.")
						if(iDupGroupCount>=2)
						{	
							fnGenerateTCStepsReport("Verify Group Name in View Group Response", "Group should NOT be added ", "Actual Group Name : "+it.GroupName.toString() +" matches with Expected Group Name : "+sNewGroupName+". It should NOT be added.", "Fail")
							log.info "Actual Group Name : "+it.GroupName.toString() +" matches with Expected Group Name : "+sNewGroupName+" It should NOT be added."
							fnUpdateLog("Actual Group Name : "+it.GroupName.toString() +" matches with Expected Group Name : "+sNewGroupName+" It should NOT be added.")
						}
						//return true  //Look for two duplocate Groups
					}	
				}
				
				log.info "iDupGroupCount>>>>>>>>>>>>>>>"+iDupGroupCount
				if(bFlag == false && iDupGroupCount>=2)
				{
					fnGenerateTCStepsReport("Verify Duplicate Group Name in View Group Response", "Duplicate Group should NOT be added ", "Two duplicate Groups found.", "Fail")
					log.info "Duplicate Group added and found. Test failed.."
					fnUpdateLog("Duplicate Group added and found. Test failed..")
					testRunner.fail("Duplicate Group added and found. Test failed..")
				}
				else
				{
					fnGenerateTCStepsReport("Verify Duplicate Group Name in View Group Response", "Duplicate Group should NOT be added ", "Duplicate Group NOT found successfully", "Pass")
					log.info "Duplicate Group NOT found successfully"
					fnUpdateLog("Duplicate Group NOT found successfully")
				}
			}
			else
			{
				fnGenerateTCStepsReport("Verify View Group Response", "View Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
				fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
	
		//log.info "[Duplicate Group] Execution Ended......."
		//fnUpdateLog("[Duplicate Group] Execution Ended.......\n")
		//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
		}
		else
		{
			fnGenerateTCStepsReport("Verify Duplicate Add Group Response", "Duplicate Add Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request or Duplicate Group is added. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request or Duplicate Group is added.. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request or Duplicate Group is added.. Please try again..\n")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Groups] failed with exception : "+e)
		fnUpdateLog("[Add Groups] failed with exception : "+e)
	}
	finally
	{
		log.info "[Duplicate Group] Execution Completed Successfully......."
		fnUpdateLog("[Duplicate Group] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def String fnGetPropertyValue(String sPropertyName)
	{
		String  sPropValue = ""
		try
		{
			sPropValue = testRunner.testCase.getPropertyValue(sPropertyName)
			return sPropValue;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnGetPropertyValue] failed with exception : "+e)
		}
	}
	
	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddGroup" id="d04e18fe-ab54-4c19-bc17-f992f2288330" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/PWGroup" methodName="AddGroup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddGroup" id="9bfc5647-0e68-415f-b318-ff0abaad34cb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID": ${#TestSuite#AppOfficeID},
	"Name": "${#TestCase#NewGroupName}",
	"DefaultPhotoGroup": ${#TestSuite#DefaultPhotoGroup},
	"Description": "${#TestSuite#Description}",
	"GLCode": "${#TestSuite#GLCode}",
	"IncludeComment": ${#TestSuite#IncludeComment},
	"IncludeMeasurements": ${#TestSuite#IncludeMeasurements},
	"IncludePaint": ${#TestSuite#IncludePaint},
	"MaxNumberPerHouse": "${#TestSuite#MaxNumberPerHouse}",
	"PWGroupItem": [],
	"PhotoFolderName": "${#TestSuite#PhotoFolderName}"
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/PWGroup</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewGroups" id="35365368-fe96-4cbd-bab8-5405b2bca14a" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/PWGroup" methodName="ViewGroups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewGroups" id="9bfc5647-0e68-415f-b318-ff0abaad34cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/PWGroup</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>//testCase.setPropertyValue("AppOfficeID","0")
//testCase.setPropertyValue("OfficeName","")
testCase.testSuite.setPropertyValue("AppOfficeID","0")
testCase.testSuite.setPropertyValue("OfficeName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")

</con:setupScript><con:tearDownScript>log.info "Duplicate Add Property Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FAILED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>1</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Pre-requisite - Add Corporation and Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr><tr><td class = "tsindlevel1" width = 5%>2</td><td class = "tsgenlevel1" width = 25%>Verify Duplicate Group</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>2.1</td><td class = "tsgen" width = 25%>Verify Add Group Response </td><td class = "tsgen" width = 25%>Add Group response should be retrieved</td><td class = "tsgen" width = 25%>Response is Null for [AddGroup] request. Please try again with valid service end-point..</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/failed.gif' Fail&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewGroupName</con:name><con:value>AutoTestGroup_88169</con:value></con:property></con:properties></con:testCase><con:testCase id="f2b09057-ccce-4cb8-8890-719a33ad41d3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="_DuplicateGroup_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DuplicateGroup_Groovy" id="136214ce-5660-4ac6-9187-328a69974875"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	fnGenerateTCStepsReport("Pre-requisite - Add Corporation and Group", "", "", "")
	def runner = testRunner.testCase.testSuite.project.testSuites["Groups_TS"].testCases["AddGroup_TC"].run(null,false);
	
	log.info "[Duplicate Group] Execution Started.........." 
	fnUpdateLog("[Duplicate Group] Execution Started..........")
	fnGenerateTCStepsReport("Verify Duplicate Group", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewGroupName = ""
	def sAppGroupID = context.expand( '${#TestSuite#AppGroupID}' )
	def sGroupName = context.expand( '${#TestSuite#GroupName}' )
	def (GroupInitial, GroupLast) = sGroupName.tokenize( '_' )
	String sGroupRandomNum = GroupLast;
	String sCorporationName = testRunner.testCase.testSuite.project.testSuites["Corporations_TS"].testCases["AddCorporation_TC"].getPropertyValue("NewCorpName")
	
	try
	{
		fnRunRequest("ViewProperties");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//def sCount = testRunner.testCase.testSuite.getPropertyValue("TestCount")
		def requestContent = context.expand('${ViewProperties#Request}')
		def responseContent = context.expand('${ViewProperties#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max GroupId and set at test case level Group NewGroupId,NewGroupName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxGroupId = 0
			int iGroupListSize = jsonResponse["properties"].size()
			
			jsonResponse["properties"].each
			{ 
				//log.info it
				if(it.PWGroupID >iMaxGroupId)
				{
					iMaxGroupId = it.PWGroupID
				}
				//log.info "GroupID>>>>>>>>>>>>>>>>>>>>>"+ it.PWGroupID 
				//log.info "GroupName>>>>>>>>>>>>>>>>>>>"+ it.Name	
			}
			log.info "Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId 
			fnUpdateLog("Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId)
			log.info "Total Properties before Add : "+iGroupListSize.toString()
			fnUpdateLog("Total Properties before Add : "+iGroupListSize.toString())
		
			//int iRandomNum = fnRandomNum(10001,99999);
			//sNewGroupName = "AutoTestGroup_"+iRandomNum.toString();
			sNewGroupName = "AutoTestGroup_"+sGroupRandomNum;
			testRunner.testCase.setPropertyValue("NewGroupName",sNewGroupName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Group Response", "View Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group..");
		}
		//Start - Adding a new Group
		fnRunRequest("AddGroup"); // First Add
		fnRunRequest("AddGroup"); // Duplicate
		
		requestContent = context.expand('${AddGroup#Request}')
		log.info requestContent
		responseContent = context.expand('${AddGroup#Response}')
		log.info responseContent
	
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sCode = jsonResponse.code
			String sStatus = jsonResponse.status
			String sErrors = jsonResponse.errors
			log.info sCode+sStatus+sErrors
			//if(sKey=="Status" && sValue=="Add Group Failed")
			
			if(sCode=="RQ500" && sStatus=="500")
			{
				fnGenerateTCStepsReport("Verify Duplicate Group Response", "Duplicate Group response should throw errors", "Duplicate Group NOT added and response has errors", "Pass")
				log.info "Duplicate Group : "+sNewGroupName+" NOT added successfully"
				fnUpdateLog("Duplicate Group : "+sNewGroupName+" NOT added successfully")	
			}
			else
			{	
				fnGenerateTCStepsReport("Verify Duplicate Group Response", "Duplicate Group response should throw errors", "Duplicate Group added and response has NO errors", "Fail")
				log.info "Duplicate Group : "+sNewGroupName+" should NOT be added"
				fnUpdateLog("Duplicate Group : "+sNewGroupName+" should NOT be added")	
				testRunner.fail("Duplicate Group : "+sNewGroupName+" should NOT be added")
			}
			//End - Adding a new Group
		
			//Start - Verify newly added Group
			boolean bFlag = true
			fnRunRequest("ViewGroups");
			requestContent = context.expand('${ViewGroups#Request}')
			responseContent = context.expand('${ViewGroups#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
			
		
				iGroupListSize = jsonResponse["PWGroupItems"].size()
				log.info "Total Groups After Duplicate Add Attempt : "+iGroupListSize.toString()
				fnUpdateLog("Total Groups After Duplicate Add Attempt : "+iGroupListSize.toString())	
			
				int iDupGroupCount = 0 
				
				jsonResponse["PWGroupItems"].find
				{ 
					//log.info it
					//if(it.AppGroupID == 367 && it.GroupName == "TestGroup_367" )  //Just for testing
					//if(it.AppGroupID == iNewGroupId && it.GroupName == sNewGroupName )  //No need to validate on Group Id, It's auto generated by DB
					if(it.Name == sNewGroupName )
					{	
						iDupGroupCount = iDupGroupCount +1
						bFlag = false
						//log.info "Actual Group Id : "+it.AppGroupID.toString() +" matches with Expected Group Id : "+iNewGroupId.toString()+" It should NOT be added."
						//fnUpdateLog("Actual Group Id : "+it.AppGroupID.toString() +" matches with Expected Group Id : "+iNewGroupId.toString()+" It should NOT be added.")
						if(iDupGroupCount>=2)
						{	
							fnGenerateTCStepsReport("Verify Group Name in View Group Response", "Group should NOT be added ", "Actual Group Name : "+it.GroupName.toString() +" matches with Expected Group Name : "+sNewGroupName+". It should NOT be added.", "Fail")
							log.info "Actual Group Name : "+it.GroupName.toString() +" matches with Expected Group Name : "+sNewGroupName+" It should NOT be added."
							fnUpdateLog("Actual Group Name : "+it.GroupName.toString() +" matches with Expected Group Name : "+sNewGroupName+" It should NOT be added.")
						}
						//return true  //Look for two duplocate Groups
					}	
				}
				
				log.info "iDupGroupCount>>>>>>>>>>>>>>>"+iDupGroupCount
				if(bFlag == false && iDupGroupCount>=2)
				{
					fnGenerateTCStepsReport("Verify Duplicate Group Name in View Group Response", "Duplicate Group should NOT be added ", "Two duplicate Groups found.", "Fail")
					log.info "Duplicate Group added and found. Test failed.."
					fnUpdateLog("Duplicate Group added and found. Test failed..")
					testRunner.fail("Duplicate Group added and found. Test failed..")
				}
				else
				{
					fnGenerateTCStepsReport("Verify Duplicate Group Name in View Group Response", "Duplicate Group should NOT be added ", "Duplicate Group NOT found successfully", "Pass")
					log.info "Duplicate Group NOT found successfully"
					fnUpdateLog("Duplicate Group NOT found successfully")
				}
			}
			else
			{
				fnGenerateTCStepsReport("Verify View Group Response", "View Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
				fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
	
		//log.info "[Duplicate Group] Execution Ended......."
		//fnUpdateLog("[Duplicate Group] Execution Ended.......\n")
		//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Group Response", "Add Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again..\n")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Properties] failed with exception : "+e)
		fnUpdateLog("[Add Properties] failed with exception : "+e)
	}
	finally
	{
		log.info "[Duplicate Group] Execution Completed Successfully......."
		fnUpdateLog("[Duplicate Group] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def String fnGetPropertyValue(String sPropertyName)
	{
		String  sPropValue = ""
		try
		{
			sPropValue = testRunner.testCase.getPropertyValue(sPropertyName)
			return sPropValue;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnGetPropertyValue] failed with exception : "+e)
		}
	}
	
	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddGroup" id="016addbf-196b-4110-9390-72b8b179771c" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/PWGroup" methodName="AddGroup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddGroup" id="9bfc5647-0e68-415f-b318-ff0abaad34cb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID": ${#TestSuite#AppOfficeID},
	"Name": "${#TestCase#NewGroupName}",
	"DefaultPhotoGroup": ${#TestCase#DefaultPhotoGroup},
	"Description": "${#TestCase#Description}",
	"GLCode": "${#TestCase#GLCode}",
	"IncludeComment": ${#TestCase#IncludeComment},
	"IncludeMeasurements": ${#TestCase#IncludeMeasurements},
	"IncludePaint": ${#TestCase#IncludePaint},
	"MaxNumberPerHouse": "${#TestCase#MaxNumberPerHouse}",
	"PWGroupItem": [],
	"PhotoFolderName": "${#TestCase#PhotoFolderName}"
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/PWGroup</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewGroups" id="5d40b43c-5c52-4068-89a0-13b716444b30" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/PWGroup" methodName="ViewGroups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewGroups" id="9bfc5647-0e68-415f-b318-ff0abaad34cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/PWGroup</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>//testCase.setPropertyValue("AppOfficeID","0")
//testCase.setPropertyValue("OfficeName","")
testCase.testSuite.setPropertyValue("AppOfficeID","0")
testCase.testSuite.setPropertyValue("OfficeName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalOffices","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Duplicate Add Group Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Pre-requisite - Add Corporation and Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr><tr><td class = "tsindlevel1" width = 5%>2</td><td class = "tsgenlevel1" width = 25%>Verify Duplicate Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>2.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response for Duplicate </td><td class = "tsgen" width = 25%>Duplicate Property should be added with proper header response</td><td class = "tsgen" width = 25%>Duplicate Property : AutoTestProperty_46465 added successfully for Office Id : 169 and Office Name : AutoTestOffice_46465 (Corporation : AutoTestCorporation_46465)</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_46465 matches with Expected Property Name : AutoTestProperty_46465 for Office ID : 169 and Office Name : AutoTestOffice_46465 (Corporation : AutoTestCorporation_46465)</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.3</td><td class = "tsgen" width = 25%>Validate Newly Added Duplicate Property  </td><td class = "tsgen" width = 25%>Newly added Duplicate Property should be validated</td><td class = "tsgen" width = 25%>Newly added Duplicate Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property><con:property><con:name>AppOfficeID</con:name><con:value>0</con:value></con:property><con:property><con:name>OfficeName</con:name><con:value/></con:property><con:property><con:name>NewPropertyName</con:name><con:value>AutoTestProperty_46465</con:value></con:property><con:property><con:name>Address</con:name><con:value>AutoTestAddress</con:value></con:property><con:property><con:name>City</con:name><con:value>AutoTestCity</con:value></con:property><con:property><con:name>State</con:name><con:value>MI</con:value></con:property><con:property><con:name>ZipCode</con:name><con:value>48108</con:value></con:property><con:property><con:name>County</con:name><con:value>AutoTestCounty</con:value></con:property><con:property><con:name>MainSqFt</con:name><con:value>1234</con:value></con:property><con:property><con:name>NumberBedroom</con:name><con:value>2</con:value></con:property><con:property><con:name>NumberBathroom</con:name><con:value>2.5</con:value></con:property><con:property><con:name>YearBuilt</con:name><con:value>2015</con:value></con:property><con:property><con:name>Comment</con:name><con:value>AutoTestComment</con:value></con:property><con:property><con:name>GateCode</con:name><con:value>AutoGCode</con:value></con:property><con:property><con:name>LockBox</con:name><con:value>AutoLckBox</con:value></con:property><con:property><con:name>walkUserAssigned</con:name><con:value>Bryce</con:value></con:property></con:properties></con:testCase><con:testCase id="b0b66870-353c-4aa1-a56c-e157581aeea6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MaxLengthGroup_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="MaxLengthGroup_Groovy" id="4041788c-09d9-4e10-8c9c-534ddbac98b2"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);
	
	log.info "[Max Length Group] Execution Started.........." 
	fnUpdateLog("[Max Length Group] Execution Started.........." )
	fnGenerateTCStepsReport("Verify Max Length Group", "", "", "")
	
	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def iMaxGroupId = 0
	def sLatestGroupName = ""
	def sNewGroupName =""

	try
	{
		fnRunRequest("ViewGroups");
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewGroups#Request}')
		def responseContent = context.expand('${ViewGroups#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
		
		//jsonRequest = new JsonSlurper().parseText(requestContent)
	
		///////////////////Start - Parse JSON and get Max GroupId and set at test case level Group NewGroupId,NewGroupName///////////////////
		
		
		if (responseContent!="")
		{
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			int iGroupListSize = jsonResponse["PWGroupItems"].size()
			log.info "Total Groups Before Max Length Add Attempt : "+iGroupListSize.toString()
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Total Groups Before Max Length Add Attempt : "+iGroupListSize.toString()  +".\n")
			fnUpdateLog("Total Groups Before Max Length Add Attempt : "+iGroupListSize.toString() )
			
			jsonResponse["PWGroupItems"].each
			{ 
				//log.info it
				if(it.PWGroupID >iMaxGroupId)
				{
					iMaxGroupId = it.PWGroupID
					sLatestGroupName = it.Name
				}
				//log.info "GroupID>>>>>>>>>>>>>>>>>>>>>"+ it.GroupID 
				//log.info "GroupName>>>>>>>>>>>>>>>>>>>"+ it.GroupName	
			}
			log.info "Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId  +".\n")
			fnUpdateLog("Max GroupID>>>>>>>>>>>>>>>>>>>>>"+ iMaxGroupId )
			log.info "Latest Group Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestGroupName  
			//logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+"Latest Group Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestGroupName    +".\n")
			fnUpdateLog("Latest Group Name>>>>>>>>>>>>>>>>>>>>>"+ sLatestGroupName  )
	
			int iRandomNum = fnRandomNum(10001,99999);
			sNewGroupName = "TestGroupTestGroupTestGroupTestGroupTestGroupTestGroupTestGroupTestGroupTest_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewGroupName",sNewGroupName)
		}
		else
		{
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group..\n";
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Group..\n");
		}
		
	
		//Start - Adding a new Group
		fnRunRequest("AddGroup");
	
		requestContent = context.expand('${AddGroup#Request}')
		log.info requestContent
		responseContent = context.expand('${AddGroup#Response}')
		log.info responseContent
		
		if (responseContent!="")
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
	
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sCode = jsonResponse.code
			String sStatus = jsonResponse.status
			String sErrors = jsonResponse.errors
			log.info sCode+sStatus+sErrors
			//if(sKey=="Status" && sValue=="Add Group Failed")
			if(sCode=="RQ500" && sStatus=="500")
			{
				fnGenerateTCStepsReport("Verify Max Length Group Response", "Max Length Group response should throw errors", "Max Length Group NOT added and response has errors", "Pass")
				log.info "Max Length Group : "+sNewGroupName+" NOT added successfully"
				fnUpdateLog("Max Length Group : "+sNewGroupName+" NOT added successfully")	
			}
			else
			{
				fnGenerateTCStepsReport("Verify Max Length Group Response", "Max Length Group response should throw errors", "Max Length Group added and response has NO errors", "Fail")
				log.info "Max Length Group : "+sNewGroupName+" should NOT be added"
				fnUpdateLog("Max Length Group : "+sNewGroupName+" should NOT be added")	
				testRunner.fail("Max Length Group : "+sNewGroupName+" should NOT be added")
			}
			//End - Adding a new Group
		
			//Start - Verify newly added Group
			boolean bFlag = true
			fnRunRequest("ViewGroups");
			requestContent = context.expand('${ViewGroups#Request}')
			responseContent = context.expand('${ViewGroups#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
			
		
				iGroupListSize = jsonResponse["PWGroupItems"].size()
				log.info "Total Groups After Max Length Add Attempt : "+iGroupListSize.toString()
				fnUpdateLog("Total Groups After Max Length Add Attempt : "+iGroupListSize.toString())	
			
				int iDupGroupCount = 0 
				
				jsonResponse["PWGroupItems"].find
				{ 
					//log.info it
					//if(it.GroupID == 367 && it.GroupName == "TestGroup_367" )  //Just for testing
					//if(it.GroupID == iNewGroupId && it.GroupName == sNewGroupName )  //No need to validate on Group Id, It's auto generated by DB
					if(it.Name == sNewGroupName )
					{	
						iDupGroupCount = iDupGroupCount +1
						bFlag = false
						//log.info "Actual Group Id : "+it.GroupID.toString() +" matches with Expected Group Id : "+iNewGroupId.toString()+" It should NOT be added."
						//fnUpdateLog("Actual Group Id : "+it.GroupID.toString() +" matches with Expected Group Id : "+iNewGroupId.toString()+" It should NOT be added.")
						if(iDupGroupCount>=2)
						{
							fnGenerateTCStepsReport("Verify Group Name in View Group Response", "Group should NOT be added ", "Actual Group Name : "+it.Name.toString() +" matches with Expected Group Name : "+sNewGroupName+". It should NOT be added.", "Fail")
							log.info "Actual Group Name : "+it.Name.toString() +" matches with Expected Group Name : "+sNewGroupName+" It should NOT be added."
							fnUpdateLog("Actual Group Name : "+it.Name.toString() +" matches with Expected Group Name : "+sNewGroupName+" It should NOT be added.")
						}
						//return true  //Look for two duplocate Groups
					}	
				}
				
				log.info "iDupGroupCount>>>>>>>>>>>>>>>"+iDupGroupCount
				if(bFlag == false && iDupGroupCount>=2)
				{
					fnGenerateTCStepsReport("Verify Max Length Group Name in View Group Response", "Max Length Group should NOT be added ", "Max Length Group found.", "Fail")
					log.info "Max Length Group added and found. Test failed.."
					fnUpdateLog("Max Length Group added and found. Test failed..")
					testRunner.fail("Max Length Group added and found. Test failed..")
				}
				else
				{
					fnGenerateTCStepsReport("Verify Max Length Group Name in View Group Response", "Max Length Group should NOT be added ", "Max Length Group NOT found successfully", "Pass")
					log.info "Max Length Group NOT found successfully"
					fnUpdateLog("Max Length Group NOT found successfully")
				}
			}
			else
			{
				fnGenerateTCStepsReport("Verify View Group Response", "View Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
				fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Group Response", "Add Group response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request or Max Length Group is added. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request or Max Length Group is added. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request or Max Length Group is added. Please try again..\n")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Max Length Groups] failed with exception : "+e)
		fnUpdateLog("[Max Length Groups] failed with exception : "+e)
	}
	finally
	{
		log.info "[Max Length Group] Execution Completed Successfully......."
		fnUpdateLog("[Max Length Group] Execution Completed Successfully.......\n")
	}
///////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

	]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddGroup" id="0e1c3b64-77b9-4da2-bda4-40b486ea40bc" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/PWGroup" methodName="AddGroup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddGroup" id="9bfc5647-0e68-415f-b318-ff0abaad34cb" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID": ${#TestSuite#AppOfficeID},
	"Name": "${#TestCase#NewGroupName}",
	"DefaultPhotoGroup": ${#TestSuite#DefaultPhotoGroup},
	"Description": "${#TestSuite#Description}",
	"GLCode": "${#TestSuite#GLCode}",
	"IncludeComment": ${#TestSuite#IncludeComment},
	"IncludeMeasurements": ${#TestSuite#IncludeMeasurements},
	"IncludePaint": ${#TestSuite#IncludePaint},
	"MaxNumberPerHouse": "${#TestSuite#MaxNumberPerHouse}",
	"PWGroupItem": [],
	"PhotoFolderName": "${#TestSuite#PhotoFolderName}"
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/PWGroup</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewGroups" id="af68239b-627e-4a29-9093-ddcd0615aff9" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/PWGroup" methodName="ViewGroups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewGroups" id="9bfc5647-0e68-415f-b318-ff0abaad34cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/PWGroup</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>//testCase.setPropertyValue("AppOfficeID","0")
//testCase.setPropertyValue("OfficeName","")
testCase.testSuite.setPropertyValue("AppOfficeID","0")
testCase.testSuite.setPropertyValue("OfficeName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Max Length Add Property Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>2</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>2</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Max Length Group</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Max Length Group Response </td><td class = "tsgen" width = 25%>Max Length Group response should throw errors</td><td class = "tsgen" width = 25%>Max Length Group NOT added and response has errors</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Max Length Group Name in View Group Response </td><td class = "tsgen" width = 25%>Max Length Group should NOT be added </td><td class = "tsgen" width = 25%>Max Length Group NOT found successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>NewGroupName</con:name><con:value>TestGroupTestGroupTestGroupTestGroupTestGroupTestGroupTestGroupTestGroupTest_29393</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>AppOfficeID</con:name><con:value>0</con:value></con:property><con:property><con:name>OfficeName</con:name><con:value/></con:property><con:property><con:name>DefaultPhotoGroup</con:name><con:value>1</con:value></con:property><con:property><con:name>Description</con:name><con:value>AutoTestDescription</con:value></con:property><con:property><con:name>GLCode</con:name><con:value>AutoTstGLCode</con:value></con:property><con:property><con:name>IncludeComment</con:name><con:value>1</con:value></con:property><con:property><con:name>IncludeMeasurements</con:name><con:value>1</con:value></con:property><con:property><con:name>IncludePaint</con:name><con:value>1</con:value></con:property><con:property><con:name>MaxNumberPerHouse</con:name><con:value>12</con:value></con:property><con:property><con:name>PWGroupItem</con:name><con:value/></con:property><con:property><con:name>PhotoFolderName</con:name><con:value>AutoTestFolderName</con:value></con:property></con:properties><con:setupScript/></con:testSuite><con:testSuite id="a6b48b0c-1228-45e2-9c29-7e41b478e185" name="EndToEndSmokeTest_TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="a3c8d7e5-ee56-4daa-b7e6-e64cb5eb70fa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AddCorporationSmoke_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="AddCorporation_Groovy" id="5c6275aa-098c-4818-a412-ca01f0f75103"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	log.info "[Add Corporation] Execution Started.........." 
	fnUpdateLog("[Add Corporation] Execution Started..........")
	fnGenerateTCStepsReport("Verify Add Corporation", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewCorpName = ""
	try
	{
		fnRunRequest("ViewCorporations");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewCorporations#Request}')
		def responseContent = context.expand('${ViewCorporations#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max CorpId and set at test case level property NewCorpId,NewCorpName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxCorpId = 0
			int iCorportionListSize = jsonResponse["CorporateItems"].size()
			
			jsonResponse["CorporateItems"].each
			{ 
				//log.info it
				if(it.CorporateID >iMaxCorpId)
				{
					iMaxCorpId = it.CorporateID
				}
				//log.info "CorporateID>>>>>>>>>>>>>>>>>>>>>"+ it.CorporateID 
				//log.info "CorporateName>>>>>>>>>>>>>>>>>>>"+ it.CorporateName	
			}
			log.info "Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId 
			fnUpdateLog("Max CorporateID>>>>>>>>>>>>>>>>>>>>>"+ iMaxCorpId)
			log.info "Total Corporations before Add : "+iCorportionListSize.toString()
			fnUpdateLog("Total Corporations before Add : "+iCorportionListSize.toString())
		
			int iRandomNum = fnRandomNum(10001,99999);
			sNewCorpName = "AutoTestCorporation_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewCorpName",sNewCorpName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Corporation Response", "View Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding corporation..");
		}
		//Start - Adding a new Corporation
		fnRunRequest("AddCorporation");
		
		requestContent = context.expand('${AddCorporation#Request}')
		log.info requestContent
		responseContent = context.expand('${AddCorporation#Response}')
		log.info responseContent


	def sRespHeaderData = testRunner.testCase.testSteps["AddCorporation"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");

		/*
			jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value
			*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddCorporation", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			//if(sKey=="Status" && sValue=="Action: Corporate Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Corporation Header Response", "Corporation should be created with proper header response", "Corporation : "+sNewCorpName+" added successfully", "Pass")
				log.info "Corporation : "+sNewCorpName+" added successfully"	
				fnUpdateLog("Corporation : "+sNewCorpName+" added successfully")
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Corporation Response", "Corporation should be created with proper header response", "Corporation : "+sNewCorpName+" NOT added", "Fail")
				log.info "Corporation : "+sNewCorpName+" NOT added"
				fnUpdateLog("Corporation : "+sNewCorpName+" NOT added")
				testRunner.fail("Corporation : "+sNewCorpName+" NOT added")
			}
			//End - Adding a new Corporation
		
			//sleep(1000)
			//Start - Verify newly added Corporation
			boolean bFlag = false
			fnRunRequest("ViewCorporations");
			requestContent = context.expand('${ViewCorporations#Request}')
			responseContent = context.expand('${ViewCorporations#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iCorportionListSize = jsonResponse["CorporateItems"].size()
				log.info "Total Corporations After Add : "+iCorportionListSize.toString()
				fnUpdateLog("Total Corporations After Add : "+iCorportionListSize.toString())
				
				jsonResponse["CorporateItems"].find
				{ 
					//log.info it
					//if(it.CorporateID == 367 && it.CorporateName == "TestCorporation_367" )  //Just for testing
					//if(it.CorporateID.toString() == iNewCorpId.toString() && it.CorporateName.toString() == sNewCorpName )
					if(it.CorporateName.toString() == sNewCorpName )
					{
						bFlag = true
						testRunner.testCase.testSuite.setPropertyValue("CorporateID",it.CorporateID.toString())
						testRunner.testCase.testSuite.setPropertyValue("CorporateName",it.CorporateName.toString())
						//log.info "Actual Corp Id : "+it.CorporateID.toString() +" matches with Expected Corp Id : "+iNewCorpId.toString()
						//fnUpdateLog("Actual Corp Id : "+it.CorporateID.toString() +" matches with Expected Corp Id : "+iNewCorpId.toString() )
						fnGenerateTCStepsReport("Verify Corporation Name in View Corporation Response", "Actual Corp name should match with Expected Corp name ", "Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName, "Pass")
						log.info "Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName
						fnUpdateLog("Actual Corp Name : "+it.CorporateName.toString() +" matches with Expected Corp Name : "+sNewCorpName)
						return true
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Corporation ", "Newly added Corporation should be validated", "Newly added Corporation validated successfully", "Pass")
					log.info "Newly added Corporation validated successfully"
					fnUpdateLog("Newly added Corporation validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Corporation ", "Newly added Corporation should be validated", "Newly added Corporation NOT validated. Corporation NOT found.", "Fail")
					log.info "Newly added Corporation NOT found"
					fnUpdateLog("Newly added Corporation NOT found")
					testRunner.fail("Newly added Corporation NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Corporation Response", "View Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Corporation Response", "Add Corporation response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Corporations] failed with exception : "+e)
		fnUpdateLog("[Add Corporations] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Corporation] Execution Completed Successfully......."
		fnUpdateLog("[Add Corporation] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

	def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
	{	
		try
		{
			def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
			log.info "Headers>>>>>>>"+respHeaders
			String sRespHeaderData = ""
			boolean bFlag = false
			for (header in respHeaders)
			{
				log.info header //<- prints all headers
				def (sHeader, sValue) = header.toString().tokenize( '=' )
				log.info sHeader 
				log.info sValue
				sValue=sValue.replaceAll("\\[","")
				sValue=sValue.replaceAll("\\]","")
				if(sExpHeader==sHeader && sExpValue==sValue)
				{
					bFlag = true
				}
				sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
			}
			sRespHeaderData = "["+sRespHeaderData.trim()+"]"
			log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
			return [sRespHeaderData,bFlag] ;
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
			testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
		}
	
		

}
		/*	{
		    "CorporateID": ${#TestCase#NewCorpId},
		    "CorporateName": "${#TestCase#NewCorpName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddCorporation" id="c00e11df-1f08-4ba9-a57c-a59db329c626" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Corporate" methodName="AddCorporation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddCorporation" id="cf639bdd-55f7-435f-9406-342efaa36c60" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
    "CorporateName": "${#TestCase#NewCorpName}"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:assertion type="GroovyScriptAssertion" id="e4219a6b-f1ed-466c-ab4b-8250e7c3ee14" name="Script Assertion"><con:configuration><scriptText>log.info messageExchange.getRequestContent().toString()

for (header in messageExchange.getResponseHeaders())
{
	log.info header //&lt;- prints all headers
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewCorporations" id="bc9c2278-1c2e-4e13-adb8-ef41553d6748" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Corporate" methodName="ViewCorporations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewCorporations" id="84117eed-e671-481b-b13e-b8ad20fb3df8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Corporate</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="_AddCorporation_Groovy" id="68b363b6-60dd-4555-9336-8db9b0338acf" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	log.info "[Add Corporation] Execution Started.........." 

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewCorpName = ""
	try
	{
		
			boolean bFlag = false
			int iRandomNum = fnRandomNum(10001,99999);
			sNewCorpName = "TestCorporation_"+iRandomNum.toString();
			testRunner.testCase.setPropertyValue("NewCorpName",sNewCorpName)
			fnRunRequest("AddCorporation");

			fnRunRequest("ViewCorporations");
			def responseContent = context.expand('${ViewCorporations#Response}')

			if (responseContent!="")
			{
				
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iCorportionListSize = jsonResponse["CorporateItems"].size()
				log.info "Total Corporations After Add : "+iCorportionListSize.toString()
								
				jsonResponse["CorporateItems"].find
				{ 
					if(it.CorporateName.toString() == sNewCorpName )
					{
						bFlag = true
						testRunner.testCase.testSuite.setPropertyValue("CorporateID",it.CorporateID.toString())
						log.info "Actual Corp Name : "+it.CorporateName.toString() +" created with CorporateID : "+it.CorporateID.toString()
						return true
					}	
				}
			
				if(bFlag == true)
				{
					log.info "Newly added Corporation validated successfully"
				}
				else
				{
					log.info "Newly added Corporation NOT found"
					testRunner.fail("Newly added Corporation NOT found")
				}
			}
			else
			{
				log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n"
				testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}

	}
	catch (Exception e)
	{
		testRunner.fail("[Add Corporations] failed with exception : "+e)
		log.info "[Add Corporations] failed with exception : "+e
	}
	finally
	{
		log.info "[Add Corporation] Execution Completed Successfully......."
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	


	
		/*	{
		    "CorporateID": ${#TestCase#NewCorpId},
		    "CorporateName": "${#TestCase#NewCorpName}"
		}*/</script></con:config></con:testStep><con:setupScript>testCase.setPropertyValue("CorporateID","0")
testCase.setPropertyValue("CorporateName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")
</con:setupScript><con:tearDownScript>log.info "View Offices Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////////////////////////////////////////////

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>NewRegId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>3</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>1</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Add Corporation</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Add Corporation Header Response </td><td class = "tsgen" width = 25%>Corporation should be created with proper header response</td><td class = "tsgen" width = 25%>Corporation : AutoTestCorporation_94999 added successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Corporation Name in View Corporation Response </td><td class = "tsgen" width = 25%>Actual Corp name should match with Expected Corp name </td><td class = "tsgen" width = 25%>Actual Corp Name : AutoTestCorporation_94999 matches with Expected Corp Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.3</td><td class = "tsgen" width = 25%>Validate Newly Added Corporation  </td><td class = "tsgen" width = 25%>Newly added Corporation should be validated</td><td class = "tsgen" width = 25%>Newly added Corporation validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalRegions</con:name><con:value>5</con:value></con:property><con:property><con:name>NewOfficeId</con:name><con:value>0</con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property><con:property><con:name>NewCorpName</con:name><con:value>AutoTestCorporation_94999</con:value></con:property><con:property><con:name>CorporateID</con:name><con:value>0</con:value></con:property><con:property><con:name>CorporateName</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="c25a8ea3-6053-4c21-9530-59590cd9ff21" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AddOfficesPropertiesSmoke_TC" searchProperties="true"><con:settings/><con:testStep type="groovy" name="AddOffice_Groovy" id="d80ca07c-d901-410b-b0ae-32f4c4bc13f4"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewOfficeName = ""
	def sCorporationID = context.expand( '${#TestSuite#CorporateID}' )
	def sCorporationName = context.expand( '${#TestSuite#CorporateName}' )
	//def (CorpInitial, CorpLast) = sCorporationName.tokenize( '_' )
	//String sCorpRandomNum = CorpLast;
	
	try
	{
		def iCount = context.expand( '${#Project#OfficePropertySmokeCount}' )
	   for(int i=1; i<=iCount.toInteger();i++)
	   {
	   	testRunner.testCase.testSuite.setPropertyValue("TestCount",i.toString())
	   	log.info "[Add Office] Execution Started.........." 
		fnUpdateLog("[Add Office] Execution Started..........")
		fnGenerateTCStepsReport("Verify Add Office", "", "", "")
		
		fnRunRequest("ViewOffices");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		def requestContent = context.expand('${ViewOffices#Request}')
		def responseContent = context.expand('${ViewOffices#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max OfficeId and set at test case level property NewOfficeId,NewOfficeName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxOfficeId = 0
			int iOfficeListSize = jsonResponse["AppOfficeItems"].size()
			
			jsonResponse["AppOfficeItems"].each
			{ 
				//log.info it
				if(it.AppOfficeID >iMaxOfficeId)
				{
					iMaxOfficeId = it.AppOfficeID
				}
				//log.info "OfficeID>>>>>>>>>>>>>>>>>>>>>"+ it.AppOfficeID 
				//log.info "OfficeName>>>>>>>>>>>>>>>>>>>"+ it.OfficeName	
			}
			log.info "Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId 
			fnUpdateLog("Max OfficeID>>>>>>>>>>>>>>>>>>>>>"+ iMaxOfficeId)
			log.info "Total Offices before Add : "+iOfficeListSize.toString()
			fnUpdateLog("Total Offices before Add : "+iOfficeListSize.toString())
		
			int iRandomNum = fnRandomNum(10001,99999);
			//sNewOfficeName = "AutoTestOffice_"+iRandomNum.toString();
			sNewOfficeName = "AutoTestOffice_"+iRandomNum.toString();
			//testRunner.testCase.setPropertyValue("NewOfficeName",sNewOfficeName)  //Moving to TestSuite level property
			testRunner.testCase.testSuite.setPropertyValue("NewOfficeName",sNewOfficeName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please continue adding Office..");
		}
		//Start - Adding a new Office
		fnRunRequest("AddOffice");
		
		requestContent = context.expand('${AddOffice#Request}')
		log.info requestContent
		responseContent = context.expand('${AddOffice#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddOffice"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(1).getName()+"_"+i.toString()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(1).getName()+"_"+i.toString()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddOffice", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			
			//if(sKey=="Status" && sValue=="Action: Corporate Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Office Header Response", "Office should be added with proper header response", "Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName, "Pass")
				log.info "Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName
				fnUpdateLog("Office : "+sNewOfficeName+" added successfully for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName)
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Office Response", "Office should be created with proper header response", "Office NOT added for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName, "Fail")
				log.info "Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName+" with header response : "+arrResult[0].toString())
				testRunner.fail("Office : "+sNewOfficeName+" NOT added for Corporate Id : "+sCorporationID+" and Corporation Name : "+sCorporationName+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Office
		
			//sleep(1000)
			//Start - Verify newly added Office
			boolean bFlag = false
			fnRunRequest("ViewOffices");
			requestContent = context.expand('${ViewOffices#Request}')
			responseContent = context.expand('${ViewOffices#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(2).getName()+"_"+i.toString()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(2).getName()+"_"+i.toString()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iOfficeListSize = jsonResponse["AppOfficeItems"].size()
				log.info "Total Offices After Add : "+iOfficeListSize.toString()
				fnUpdateLog("Total Offices After Add : "+iOfficeListSize.toString())
				
				jsonResponse["AppOfficeItems"].find
				{ 
					//log.info it
					//if(it.AppOfficeID == 367 && it.OfficeName == "TestOffice_367" )  //Just for testing
					//if(it.AppOfficeID.toString() == iNewOfficeId.toString() && it.OfficeName.toString() == sNewOfficeName )
					if(it.OfficeName.toString() == sNewOfficeName && it.CorporateID.toString() == sCorporationID)
					{
						bFlag = true
						testRunner.testCase.testSuite.setPropertyValue("AppOfficeID",it.AppOfficeID.toString())
						
						//log.info "Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString()
						//fnUpdateLog("Actual Office Id : "+it.AppOfficeID.toString() +" matches with Expected Office Id : "+iNewOfficeId.toString() )
						fnGenerateTCStepsReport("Verify Office Name in View Office Response", "Actual Office name should match with Expected Office name ", "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation ID : "+it.CorporateID.toString()+" and Corporation Name : "+sCorporationName, "Pass")
						log.info "Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation ID : "+it.CorporateID.toString()+" and Corporation Name : "+sCorporationName
						fnUpdateLog("Actual Office Name : "+it.OfficeName.toString() +" matches with Expected Office Name : "+sNewOfficeName+" for Corporation ID : "+it.CorporateID.toString()+" and Corporation Name : "+sCorporationName)
						return true
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Office ", "Newly added Office should be validated", "Newly added Office validated successfully", "Pass")
					log.info "Newly added Office validated successfully"
					fnUpdateLog("Newly added Office validated successfully")
					sleep(1000)
					fnRunRequest("AddProperty_Groovy");
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Office ", "Newly added Office should be validated", "Newly added Office NOT validated. Office NOT found.", "Fail")
					log.info "Newly added Office NOT found"
					fnUpdateLog("Newly added Office NOT found")
					testRunner.fail("Newly added Office NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Office Response", "View Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(2).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Office Response", "Add Office response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(1).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	   }//End of For loop
	}//End of Try
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[AddOfficesPropertiesSmoke_TC] failed with exception : "+e)
		fnUpdateLog("[AddOfficesPropertiesSmoke_TC] failed with exception : "+e)
	}
	finally
	{
		log.info "[AddOfficesPropertiesSmoke_TC] Execution Completed Successfully......."
		fnUpdateLog("[AddOfficesPropertiesSmoke_TC] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "OfficeID": ${#TestCase#NewOfficeId},
		    "OfficeName": "${#TestCase#NewOfficeName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddOffice" id="4e8993c7-d480-4176-9b34-43c4922d334b" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="AddOffice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddOffice" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"OfficeName": "${#TestSuite#NewOfficeName}",
	"DefaultStoreNumber": "1234",
	"Address": "AutoTestAddress",
	"City": "AutoTestCity",
	"State": "MI",
	"ZipCode": "48108",
	"PhoneNumber": "1112222",
	"QuoteEmailAddress": "AutoTestQuote@AutoTest.com",
	"PropertyWalkSubmitEmailAddress": "AutoTestSubmit@AutoTest.com",
	"CorporateID": ${#TestSuite#CorporateID}
}</con:request><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewOffices" id="82870534-90ec-45a8-a8b1-37ee135852e7" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/AppOffice" methodName="ViewOffices" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewOffices" id="b7a4d0ce-e85a-472b-b707-db5606eca8d5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>http://localhost/RenoWalk/api/v1/AppOffice</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="AddProperty_Groovy" id="4344b621-ecb1-4b43-bd06-49f865707757" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

	scripts = testRunner.testCase.testSuite.project.testSuites["Function_Library_TS"];
	scripts.testCases["Reporter_TC"].testSteps["MainReporter"].run(testRunner, context);

	log.info "[Add Property] Execution Started.........." 
	fnUpdateLog("[Add Property] Execution Started..........")
	fnGenerateTCStepsReport("Verify Add Property", "", "", "")

	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	def ResultPath = context.expand( '${#Project#ResultPath}' )
	//String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	String sJSONPath = ResultPath+"\\InputOutput_JSONs\\"+sTSName
	String sTCName = testRunner.testCase.getName();
	def sNewPropertyName = ""
	def sAppOfficeID = context.expand( '${#TestSuite#AppOfficeID}' )
	def sOfficeName = context.expand( '${#TestSuite#NewOfficeName}' )
	def (OfficeInitial, OfficeLast) = sOfficeName.tokenize( '_' )
	String sOfficeRandomNum = OfficeLast;
	
	try
	{
		fnRunRequest("ViewProperties");
	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		def sCount = testRunner.testCase.testSuite.getPropertyValue("TestCount")
		def requestContent = context.expand('${ViewProperties#Request}')
		def responseContent = context.expand('${ViewProperties#Response}')
		log.info "request>>>>>"+requestContent
		log.info "response>>>>"+responseContent
	
		//jsonRequest = new JsonSlurper().parseText(requestContent)
		if (responseContent!="")
		{
				
			///////////////////Start - Parse JSON and get Max PropertyId and set at test case level property NewPropertyId,NewPropertyName///////////////////
			jsonResponse = new JsonSlurper().parseText(responseContent)
		
			def iMaxPropertyId = 0
			int iPropertyListSize = jsonResponse["properties"].size()
			
			jsonResponse["properties"].each
			{ 
				//log.info it
				if(it.PropertyID >iMaxPropertyId)
				{
					iMaxPropertyId = it.PropertyID
				}
				//log.info "PropertyID>>>>>>>>>>>>>>>>>>>>>"+ it.PropertyID 
				//log.info "PropertyName>>>>>>>>>>>>>>>>>>>"+ it.ProjectName	
			}
			log.info "Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId 
			fnUpdateLog("Max PropertyID>>>>>>>>>>>>>>>>>>>>>"+ iMaxPropertyId)
			log.info "Total Properties before Add : "+iPropertyListSize.toString()
			fnUpdateLog("Total Properties before Add : "+iPropertyListSize.toString())
		
			//int iRandomNum = fnRandomNum(10001,99999);
			//sNewPropertyName = "AutoTestProperty_"+iRandomNum.toString();
			sNewPropertyName = "AutoTestProperty_"+sOfficeRandomNum;
			testRunner.testCase.testSuite.setPropertyValue("NewPropertyName",sNewPropertyName)
			//sleep(1000)

		}
		else
		{
			//fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please continue adding Property..", "Pass")
			log.info "Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please continue adding Property.."
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please continue adding Property..");
		}
		//Start - Adding a new Property
		fnRunRequest("AddProperty");
		
		requestContent = context.expand('${AddProperty#Request}')
		log.info requestContent
		responseContent = context.expand('${AddProperty#Response}')
		log.info responseContent
	
		def sRespHeaderData = testRunner.testCase.testSteps["AddProperty"].testRequest.response.responseHeaders
		//if (responseContent!="")   //old 
		if (sRespHeaderData!="")     //new
		{
			def reqF1 = new File(sJSONPath+"\\Request_"+sTCName)
			def resF1 = new File(sJSONPath+"\\Response_"+sTCName)
			if (!reqF1.exists()){reqF1.mkdirs()}
			if (!resF1.exists()){resF1.mkdirs()}
	
			def reqFile1 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(4).getName()+"_"+sCount.toString()+".json")
			reqFile1.write(requestContent)
			def respFile1 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(4).getName()+"_"+sCount.toString()+".json")
			respFile1.write(responseContent)
	
			fnUpdateLog("Service Request/Response Captured Successfully for Test Case ["+sTCName+"]");
		
			/*jsonResponse = new JsonSlurper().parseText(responseContent)
			String sKey = jsonResponse.Key
			String sValue = jsonResponse.Value*/
			log.info sRespHeaderData
			String[] arrResult = fnParseResponseHeaderData("AddProperty", "#status#","HTTP/1.1 201 Created")
			log.info "arrResult[0].toString()>>>"+arrResult[0].toString()
			log.info "arrResult[1].toString()>>>"+arrResult[1].toString()
			
			//if(sKey=="Status" && sValue=="Action: Office Added")  //old
			if(arrResult[1].toString()=="true")
			{
				fnGenerateTCStepsReport("Verify Add Property Header Response", "Property should be added with proper header response", "Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName, "Pass")
				log.info "Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName
				fnUpdateLog("Property : "+sNewPropertyName+" added successfully for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName)
			}
			else
			{
				fnGenerateTCStepsReport("Verify Add Property Response", "Property should be created with proper header response", "Property NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName, "Fail")
				log.info "Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString()
				fnUpdateLog("Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
				testRunner.fail("Property : "+sNewPropertyName+" NOT added for Office Id : "+sAppOfficeID+" and Office Name : "+sOfficeName+" with header response : "+arrResult[0].toString())
			}
			//End - Adding a new Property
		
			//sleep(1000)
			//Start - Verify newly added Property
			boolean bFlag = false
			fnRunRequest("ViewProperties");
			requestContent = context.expand('${ViewProperties#Request}')
			responseContent = context.expand('${ViewProperties#Response}')
			log.info responseContent
			
			if (responseContent!="")
			{
				def reqFile2 = new File(sJSONPath+"\\Request_"+sTCName+"\\Request_"+testRunner.testCase.getTestStepAt(5).getName()+"_"+sCount.toString()+".json")
				reqFile2.write(requestContent)
				def respFile2 = new File(sJSONPath+"\\Response_"+sTCName+"\\Response_"+testRunner.testCase.getTestStepAt(5).getName()+"_"+sCount.toString()+".json")
				respFile2.write(responseContent)
				jsonResponse = new JsonSlurper().parseText(responseContent)
				
				iPropertyListSize = jsonResponse["properties"].size()
				log.info "Total Properties After Add : "+iPropertyListSize.toString()
				fnUpdateLog("Total Properties After Add : "+iPropertyListSize.toString())
				
				jsonResponse["properties"].find
				{ 
					//log.info it
					//if(it.PropertyID == 367 && it.ProjectName == "TestProperty_367" )  //Just for testing
					//if(it.PropertyID.toString() == iNewPropertyId.toString() && it.ProjectName.toString() == sNewPropertyName )
					if(it.ProjectName.toString() == sNewPropertyName && it.AppOfficeID.toString() == sAppOfficeID)
					{
						bFlag = true
						//log.info "Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString()
						//fnUpdateLog("Actual Property Id : "+it.PropertyID.toString() +" matches with Expected Property Id : "+iNewPropertyId.toString() )
						fnGenerateTCStepsReport("Verify Property Name in View Property Response", "Actual Property name should match with Expected Property name ", "Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName, "Pass")
						log.info "Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName
						fnUpdateLog("Actual Property Name : "+it.ProjectName.toString() +" matches with Expected Property Name : "+sNewPropertyName+" for Office ID : "+it.AppOfficeID.toString()+" and Office Name : "+sOfficeName)
						return true
					}	
				}
			
				if(bFlag == true)
				{
					fnGenerateTCStepsReport("Validate Newly Added Property ", "Newly added Property should be validated", "Newly added Property validated successfully", "Pass")
					log.info "Newly added Property validated successfully"
					fnUpdateLog("Newly added Property validated successfully")
				}
				else
				{
					fnGenerateTCStepsReport("Validate Newly Added Property ", "Newly added Property should be validated", "Newly added Property NOT validated. Property NOT found.", "Fail")
					log.info "Newly added Property NOT found"
					fnUpdateLog("Newly added Property NOT found")
					testRunner.fail("Newly added Property NOT found")
				}
			}
			else
			{
			fnGenerateTCStepsReport("Verify View Property Response", "View Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please try again..\n");
			testRunner.fail("Response is Null for ["+ testRunner.testCase.getTestStepAt(5).getName()+ "] request. Please try again..\n")
			}
		
			//log.info "Status: "+ testRunner.getStatus()  //Handeled in teardown script
	
		}
		else
		{
			fnGenerateTCStepsReport("Verify Add Property Response", "Add Property response should be retrieved", "Response is Null for ["+ testRunner.testCase.getTestStepAt(4).getName()+ "] request. Please try again with valid service end-point..", "Fail")
			fnUpdateLog("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..");
			testRunner.fail("Response is Null for ["+ sTCName+ "] request. Please try again with valid service end-point..")
		}
	}
	catch (Exception e)
	{
		fnGenerateTCStepsReport("Error Handler ", "There should NOT be any error/exception in the test", "Exception found in current test.", "Fail")
		testRunner.fail("[Add Properties] failed with exception : "+e)
		fnUpdateLog("[Add Properties] failed with exception : "+e)
	}
	finally
	{
		log.info "[Add Property] Execution Completed Successfully......."
		fnUpdateLog("[Add Property] Execution Completed Successfully.......\n")
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	def int fnRandomNum(min, max) 
	{
		try
		{
		   Random rand = new Random();
		   int randomNum = rand.nextInt((max - min) + 1) + min;
		   return randomNum;
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
			testRunner.fail("Function [fnRandomNum] failed with exception : "+e)
		}
	}
	
	def fnRunRequest(String sReqName)
	{
		try
		{
			testRunner.testCase.testSteps[sReqName].disabled = false
			testRunner.runTestStepByName(sReqName)
			testRunner.testCase.testSteps[sReqName].disabled = true
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
			testRunner.fail("Function [fnRunRequest] failed with exception : "+e)
		}
	}

	def fnUpdateLog(String sLogContent)
	{
		try
		{
			def logFileLocn = context.expand( '${#Project#ProjectLog}' )	
			def logFile = new File(logFileLocn)
			logFile.append(new Date().format('yyyyMMddHHmmss')+ " : "+sLogContent +"\n")
		}
		catch (Exception e)
		{
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
	}

	def fnUpdateTCStepsCount(String sStatus)
	{
		def sTotalSteps = testRunner.testCase.getPropertyValue("TotalSteps")
		int sLatestTotalSteps = sTotalSteps.toInteger()+1
		testRunner.testCase.setPropertyValue("TotalSteps",sLatestTotalSteps.toString())
		try
		{
			if(sStatus=="Pass")
			{
				def sPassSteps = testRunner.testCase.getPropertyValue("PassSteps")
				int sLatestPassSteps = sPassSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("PassSteps",sLatestPassSteps.toString())
				
			}
			else
			{
				def sFailSteps = testRunner.testCase.getPropertyValue("FailSteps")
				int sLatestFailSteps = sFailSteps.toInteger()+1
				testRunner.testCase.setPropertyValue("FailSteps",sLatestFailSteps.toString())
				testRunner.fail("Test Failed..")
			}
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnUpdateTCStepsCount] failed with exception : "+e)
			testRunner.fail("Function [fnUpdateTCStepsCount] failed with exception : "+e)
		}
		
	}

	def fnGenerateTCStepsReport(String sStepDesc, String sExpResult, String sActualResult, String sStatus)
	{

		def sStepNo = ""
		int iCurrentStepNo = 0
		try{
			
				if(sStatus == "Pass")
				{
					fnUpdateTCStepsCount("Pass")
				}
				else if(sStatus == "Fail")
				{
					fnUpdateTCStepsCount("Fail")
				}
				
				if(sExpResult == "" && sActualResult == "")   //Main step
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					iCurrentStepNo = sStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("StepCounter",iCurrentStepNo.toString())
				
					testRunner.testCase.setPropertyValue("SubStepCounter","0")
					sStepNo = iCurrentStepNo.toString()
					sStatus = ""
				}
				else  //Sub-steps
				{
					sStepNo = testRunner.testCase.getPropertyValue("StepCounter")
					if(sStepNo =="0")
					{
						sStepNo = "1"
					}
					def sSubStepNo = testRunner.testCase.getPropertyValue("SubStepCounter")
					int iCurrentSubStepNo = sSubStepNo.toInteger()+1
					testRunner.testCase.setPropertyValue("SubStepCounter",iCurrentSubStepNo.toString())
					sStepNo = sStepNo+"."+iCurrentSubStepNo.toString()
				}
				log.info "Hello1"
				def sExistingTCStepsHTMLContent = testRunner.testCase.getPropertyValue("TCStepsHTMLContent")
				log.info "iCurrentStepNo.toString()>>>>>>"+iCurrentStepNo.toString()
				String sTCStepsHTMLContent = context.Reporter.generateTCHTMLContent(sStepNo, sStepDesc, sExpResult, sActualResult, sStatus)
				testRunner.testCase.setPropertyValue("TCStepsHTMLContent", sExistingTCStepsHTMLContent+sTCStepsHTMLContent)
				log.info sExistingTCStepsHTMLContent+sTCStepsHTMLContent
		}
		catch (Exception e)
		{
			fnUpdateLog("Function [fnGenerateTCStepsReport] failed with exception : "+e)
			testRunner.fail("Function [fnGenerateTCStepsReport] failed with exception : "+e)
		}
	}

		def fnParseResponseHeaderData(String sStepName, String sExpHeader, String sExpValue)
		{	
			try
			{
				def respHeaders = testRunner.testCase.testSteps[sStepName].testRequest.response.responseHeaders
				log.info "Headers>>>>>>>"+respHeaders
				String sRespHeaderData = ""
				boolean bFlag = false
				for (header in respHeaders)
				{
					log.info header //<- prints all headers
					def (sHeader, sValue) = header.toString().tokenize( '=' )
					log.info sHeader 
					log.info sValue
					sValue=sValue.replaceAll("\\[","")
					sValue=sValue.replaceAll("\\]","")
					if(sExpHeader==sHeader && sExpValue==sValue)
					{
						bFlag = true
					}
					sRespHeaderData = sRespHeaderData + sHeader +" = "+sValue + "    "
				}
				sRespHeaderData = "["+sRespHeaderData.trim()+"]"
				log.info  "sRespHeaderData>>>>>>"+sRespHeaderData
				return [sRespHeaderData,bFlag] ;
			}
			catch (Exception e)
			{
				fnUpdateLog("Function [fnResponseHeaderData] failed with exception : "+e)
				testRunner.fail("Function [fnResponseHeaderData] failed with exception : "+e)
			}
		
			
		}


		/*	{
		    "PropertyID": ${#TestCase#NewPropertyId},
		    "PropertyName": "${#TestCase#NewPropertyName}"
		}*/]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AddProperty" id="f4b87107-4159-4265-97f6-56b4d88b92d8" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="AddProperty" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddProperty" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request>{
	"AppOfficeID":${#TestSuite#AppOfficeID},
	"ProjectName":"${#TestSuite#NewPropertyName}",
	"Address":"AutoTestAddress",
	"City":"AutoTestCity",
	"State":"MI",
	"ZipCode":"12345",
	"County":"AutoTestCounty",
	"MainSqFt":"1234",
	"NumberBedroom":"2",
	"NumberBathroom":"2.5",
	"YearBuilt":"2015",
	"Comment":"AutoTestComment",
	"GateCode":"AutoGCode",
	"LockBox":"AutoLckBox",
	"walkUserAssigned":"Bryce"
}</con:request><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="ViewProperties" id="cd083348-6e3b-45ff-8c55-40713457046c" disabled="true"><con:settings/><con:config service="https://webapps-qa.homedepot.com" resourcePath="/RenoWalk/api/v1/Property" methodName="ViewProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ViewProperties" id="2fe2d640-f184-492f-82bf-f85ecb6782b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#ServiceEndPoint}</con:endpoint><con:request/><con:originalUri>https://webapps-qa.homedepot.com/RenoWalk/api/v1/Property</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/><con:entry>Content-Type</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>testCase.testSuite.setPropertyValue("AppOfficeID","0")
testCase.testSuite.setPropertyValue("NewOfficeName","")
testCase.testSuite.setPropertyValue("NewPropertyName","")
testCase.setPropertyValue("Status","")
testCase.setPropertyValue("TotalOffices","0")
testCase.setPropertyValue("TotalSteps","0")
testCase.setPropertyValue("PassSteps","0")
testCase.setPropertyValue("FailSteps","0")
testCase.setPropertyValue("StepCounter","0")
testCase.setPropertyValue("SubStepCounter","0")
testCase.setPropertyValue("TCStepsHTMLContent","")</con:setupScript><con:tearDownScript>log.info "Add Office Property Status : "+ testRunner.getStatus()
String sTestStatus = testRunner.getStatus().toString()
testCase.setPropertyValue("Status",sTestStatus)

////////////////////////////////////Archiving request/Respons files after moving to ALM////////////////////////////
/*	def working_Directory = context.expand( '${#Project#Working_Directory}' )
	def (value1, value2) = testRunner.testCase.testSuite.getName().tokenize( '_' )
	String sTSName = value1;
	String sJSONPath = working_Directory+"\\InputOutput_JSONs\\"+sTSName
	def resF = new File(sJSONPath+"\\Arch")
	log.info resF.toString()
	if (!resF.exists())
		{
			resF.mkdirs()
	}
	def rDate = new Date();
	def timeStamp = rDate.format('yyyyMMddHHmmss') 
	File f1 = new File(sJSONPath+"\\Request_"+testCase.getName());
	File f2 = new File(sJSONPath+"\\Response_"+testCase.getName());
	
	def fileName1 = f1.getName()
	def fileName2 = f2.getName()
	log.info f1.toString()
	def newName1 = fileName1.replace("Request_"+testCase.getName(),"Request_"+testCase.getName()+"_"+timeStamp)
	def newName2 = fileName2.replace("Response_"+testCase.getName(),"Response_"+testCase.getName()+"_"+timeStamp)
	def newf1 = new File(sJSONPath+"\\Arch"+"\\"+newName1)
	def newf2 = new File(sJSONPath+"\\Arch"+"\\"+newName2)
	log.info "newf1>>>"+newf1
	log.info "newf2>>>"+newf2
	f1.renameTo(newf1)
	f2.renameTo(newf2)
	log.info f1.toString()
	log.info f2.toString()
	
	//FileUtils.copyFileToDirectory(f1 , resF);
	//FileUtils.copyFileToDirectory(f2 , resF);
	//FileUtils.moveFileToDirectory(f1 , resF,true);
	//File file = new File(jiraALMPlugin_WorkingDirectory+"\\ALM_Issues_List.xls");  
	//File dir = new File(jiraALMPlugin_WorkingDirectory+"\\Arch");  
	log.info "newf1.getName().toString()>>>"+newf1.getName().toString()
	log.info "newf2.getName().toString()>>>"+newf2.getName().toString()
	boolean fileMoved1 = newf1.renameTo(new File(resF, newf1.getName())); 
	boolean fileMoved2 = newf2.renameTo(new File(resF, newf2.getName())); 
*/</con:tearDownScript><con:properties><con:property><con:name>Status</con:name><con:value>FINISHED</con:value></con:property><con:property><con:name>TotalSteps</con:name><con:value>60</con:value></con:property><con:property><con:name>PassSteps</con:name><con:value>60</con:value></con:property><con:property><con:name>FailSteps</con:name><con:value>0</con:value></con:property><con:property><con:name>StepCounter</con:name><con:value>20</con:value></con:property><con:property><con:name>SubStepCounter</con:name><con:value>3</con:value></con:property><con:property><con:name>TCStepsHTMLContent</con:name><con:value><![CDATA[<tr><td class = "tsindlevel1" width = 5%>1</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>1.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_35297 added successfully for Corporate Id : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_35297 matches with Expected Office Name : AutoTestOffice_35297 for Corporation ID : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>1.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>2</td><td class = "tsgenlevel1" width = 25%>Verify Add Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>2.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_35297 added successfully for Office Id : 1 and Office Name : AutoTestOffice_35297</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_35297 matches with Expected Property Name : AutoTestProperty_35297 for Office ID : 1 and Office Name : AutoTestOffice_35297</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>2.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>3</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>3.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_89977 added successfully for Corporate Id : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>3.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_89977 matches with Expected Office Name : AutoTestOffice_89977 for Corporation ID : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>3.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>4</td><td class = "tsgenlevel1" width = 25%>Verify Add Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>4.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_89977 added successfully for Office Id : 2 and Office Name : AutoTestOffice_89977</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>4.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_89977 matches with Expected Property Name : AutoTestProperty_89977 for Office ID : 2 and Office Name : AutoTestOffice_89977</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>4.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>5</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>5.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_15199 added successfully for Corporate Id : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>5.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_15199 matches with Expected Office Name : AutoTestOffice_15199 for Corporation ID : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>5.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>6</td><td class = "tsgenlevel1" width = 25%>Verify Add Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>6.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_15199 added successfully for Office Id : 3 and Office Name : AutoTestOffice_15199</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>6.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_15199 matches with Expected Property Name : AutoTestProperty_15199 for Office ID : 3 and Office Name : AutoTestOffice_15199</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>6.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>7</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>7.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_12635 added successfully for Corporate Id : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>7.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_12635 matches with Expected Office Name : AutoTestOffice_12635 for Corporation ID : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>7.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>8</td><td class = "tsgenlevel1" width = 25%>Verify Add Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>8.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_12635 added successfully for Office Id : 4 and Office Name : AutoTestOffice_12635</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>8.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_12635 matches with Expected Property Name : AutoTestProperty_12635 for Office ID : 4 and Office Name : AutoTestOffice_12635</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>8.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>9</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>9.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_58976 added successfully for Corporate Id : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>9.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_58976 matches with Expected Office Name : AutoTestOffice_58976 for Corporation ID : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>9.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>10</td><td class = "tsgenlevel1" width = 25%>Verify Add Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>10.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_58976 added successfully for Office Id : 5 and Office Name : AutoTestOffice_58976</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>10.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_58976 matches with Expected Property Name : AutoTestProperty_58976 for Office ID : 5 and Office Name : AutoTestOffice_58976</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>10.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>11</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>11.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_81178 added successfully for Corporate Id : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>11.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_81178 matches with Expected Office Name : AutoTestOffice_81178 for Corporation ID : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>11.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>12</td><td class = "tsgenlevel1" width = 25%>Verify Add Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>12.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_81178 added successfully for Office Id : 6 and Office Name : AutoTestOffice_81178</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>12.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_81178 matches with Expected Property Name : AutoTestProperty_81178 for Office ID : 6 and Office Name : AutoTestOffice_81178</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>12.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>13</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>13.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_20038 added successfully for Corporate Id : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>13.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_20038 matches with Expected Office Name : AutoTestOffice_20038 for Corporation ID : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>13.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>14</td><td class = "tsgenlevel1" width = 25%>Verify Add Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>14.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_20038 added successfully for Office Id : 7 and Office Name : AutoTestOffice_20038</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>14.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_20038 matches with Expected Property Name : AutoTestProperty_20038 for Office ID : 7 and Office Name : AutoTestOffice_20038</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>14.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>15</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>15.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_18366 added successfully for Corporate Id : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>15.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_18366 matches with Expected Office Name : AutoTestOffice_18366 for Corporation ID : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>15.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>16</td><td class = "tsgenlevel1" width = 25%>Verify Add Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>16.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_18366 added successfully for Office Id : 8 and Office Name : AutoTestOffice_18366</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>16.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_18366 matches with Expected Property Name : AutoTestProperty_18366 for Office ID : 8 and Office Name : AutoTestOffice_18366</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>16.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>17</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>17.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_23117 added successfully for Corporate Id : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>17.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_23117 matches with Expected Office Name : AutoTestOffice_23117 for Corporation ID : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>17.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>18</td><td class = "tsgenlevel1" width = 25%>Verify Add Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>18.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_23117 added successfully for Office Id : 9 and Office Name : AutoTestOffice_23117</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>18.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_23117 matches with Expected Property Name : AutoTestProperty_23117 for Office ID : 9 and Office Name : AutoTestOffice_23117</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>18.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>19</td><td class = "tsgenlevel1" width = 25%>Verify Add Office</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>19.1</td><td class = "tsgen" width = 25%>Verify Add Office Header Response </td><td class = "tsgen" width = 25%>Office should be added with proper header response</td><td class = "tsgen" width = 25%>Office : AutoTestOffice_15415 added successfully for Corporate Id : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>19.2</td><td class = "tsgen" width = 25%>Verify Office Name in View Office Response </td><td class = "tsgen" width = 25%>Actual Office name should match with Expected Office name </td><td class = "tsgen" width = 25%>Actual Office Name : AutoTestOffice_15415 matches with Expected Office Name : AutoTestOffice_15415 for Corporation ID : 2 and Corporation Name : AutoTestCorporation_94999</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>19.3</td><td class = "tsgen" width = 25%>Validate Newly Added Office  </td><td class = "tsgen" width = 25%>Newly added Office should be validated</td><td class = "tsgen" width = 25%>Newly added Office validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td><tr><td class = "tsindlevel1" width = 5%>20</td><td class = "tsgenlevel1" width = 25%>Verify Add Property</td><td class = "tsgenlevel1" width = 25%></td><td class = "tsgenlevel1" width = 25%></td><td class = "tsindlevel1" width = 10%>&nbsp</td><td class = "tsgenlevel1" width = 10%></td></tr>

<tr><td class = "tsindlevel2" width = 5%>20.1</td><td class = "tsgen" width = 25%>Verify Add Property Header Response </td><td class = "tsgen" width = 25%>Property should be added with proper header response</td><td class = "tsgen" width = 25%>Property : AutoTestProperty_15415 added successfully for Office Id : 10 and Office Name : AutoTestOffice_15415</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>20.2</td><td class = "tsgen" width = 25%>Verify Property Name in View Property Response </td><td class = "tsgen" width = 25%>Actual Property name should match with Expected Property name </td><td class = "tsgen" width = 25%>Actual Property Name : AutoTestProperty_15415 matches with Expected Property Name : AutoTestProperty_15415 for Office ID : 10 and Office Name : AutoTestOffice_15415</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>

<tr><td class = "tsindlevel2" width = 5%>20.3</td><td class = "tsgen" width = 25%>Validate Newly Added Property  </td><td class = "tsgen" width = 25%>Newly added Property should be validated</td><td class = "tsgen" width = 25%>Newly added Property validated successfully</td><td class = "tsind" width = 10%><font size  =  2 color  =  red><img src  = '../../ReportRef/Images/pass.gif' Pass&nbsp;</td><td class = "tsind" width = 10%></td>]]></con:value></con:property><con:property><con:name>TotalOffices</con:name><con:value>0</con:value></con:property><con:property><con:name>NewPropertyName</con:name><con:value>AutoTestProperty_51034</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>CorporateID</con:name><con:value>2</con:value></con:property><con:property><con:name>CorporateName</con:name><con:value>AutoTestCorporation_94999</con:value></con:property><con:property><con:name>NewOfficeName</con:name><con:value>AutoTestOffice_15415</con:value></con:property><con:property><con:name>AppOfficeID</con:name><con:value>10</con:value></con:property><con:property><con:name>NewPropertyName</con:name><con:value>AutoTestProperty_15415</con:value></con:property><con:property><con:name>TestCount</con:name><con:value>10</con:value></con:property></con:properties><con:setupScript/></con:testSuite><con:properties><con:property><con:name>Working_Directory</con:name><con:value>C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project</con:value></con:property><con:property><con:name>ServiceEndPoint</con:name><con:value>http://localhost:8085</con:value></con:property><con:property><con:name>TestDataPath</con:name><con:value>C:\\Selenium_Workspace\\HomeDepot_Renowalk\\TestData\\Renowalk_Automation_Data.xls</con:value></con:property><con:property><con:name>ProjectLog</con:name><con:value>C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Logs\RenoWalk_API_Automation_20150929.log</con:value></con:property><con:property><con:name>LogFileName</con:name><con:value>RenoWalk_API_Automation_20150929.log</con:value></con:property><con:property><con:name>ResultPath</con:name><con:value>C:\Selenium_Workspace\HomeDepot_Renowalk\API_Project\Results\Regression_09_29_2015_04_23_18_PM</con:value></con:property><con:property><con:name>User</con:name><con:value>SXA8062</con:value></con:property><con:property><con:name>Pwd</con:name><con:value>sdfsdf</con:value></con:property><con:property><con:name>Schema</con:name><con:value>SERVICES_TST01</con:value></con:property><con:property><con:name>DBConnectionString</con:name><con:value>jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=atst-dtdb01)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=adctst1)))</con:value></con:property><con:property><con:name>CorporateID</con:name><con:value>1</con:value></con:property><con:property><con:name>OfficePropertySmokeCount</con:name><con:value>10</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>